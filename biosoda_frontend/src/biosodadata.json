{
    "possibleServices": [
        {
            "id": "S00000001",
            "name": "federation server",
            "moreinfo": "https://github.com/biosoda/bioquery",
            "urlquery": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?format=srj&query=ASK+%7B%3Fa+a+%3Fb%7D"
        },
        {
            "id": "S00000002",
            "name": "UniProt",
            "moreinfo": "https://www.uniprot.org/",
            "urlquery": "https://sparql.uniprot.org/sparql/?format=srj&query=ASK+%7B%3Fa+a+%3Fb%7D"
        },
        {
            "id": "S00000003",
            "name": "OMA",
            "moreinfo": "https://omabrowser.org",
            "urlquery": "https://sparql.omabrowser.org/lode/servlet/query?format=srj&query=ASK+%7B%3Fa+a+%3Fb%7D"
        },
        {
            "id": "S00000004",
            "name": "Bgee",
            "moreinfo": "https://bgee.org",
            "urlquery": "https://www.bgee.org/sparql/?query=PREFIX%20up%3A%20%3Chttp%3A%2F%2Fpurl.uniprot.org%2Fcore%2F%3E%0ASELECT%20*%20%7B%0A%09%3Fspecies%20a%20up%3ATaxon%20.%0A%09%3Fspecies%20up%3AscientificName%20%3Fname%20.%0A%09%3Fspecies%20up%3Arank%20up%3ASpecies%20.%0A%7D&format=application%2Fsparql-results%2Bjson&limit=100&offset=0&inference=false"
        }
    ],
    "structure": [
        {
            "id": "C00000001",
            "title": "Contact form",
            "parentId": null
        },
        {
            "id": "C00000002",
            "title": "Homologous Genes + Gene Expression",
            "parentId": null
        },
        {
            "id": "C00000003",
            "title": "Retrieve proteins",
            "parentId": "C00000002"
        },
        {
            "id": "C00000004",
            "title": "Retrieve genes",
            "parentId": "C00000002"
        },
        {
            "id": "C00000005",
            "title": "Homologous Genes + Protein and Functional Information",
            "parentId": null
        },
        {
            "id": "C00000006",
            "title": "Retrieve proteins",
            "parentId": "C00000005"
        },
        {
            "id": "C00000007",
            "title": "Gene Expression + Protein and Functional Information",
            "parentId": null
        },
        {
            "id": "C00000008",
            "title": "Retrieve anatomic entities",
            "parentId": "C00000007"
        },
        {
            "id": "C00000009",
            "title": "Retrieve genes",
            "parentId": "C00000007"
        },
        {
            "id": "C00000010",
            "title": "Homologous Genes + Gene Expression + Protein and Functional Information",
            "parentId": null
        },
        {
            "id": "C00000011",
            "title": "Retrieve genes",
            "parentId": "C00000010"
        },
        {
            "id": "C00000012",
            "title": "Retrieve proteins",
            "parentId": "C00000010"
        },
        {
            "id": "C00000013",
            "title": "Homologous Genes + Gene Expression + Disease Association",
            "parentId": "C00000010"
        },
        {
            "id": "C00000014",
            "title": "Bgee database queries",
            "parentId": null
        },
        {
            "id": "C00000015",
            "title": "Retrieve anatomic entities",
            "parentId": "C00000014"
        },
        {
            "id": "C00000016",
            "title": "Retrieve genes",
            "parentId": "C00000014"
        },
        {
            "id": "C00000017",
            "title": "Information on Homologous Genes queries",
            "parentId": null
        },
        {
            "id": "C00000018",
            "title": "Retrieve species",
            "parentId": "C00000017"
        },
        {
            "id": "C00000019",
            "title": "Retrieve proteins",
            "parentId": "C00000017"
        },
        {
            "id": "C00000020",
            "title": "Retrieve pairwise orthologs",
            "parentId": "C00000017"
        },
        {
            "id": "C00000021",
            "title": "Retrieve homologous groups",
            "parentId": "C00000017"
        },
        {
            "id": "C00000022",
            "title": "Retrieve Hierarchical Orthologous Groups (HOG)",
            "parentId": "C00000017"
        },
        {
            "id": "C00000023",
            "title": "Meta-analysis - comparing data across OMA and MBGD orthology",
            "parentId": "C00000017"
        },
        {
            "id": "C00000024",
            "title": "Protein Sequence and Functional Information Queries",
            "parentId": null
        },
        {
            "id": "C00000025",
            "title": "Retrieve proteins",
            "parentId": "C00000024"
        },
        {
            "id": "C00000026",
            "title": "SIB Example SPARQL Queries",
            "parentId": null
        },
        {
            "id": "C00000100",
            "title": "UniProt",
            "parentId": "C00000026"
        },
        {
            "id": "C00000101",
            "title": "Bgee",
            "parentId": "C00000026"
        },
        {
            "id": "C00000102",
            "title": "MetaNetX",
            "parentId": "C00000026"
        },
        {
            "id": "C00000103",
            "title": "OrthoDB",
            "parentId": "C00000026"
        },
        {
            "id": "C00000104",
            "title": "SwissLipids",
            "parentId": "C00000026"
        },
        {
            "id": "C00000105",
            "title": "neXtProt",
            "parentId": "C00000026"
        },
        {
            "id": "C00000106",
            "title": "OMA",
            "parentId": "C00000026"
        },
        {
            "id": "C00000107",
            "title": "Rhea",
            "parentId": "C00000026"
        },
        {
            "id": "C00000108",
            "title": "GlyConnect",
            "parentId": "C00000026"
        },
        {
            "id": "C00000109",
            "title": "HAMAP",
            "parentId": "C00000026"
        },
        {
            "id": "C00000110",
            "title": "DBGI",
            "parentId": "C00000026"
        }
    ],
    "questions": [
        {
            "id": "Q00000001",
            "question": "The orthologs of a gene that is expressed in the $$fruitfly$$’s $$brain$$ and the UniProt annotations of these orthologs.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT distinct ?gene_id ?orthologousTo ?uniprot ?annotation_text WHERE {\n\tSERVICE <https://www.bgee.org/sparql/> {\n\t\tSELECT ?gene ?gene_id {\n\t\t\t?gene a orth:Gene .\n\t\t\t?gene genex:isExpressedIn ?anat .\n\t\t\t?gene dcterms:identifier ?gene_id .\n\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t?gene orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon .\n\t\t\t?taxon up:commonName \"$$fruitfly$$\" .\n\t\t}\n\t\t$$innerlimit$$\n\t}\n\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\tSELECT ?uniprot ?gene ?orthologousTo {\n\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t?node2 orth:hasHomologousMember* ?orthologousTo .\n\t\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t\t?protein1 sio:SIO_010079 ?gene .\n\t\t\t?orthologousTo lscr:xrefUniprot ?uniprot .\n\t\t\tfilter(?node1 != ?node2)\n\t\t}\n\t}\n\n\tSERVICE <https://sparql.uniprot.org/sparql>{\n\t\t?uniprot up:annotation ?annotation .\n\t\t?annotation rdfs:comment ?annotation_text .\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities_extraspecies",
                    "extrafilter": [
                        "fruitfly"
                    ]
                },
                {
                    "name": "fruitfly",
                    "type": "list",
                    "default": "fruit fly",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon",
                    "extraempties": [
                        "brain"
                    ]
                }
            ],
            "parentIds": [
                "C00000011"
            ]
        },
        {
            "id": "Q00000002",
            "question": "Which are the genes in $$primates$$ orthologous to a gene that is expressed in the $$fruitfly$$’s $$brain$$ and the UniProt annotations of the genes.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?OMA_LINK ?uniprot ?annotation_text WHERE {\n\tSELECT * {\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\tSELECT ?gene {\n\t\t\t\t?gene genex:isExpressedIn ?anat .\n\t\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t\t?gene orth:organism ?o .\n\t\t\t\t?o obo:RO_0002162 ?taxon .\n\t\t\t\t?taxon up:commonName '$$fruitfly$$' .\n\t\t\t}\n\t\t\t$$innerlimit$$\n\t\t}\n\t\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t\tSELECT ?gene ?OMA_LINK ?uniprot{\n\t\t\t\t?protein2 a orth:Protein .\n\t\t\t\t?protein1 a orth:Protein .\n\t\t\t\t?clusterPrimates a orth:OrthologsCluster .\n\t\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t\t?node2 orth:hasHomologousMember* ?clusterPrimates .\n\t\t\t\t?clusterPrimates orth:hasHomologousMember* ?protein2 .\n\t\t\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t\t\t?protein1 sio:SIO_010079 ?gene. #encoded by\n\t\t\t\t?protein2 rdfs:seeAlso ?OMA_LINK .\n\t\t\t\t?clusterPrimates orth:hasTaxonomicRange ?taxRange .\n\t\t\t\t?taxRange orth:taxRange ?taxLevel .\n\t\t\t\t?protein2 lscr:xrefUniprot ?uniprot .\n\t\t\t\tVALUES ?taxLevel { '$$primates$$' }\n\t\t\t\tFILTER ( ?node1 != ?node2 )\n\t\t\t}\n\t\t}\n\t\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t\tSELECT ?annotation_text ?uniprot {\n\t\t\t\t?uniprot up:annotation ?annotation .\n\t\t\t\t?annotation rdfs:comment ?annotation_text .\n\t\t\t}\n\t\t}\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "primates",
                    "type": "list",
                    "default": "Primates",
                    "flavour": "autocomplete",
                    "datasource": "taxlevels"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                },
                {
                    "name": "fruitfly",
                    "type": "list",
                    "default": "fruit fly",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                }
            ],
            "parentIds": [
                "C00000011"
            ]
        },
        {
            "id": "Q00000003",
            "question": "Which are the genes in $$human$$ associated to a disease that are orthologous to a gene expressed in the $$rat$$’s $$brain$$?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?OMA_LINK ?uniprot ?annotation_text WHERE {\n\tSERVICE <https://www.bgee.org/sparql/> {\n\t\tSELECT ?gene {\n\t\t\t?gene genex:isExpressedIn ?anat .\n\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t?gene orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon .\n\t\t\t?taxon up:commonName '$$rat$$' .\n\t\t}\n\t\t$$innerlimit$$\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?taxon2 up:commonName '$$human$$' .\n\t}\n\tSERVICE <https://sparql.omabrowser.org/lode/sparql> {\n\t\t?protein2 a orth:Protein .\n\t\t?protein1 a orth:Protein .\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?protein2 .\n\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t?protein1 sio:SIO_010079 ?gene. #encoded by\n\t\t?protein2 rdfs:seeAlso ?OMA_LINK .\n\t\t?protein2 orth:organism/obo:RO_0002162 ?taxon2 .\n\t\t?protein2 lscr:xrefUniprot ?uniprot .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?uniprot up:annotation ?annotation .\n\t\t?annotation rdfs:comment ?annotation_text .\n\t\t?annotation a up:Disease_Annotation .\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "rat",
                    "type": "list",
                    "default": "rat",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "human",
                    "type": "list",
                    "default": "Human",
                    "flavour": "autocomplete",
                    "datasource": "speciescommon"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000012"
            ]
        },
        {
            "id": "Q00000004",
            "question": "Which are the proteins associated with \"$$glioblastoma$$\" and the orthologs expressed in the rat’s $$brain$$?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n\tSELECT * {\n\t\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t\tSELECT ?protein ?annotation_text WHERE {\n\t\t\t\t?protein a up:Protein ;\n\t\t\t\tup:organism taxon:9606 ;\n\t\t\t\tup:annotation ?annotation .\n\t\t\t\t?annotation rdfs:comment ?annotation_text .\n\t\t\t\t?annotation a up:Disease_Annotation .\n\t\t\t\tFILTER CONTAINS (?annotation_text, \"$$glioblastoma$$\")\n\t\t\t}\n\t\t}\n\t\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t\tSELECT ?orthologous_protein ?protein ?gene WHERE {\n\t\t\t\t?protein_OMA a orth:Protein .\n\t\t\t\t?orthologous_protein a orth:Protein .\n\t\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t\t?cluster\n\t\t\t\torth:hasHomologousMember ?node2 .\n\t\t\t\t?node2 orth:hasHomologousMember* ?protein_OMA .\n\t\t\t\t?node1 orth:hasHomologousMember* ?orthologous_protein .\n\t\t\t\t?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n\t\t\t\t?orthologous_protein sio:SIO_010079 ?gene .\n\t\t\t\t?protein_OMA lscr:xrefUniprot ?protein .\n\t\t\t\tFILTER(?node1 != ?node2)\n\t\t\t}\n\t\t}\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\t ?gene genex:isExpressedIn ?a .\n\t\t\t?a rdfs:label \"$$brain$$\" .\n\t\t\t?gene orth:organism ?s . \n\t\t\t?s obo:RO_0002162 taxon:10116.\n\t\t}\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "glioblastoma",
                    "type": "string",
                    "default": "glioblastoma",
                    "flavour": "string"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000012"
            ]
        },
        {
            "id": "Q00000005",
            "question": "What are the Homo sapiens’ genes associated with $$cancer$$ and their orthologs expressed in the $$rat$$’s $$brain$$?",
            "SPARQL": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT ?gene ?orthologous_protein2 WHERE {\n\tSELECT * {\n\t\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t\tSELECT ?protein1 WHERE {\n\t\t\t?protein1 a up:Protein;\n\t\t\t\tup:organism/up:scientificName 'Homo sapiens' ;\n\t\t\t\tup:annotation ?annotation .\n\t\t\t\t?annotation rdfs:comment ?annotation_text.\n\t\t\t\t?annotation a up:Disease_Annotation .\n\t\t\t\tFILTER CONTAINS (?annotation_text, \"$$cancer$$\")\n\t\t\t}\n\t\t}\n\n\t\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t\tSELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n\t\t\t\t?protein_OMA a orth:Protein .\n\t\t\t\t?orthologous_protein2 a orth:Protein .\n\t\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t\t?node2 orth:hasHomologousMember* ?protein_OMA .\n\t\t\t\t?node1 orth:hasHomologousMember* ?orthologous_protein2 \n\t\t\t\t.?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName '$$rat$$' .\n\t\t\t\t?orthologous_protein2 sio:SIO_010079 ?gene .\n\t\t\t\t?protein_OMA lscr:xrefUniprot ?protein1 .\n\t\t\t\tFILTER(?node1 != ?node2)\n\t\t\t}\n\t\t}\n\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\t?gene genex:isExpressedIn ?anatEntity .\n\t\t\t?anatEntity rdfs:label '$$brain$$' .\n\t\t\t?gene orth:organism ?org . \n\t\t\t?org obo:RO_0002162 taxon:10116 .\n\t\t}\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "cancer",
                    "type": "string",
                    "default": "cancer",
                    "flavour": "string"
                },
                {
                    "name": "rat",
                    "type": "list",
                    "default": "Rattus norvegicus",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgee"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000013"
            ]
        },
        {
            "id": "Q00000006",
            "question": "Anatomic entities where the $$ins$$ $$zebrafish$$ gene is expressed and its gene GO annotations.",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?anat_label ?GO_CLASS ?GO_LABEL {\n\tSERVICE <https://www.bgee.org/sparql/> {\n\t\tSELECT ?geneEns ?anat_label {\n\t\t\t?geneB a orth:Gene .\n\t\t\t?geneB genex:isExpressedIn ?anat .\n\t\t\t?geneB rdfs:label ?anatLabel ;\n\t\t\t\tlscr:xrefEnsemblGene ?geneEns .\n\t\t\tFILTER (UCASE($anatLabel) = UCASE('$$ins$$'))\n\t\t\t?anat rdfs:label ?anat_label .\n\t\t\t?geneB orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon2 .\n\t\t\t?taxon2 up:commonName '$$zebrafish$$' .\n\t\t}\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?uniprot rdfs:seeAlso / up:transcribedFrom ?geneEns .\n\t\t?uniprot a up:Protein .\n\t\t?uniprot up:classifiedWith ?GO_CLASS .\n\t\t?GO_CLASS rdfs:label ?GO_LABEL .\n\t}\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "ins",
                    "type": "list",
                    "default": "ins",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                },
                {
                    "name": "zebrafish",
                    "type": "list",
                    "default": "zebrafish",
                    "flavour": "autocomplete",
                    "fullList": false,
                    "datasource": "speciesbgeecommon"
                }
            ],
            "parentIds": [
                "C00000008"
            ]
        },
        {
            "id": "Q00000007",
            "question": "Genes expressed in the $$human$$'s $$pancreas$$ and their annotations in UniProt.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nSELECT DISTINCT ?geneEns ?uniprot ?annotation_text {\n\tSERVICE <https://www.bgee.org/sparql/> {\n\t\tSELECT ?geneEns {\n\t\t\t?geneB a orth:Gene .\n\t\t\t?geneB genex:isExpressedIn ?cond .\n\t\t\t?cond genex:hasAnatomicalEntity ?anat .\n\t\t\t\t?geneB lscr:xrefEnsemblGene ?geneEns .\n\t\t?anat rdfs:label '$$pancreas$$' .\n\t\t?geneB orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon2 .\n\t\t\t?taxon2 up:commonName '$$human$$' .\n\t\t}\n\t\t$$innerlimit$$\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?uniprot rdfs:seeAlso / up:transcribedFrom ?geneEns .\n\t\t?uniprot up:annotation ?annotation .\n\t\t?annotation rdfs:comment ?annotation_text .\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "human",
                    "type": "list",
                    "default": "human",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "pancreas",
                    "type": "list",
                    "default": "pancreas",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000009"
            ]
        },
        {
            "id": "Q00000008",
            "question": "Genes expressed in the $$human$$'s $$brain$$ during the $$infantstage$$ and their UniProt disease annotations",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nSELECT DISTINCT ?geneEns ?uniprot ?annotation_text {\n\tSERVICE <https://www.bgee.org/sparql/> {\n\t\tSELECT ?geneEns {\n\t\t\t?geneB genex:isExpressedIn ?cond ;\n\t\t\t\tlscr:xrefEnsemblGene ?geneEns .\n\t\t\t?cond genex:hasDevelopmentalStage ?st .\n\t\t\t?cond genex:hasAnatomicalEntity ?anat .\n\t\t\t?st rdfs:label '$$infantstage$$' .\n\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t?geneB orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon2 .\n\t\t\t?taxon2 up:commonName '$$human$$' .\n\t\t}\n\t\t$$innerlimit$$\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?uniprot rdfs:seeAlso / up:transcribedFrom ?geneEns .\n\t\t?uniprot up:annotation ?annotation .\n\t\t?annotation a up:Disease_Annotation .\n\t\t?annotation rdfs:comment ?annotation_text .\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "human",
                    "type": "list",
                    "default": "human",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "infantstage",
                    "type": "list",
                    "default": "infant stage",
                    "flavour": "autocomplete",
                    "datasource": "stages"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000009"
            ]
        },
        {
            "id": "Q00000009",
            "question": "Proteins in OMA that are encoded by the $$INS$$ gene without considering synonyms and their species identifier and evidence types from UniProt database.",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?proteinOMA ?species ?mnemonic ?evidenceType ?UniProt_URI WHERE {\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?proteinOMA a orth:Protein ;\n\t\t\torth:organism/obo:RO_0002162/up:scientificName ?species ;\n\t\t\trdfs:label '$$INS$$' .\n\t\t?proteinOMA lscr:xrefUniprot ?UniProt_URI .\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?UniProt_URI up:mnemonic ?mnemonic ;\n\t\t\tup:existence/rdfs:label ?evidenceType .\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "INS",
                    "type": "list",
                    "default": "INS",
                    "flavour": "autocomplete",
                    "datasource": "proteinsatoma"
                }
            ],
            "parentIds": [
                "C00000006"
            ]
        },
        {
            "id": "Q00000010",
            "question": "$$rabbit$$'s proteins encoded by genes that are orthologous to $$mouse$$'s $$HBBY$$ gene and their cross reference links to Uniprot",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?taxon_1 up:commonName '$$mouse$$' .\n\t\t?taxon_2 up:commonName '$$rabbit$$' .\n\t}\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label '$$HBBY$$' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "HBBY",
                    "type": "list",
                    "default": "HBB-Y",
                    "flavour": "autocomplete",
                    "datasource": "proteinsatoma"
                },
                {
                    "name": "rabbit",
                    "type": "list",
                    "default": "Rabbit",
                    "flavour": "autocomplete",
                    "datasource": "speciescommon"
                },
                {
                    "name": "mouse",
                    "type": "list",
                    "default": "Mouse",
                    "flavour": "autocomplete",
                    "datasource": "speciescommon"
                }
            ],
            "parentIds": [
                "C00000006"
            ]
        },
        {
            "id": "Q00000011",
            "question": "$$rattusnorvegicus$$' proteins encoded by genes that are paralogous to its $$Tp53$$ gene and their Uniprot function annotations.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT DISTINCT ?PROTEIN ?IS_PARALOGOUS_TO_PROTEIN ?UNIPROT_XREF ?PARALOG_UNIPROT_XREF ?annotation_text WHERE {\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:ParalogsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN .\n\t\t?node1 orth:hasHomologousMember* ?IS_PARALOGOUS_TO_PROTEIN .\n\t\t?PROTEIN a orth:Protein .\n\t\t?PROTEIN orth:organism/obo:RO_0002162/up:scientificName '$$rattusnorvegicus$$' ;\n\t\t\trdfs:label '$$Tp53$$' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF .\n\t\t?IS_PARALOGOUS_TO_PROTEIN a orth:Protein .\n\t\t?IS_PARALOGOUS_TO_PROTEIN orth:organism/obo:RO_0002162/up:scientificName '$$rattusnorvegicus$$' .\n\t\t?IS_PARALOGOUS_TO_PROTEIN lscr:xrefUniprot ?PARALOG_UNIPROT_XREF .\n\t}\n\tSERVICE <https://sparql.uniprot.org/sparql> {\n\t\t?PARALOG_UNIPROT_XREF up:annotation ?annotation .\n\t\t?annotation a up:Function_Annotation .\n\t\t?annotation rdfs:comment ?annotation_text .\n\t}\n\tFILTER ( ?node1 != ?node2 )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "Tp53",
                    "type": "list",
                    "default": "TP53",
                    "flavour": "autocomplete",
                    "datasource": "proteinsatoma"
                },
                {
                    "name": "rattusnorvegicus",
                    "type": "list",
                    "default": "Rattus norvegicus",
                    "flavour": "autocomplete",
                    "datasource": "species"
                }
            ],
            "parentIds": [
                "C00000006"
            ]
        },
        {
            "id": "Q00000012",
            "question": "Which are the $$mouse$$'s proteins encoded by genes which are expressed in the $$liver$$ and are orthologous to $$human$$'s $$INS$$ gene?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT ?name1 ?protein1 ?name2 ?protein2 ?OMA_link2 ?anatomicalEntity {\n\tSELECT DISTINCT * {\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\t?taxon up:commonName '$$human$$' ;\n\t\t\t\tup:commonName ?name1 .\n\t\t\t?taxon2 up:commonName '$$mouse$$' ;\n\t\t\t\tup:commonName ?name2 .\n\t\t}\n\t\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t?node2 orth:hasHomologousMember* ?protein2 .\n\t\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t\t?protein1 a orth:Protein .\n\t\t\t?protein1 rdfs:label '$$INS$$' ;\n\t\t\t\torth:organism/obo:RO_0002162 ?taxon .\n\t\t\t?protein2 a orth:Protein ;\n\t\t\t\tsio:SIO_010079 ?gene ; #is encoded by\n\t\t\t\torth:organism/obo:RO_0002162 ?taxon2 .\n\t\t\t?gene lscr:xrefEnsemblGene ?geneEns .\n\t\t\t?protein2 rdfs:seeAlso ?OMA_link2 .\n\t\t\tFILTER ( ?node1 != ?node2 )\n\t\t}\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\t?geneB a orth:Gene .\n\t\t\t\t?geneB genex:isExpressedIn ?cond .\n\t\t\t\t?cond genex:hasAnatomicalEntity ?anat .\n\t\t\t\t?geneB lscr:xrefEnsemblGene ?geneEns .\n\t\t\t?anat rdfs:label '$$liver$$' ;\n\t\t\t\trdfs:label ?anatomicalEntity .\n\t\t\t?geneB orth:organism ?o .\n\t\t\t?o obo:RO_0002162 ?taxon2 .\n\t\t}\n\t}\n\t$$innerlimit$$\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "mouse",
                    "type": "list",
                    "default": "mouse",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "liver",
                    "type": "list",
                    "default": "liver",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                },
                {
                    "name": "human",
                    "type": "list",
                    "default": "human",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "INS",
                    "type": "list",
                    "default": "INS",
                    "flavour": "autocomplete",
                    "datasource": "proteinsatoma"
                }
            ],
            "parentIds": [
                "C00000003"
            ]
        },
        {
            "id": "Q00000013",
            "question": "Which are the orthologs of a gene that is expressed in the $$fruitfly$$’s $$brain$$?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?id ?OMA_LINK WHERE {\n\tSELECT * {\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\tSELECT DISTINCT ?gene ?id {\n\t\t\t\t?gene a orth:Gene .\n\t\t\t\t?gene genex:isExpressedIn ?anat .\n\t\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t\t?gene orth:organism ?o .\n\t\t\t\t?o obo:RO_0002162 ?taxon .\n\t\t\t\t?gene dcterms:identifier ?id .\n\t\t\t\t?taxon up:commonName '$$fruitfly$$' .\n\t\t\t}\n\t\t\tLIMIT 100\n\t\t}\n\t\tSERVICE <https://sparql.omabrowser.org/lode/sparql> {\n\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t?node2 orth:hasHomologousMember* ?protein2 .\n\t\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t\t?protein1 dcterms:identifier ?id .\n\t\t\t?protein2 rdfs:seeAlso ?OMA_LINK .\n\t\t\tFILTER ( ?node1 != ?node2 )\n\t\t}\n\t}\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "fruitfly",
                    "type": "list",
                    "default": "fruit fly",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "brain",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000004"
            ]
        },
        {
            "id": "Q00000014",
            "question": "Which are the genes in $$primates$$ orthologous to a gene that is expressed in the $$fruitfly$$’s $$brain$$?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?orthologous_to_gene_id ?orthologous_to_gene ?hasOrtholog WHERE {\n\tSELECT * {\n\t\tSERVICE <https://www.bgee.org/sparql/> {\n\t\t\tSELECT DISTINCT ?gene ?orthologous_to_gene_id ?orthologous_to_gene {\n\t\t\t\t?gene a orth:Gene .\n\t\t\t\t?gene genex:isExpressedIn ?anat .\n\t\t\t\t?anat rdfs:label '$$brain$$' .\n\t\t\t\t?gene orth:organism ?o .\n\t\t\t\t?o obo:RO_0002162 ?taxon .\n\t\t\t\t?gene dcterms:identifier ?orthologous_to_gene_id .\n\t\t\t\t?gene rdfs:seeAlso ?orthologous_to_gene .\n\t\t\t\t?taxon up:commonName '$$fruitfly$$' .\n\t\t\t} LIMIT 100\n\t\t}\n\t\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t\t?protein2 a orth:Protein .\n\t\t\t?protein1 a orth:Protein .\n\t\t\t?clusterPrimates a orth:OrthologsCluster .\n\t\t\t?cluster a orth:OrthologsCluster .\n\t\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t\t?node2 orth:hasHomologousMember* ?clusterPrimates .\n\t\t\t?clusterPrimates orth:hasHomologousMember* ?protein2 .\n\t\t\t?node1 orth:hasHomologousMember* ?protein1 .\n\t\t\t?protein1 dcterms:identifier ?orthologous_to_gene_id .\n\t\t\t?protein2 rdfs:seeAlso ?hasOrtholog .\n\t\t\t?clusterPrimates orth:hasTaxonomicRange ?taxRange .\n\t\t\t?taxRange orth:taxRange ?taxLevel .\n\t\t\tVALUES ?taxLevel { '$$primates$$' }\n\t\t\tFILTER ( ?node1 != ?node2 )\n\t\t}\n\t}\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/federation-repo",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/federation-repo?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "fruitfly",
                    "type": "list",
                    "default": "fruit fly",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "primates",
                    "type": "list",
                    "default": "Primates",
                    "flavour": "autocomplete",
                    "datasource": "taxlevels"
                },
                {
                    "name": "brain",
                    "type": "list",
                    "default": "eye",
                    "flavour": "autocomplete",
                    "datasource": "anatomicentities"
                }
            ],
            "parentIds": [
                "C00000004"
            ]
        },
        {
            "id": "Q00000015",
            "question": "$$scientificname$$ of species in bgee with their uniprot taxon",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT * {\n\t?species a up:Taxon .\n\t?species $$scientificname$$ ?name .\n\t?species up:rank up:Species .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "scientificname",
                    "type": "simplelist",
                    "default": "Scientific name",
                    "listvalues": [
                        {
                            "label": "Scientific name",
                            "value": "up:scientificName"
                        },
                        {
                            "label": "Common name",
                            "value": "up:commonName"
                        }
                    ],
                    "defaultvalue": "up:scientificName"
                }
            ],
            "parentIds": [
                "C00000015"
            ]
        },
        {
            "id": "Q00000016",
            "question": "Genes with the following term in the description: $$lung$$",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT ?geneName ?geneId {\n\t?gene a orth:Gene .\n\t?gene rdfs:label ?geneName .\n\t?gene dcterms:identifier ?geneId .\n\t?gene dcterms:description ?desc .\n\tFILTER CONTAINS ( ?desc, '$$lung$$' )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "lung",
                    "type": "string",
                    "default": "lung"
                }
            ],
            "parentIds": [
                "C00000016"
            ]
        },
        {
            "id": "Q00000017",
            "question": "Which species the $$Mtco1$$ gene is present (without considering synonyms)?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT ?name {\n\t?gene a orth:Gene .\n\t?gene rdfs:label ?geneName .\n\t?gene orth:organism ?organism . #orth v2\n\t?organism obo:RO_0002162 ?taxon . #label: in taxon .\n\t?taxon up:scientificName ?name .\n\tFILTER ( UCASE(?geneName) = UCASE('$$Mtco1$$') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "Mtco1",
                    "type": "list",
                    "default": "Mt-co1",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                }
            ],
            "parentIds": [
                "C00000016"
            ]
        },
        {
            "id": "Q00000018",
            "question": "List the labels and identifiers of $$fruitfly$$ genes in bgee",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT distinct ?gene_page ?geneName {\n\t?gene a orth:Gene .\n\t?gene rdfs:seeAlso ?gene_page .\n\t?gene rdfs:label ?geneName .\n\t?gene orth:organism ?taxon .\n\t?taxon obo:RO_0002162 ?species . #in taxon property .\n\t?species up:commonName ?commonName .\n\tFILTER ( lcase(str(?commonName)) = lcase(\"$$fruitfly$$\") ) .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "fruitfly",
                    "type": "list",
                    "default": "Fruit fly",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                }
            ],
            "parentIds": [
                "C00000016"
            ]
        },
        {
            "id": "Q00000019",
            "question": "$$human$$ anatomic entities at $$youngadult$$ developmental stage",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?anatName {\n\t?cond genex:hasAnatomicalEntity ?anatEntity .\n\t?anatEntity rdfs:label ?anatName .\n\t?cond genex:hasDevelopmentalStage ?stage .\n\t?stage rdfs:label ?stageName .\n\t?cond obo:RO_0002162 ?taxon .\n\t?taxon up:commonName ?commonName .\n\tFILTER ( lcase(str(?commonName)) = lcase(\"$$human$$\") ).\n\tFILTER ( CONTAINS(?stageName, \"$$youngadult$$\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "human",
                    "type": "list",
                    "default": "Human",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "youngadult",
                    "type": "list",
                    "default": "young adult",
                    "flavour": "autocomplete",
                    "datasource": "stages"
                }
            ],
            "parentIds": [
                "C00000015"
            ]
        },
        {
            "id": "Q00000020",
            "question": "Anatomic entities where the $$apoc1$$ gene is expressed",
            "SPARQL": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT ?anatEntity ?anatName {\n\t?seq a orth:Gene .\n\t?seq genex:isExpressedIn ?cond.\n\t?seq rdfs:label '$$apoc1$$' .\n\t?cond genex:hasAnatomicalEntity ?anatEntity .\n\t?anatEntity rdfs:label ?anatName . \n} $$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "apoc1",
                    "type": "list",
                    "default": "apoc1",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                }
            ],
            "parentIds": [
                "C00000015"
            ]
        },
        {
            "id": "Q00000021",
            "question": "Anatomic entities in $$rats$$ where the $$apoc1$$ gene is expressed",
            "SPARQL": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?anatEntity ?anatName {\n\t?seq a orth:Gene .\n\t?seq genex:isExpressedIn ?cond .\n\t?seq rdfs:label ?geneName .\n\t?expr genex:hasExpressionCondition ?cond .\n\t?cond genex:hasAnatomicalEntity ?anatEntity .\n\t?anatEntity rdfs:label ?anatName .\n\t?cond obo:RO_0002162 <$$rats$$> . \n\tFILTER (LCASE(?geneName) = LCASE('$$apoc1$$') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "apoc1",
                    "type": "list",
                    "default": "apoc1",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                },
                {
                    "name": "rats",
                    "type": "list",
                    "default": "rat",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommonIRI",
                    "defaultvalue": "http://purl.uniprot.org/taxonomy/10116"
                }
            ],
            "parentIds": [
                "C00000015"
            ]
        },
        {
            "id": "Q00000022",
            "question": "Anatomic entities at the $$mouse$$’s $$adult$$ stage where the $$apoc1$$ gene is expressed",
            "SPARQL": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?anatEntity ?anatName {\n\t?seq a orth:Gene .\n\t?seq genex:isExpressedIn ?cond .\n\t?seq rdfs:label ?geneName .\n\t?cond genex:hasAnatomicalEntity ?anatEntity .\n\t?anatEntity rdfs:label ?anatName .\n\t?cond genex:hasDevelopmentalStage ?stage .\n\t?stage rdfs:label\n\t?stageName .\n\t?cond obo:RO_0002162 ?taxon . #in taxon property .\n\t?taxon up:commonName ?commonName .\n\tFILTER ( lcase(str(?commonName)) = lcase(\"$$mouse$$\") ) .\n\tFILTER ( CONTAINS(?stageName,'$$adult$$') && LCASE(?geneName) = LCASE('$$apoc1$$') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql",
            "fetchUrl": "https://www.bgee.org/sparql?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [
                {
                    "name": "mouse",
                    "type": "list",
                    "default": "Mouse",
                    "flavour": "autocomplete",
                    "datasource": "speciesbgeecommon"
                },
                {
                    "name": "adult",
                    "type": "list",
                    "default": "adult",
                    "flavour": "autocomplete",
                    "datasource": "stages"
                },
                {
                    "name": "apoc1",
                    "type": "list",
                    "default": "apoc1",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                }
            ],
            "parentIds": [
                "C00000015"
            ]
        },
        {
            "id": "Q00000023",
            "question": "Which species are available on OMA database and their $$scientificname$$?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT * WHERE {\n\t?s a up:Taxon .\n\t?s $$scientificname$$ ?v .\n\t?s up:rank up:Species .\n} ",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "scientificname",
                    "type": "simplelist",
                    "default": "scientific name",
                    "listvalues": [
                        {
                            "label": "scientific name",
                            "value": "up:scientificName"
                        },
                        {
                            "label": "mnemonic",
                            "value": "up:mnemonic"
                        }
                    ],
                    "defaultvalue": "up:scientificName"
                }
            ],
            "parentIds": [
                "C00000018"
            ]
        },
        {
            "id": "Q00000024",
            "question": "Find $$Rattusnorvegicus$$ proteins present in OMA database",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?OMA_link WHERE {\n\t?protein a orth:Protein .\n\t?protein orth:organism ?organism .\n\t?inTaxon rdfs:label 'in taxon'@en .\n\t?organism ?inTaxon ?taxon .\n\t?taxon up:scientificName '$$Rattusnorvegicus$$' .\n\t?protein rdfs:seeAlso ?OMA_link .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "Rattusnorvegicus",
                    "type": "list",
                    "default": "Rattus norvegicus",
                    "flavour": "autocomplete",
                    "datasource": "species"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000025",
            "question": "How many proteins (and their $$scientificname$$) per species are present in OMA database?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?taxon ?target (COUNT(?protein) as ?Protein_count) WHERE {\n\t?protein a orth:Protein .\n\t?protein orth:organism ?organism .\n\t?inTaxon rdfs:label 'in taxon'@en .\n\t?organism ?inTaxon ?taxon .\n\t?taxon $$scientificname$$ ?target .\n}\nGROUP BY ?taxon ?target",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "scientificname",
                    "type": "simplelist",
                    "default": "scientific name",
                    "listvalues": [
                        {
                            "label": "scientific name",
                            "value": "up:scientificName"
                        },
                        {
                            "label": "mnemonic",
                            "value": "up:mnemonic"
                        }
                    ],
                    "defaultvalue": "up:scientificName"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000026",
            "question": "All proteins that are orthologous to $$ENSLACG00000002497$$ Ensembl gene (identifier) ",
            "SPARQL": "PREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?OMA_LINK WHERE {\n\t#The three that contains Orthologs. The leafs are proteins .\n\t#This graph pattern defines the relationship protein1 is Orthologs to protein2\n\t?cluster a orth:OrthologsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?protein2 .\n\t?node1 orth:hasHomologousMember* ?protein1 .\n\t########\n\t#Specify the protein to look for its orthologs\n\t?protein1 sio:SIO_010079 ?gene .\n\t?gene lscr:xrefEnsemblGene ensembl:$$ENSLACG00000002497$$ .\n\t########\n\t#The OMA link to the second protein\n\t?protein2 rdfs:seeAlso ?OMA_LINK .\n\t########\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "ENSLACG00000002497",
                    "type": "list",
                    "default": "ENSLACG00000002497",
                    "flavour": "autocomplete",
                    "datasource": "ensemblgenes"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000027",
            "question": "Proteins that are paralogous to $$ENSLACG00000002497$$ Ensembl gene (identifier)",
            "SPARQL": "PREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?OMA_LINK WHERE {\n\t#The three that contains paralogs. The leafs are proteins .\n\t#This graph pattern defines the relationship protein1 is paralogous to protein2\n\t?cluster a orth:ParalogsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?protein2 .\n\t?node1 orth:hasHomologousMember* ?protein1 .\n\t########\n\t#Specify the protein to look for its paralogs\n\t?protein1 sio:SIO_010079 ?gene .\n\t?gene lscr:xrefEnsemblGene ensembl:$$ENSLACG00000002497$$ .\n\t########\n\t#The OMA link to the second protein\n\t?protein2 rdfs:seeAlso ?OMA_LINK .\n\t########\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "ENSLACG00000002497",
                    "type": "list",
                    "default": "ENSG00000244734",
                    "flavour": "autocomplete",
                    "datasource": "ensemblgenes"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000028",
            "question": "Proteins that are paralogous to $$HUMAN22168$$ OMA protein (identifier) and their cross reference links to OMA and Uniprot.",
            "SPARQL": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?protein2 ?Oma_link ?Uniprot_link WHERE {\n\t?cluster a orth:ParalogsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?protein2 .\n\t?node1 orth:hasHomologousMember* ?protein1 .\n\t?protein1 a orth:Protein .\n\t?protein1 dct:identifier '$$HUMAN22168$$' .\n\t?protein2 a orth:Protein .\n\t?protein2 lscr:xrefUniprot ?Uniprot_link .\n\t?protein2 rdfs:seeAlso ?Oma_link .\n\tFILTER( ?node1 != ?node2 )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "HUMAN22168",
                    "type": "list",
                    "default": "HUMAN04027",
                    "flavour": "autocomplete",
                    "datasource": "omaproteins"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000029",
            "question": "Proteins that are orthologous to $$HUMAN22168$$ OMA protein (identifier) and their cross reference links to OMA and Uniprot.",
            "SPARQL": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?protein2 ?Oma_link ?Uniprot_link WHERE {\n\t?cluster a orth:OrthologsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?protein2 .\n\t?node1 orth:hasHomologousMember* ?protein1 .\n\t?protein1 a orth:Protein .\n\t?protein1 dct:identifier '$$HUMAN22168$$' .\n\t?protein2 a orth:Protein .\n\t?protein2 lscr:xrefUniprot ?Uniprot_link .\n\t?protein2 rdfs:seeAlso ?Oma_link .\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "HUMAN22168",
                    "type": "list",
                    "default": "HUMAN22168",
                    "flavour": "autocomplete",
                    "datasource": "omaproteins"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000030",
            "question": "All proteins per species that are orthologous to $$Oryctolaguscuniculus$$ $$APOCI$$ related protein and their cross reference links to OMA and Uniprot including the corresponding Ensembl gene identifier. ",
            "SPARQL": "PREFIX dct: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT ?protein1 ?protein2 ?geneName2 ?species2 ?OMA_LINK2 ?Prot2_uniprot ?prot2_ensemblGeneId WHERE {\n\t?cluster a orth:OrthologsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?protein2 .\n\t?node1 orth:hasHomologousMember* ?protein1 .\n\t?protein1 a orth:Protein ;\n\t\torth:organism/obo:RO_0002162/up:scientificName '$$Oryctolaguscuniculus$$' ;\n\t\trdfs:label '$$APOCI$$' .\n\t?protein2 a orth:Protein ;\n\t\trdfs:seeAlso ?OMA_LINK2 ;\n\t\tlscr:xrefUniprot ?Prot2_uniprot ;\n\t\tsio:SIO_010079/lscr:xrefEnsemblGene/dct:identifier ?prot2_ensemblGeneId ;\n\t\trdfs:label ?geneName2 ;\n\t\torth:organism/obo:RO_0002162/up:scientificName ?species2 .\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "Oryctolaguscuniculus",
                    "type": "list",
                    "default": "Oryctolagus cuniculus",
                    "flavour": "autocomplete",
                    "datasource": "species"
                },
                {
                    "name": "APOCI",
                    "type": "list",
                    "default": "APOCI",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000031",
            "question": "$$Oryctolaguscuniculus$$ proteins (PROT1) encoded by genes that are orthologous to $$Musmusculus$$ (PROT2) $$HBBY$$ gene and their cross reference links to Uniprot",
            "SPARQL": "PREFIX dct: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT DISTINCT ?PROT1 ?PROT2 ?PROT1_UNIPROT_XREF ?PROT2_UNIPROT_XREF WHERE {\n\t?cluster a orth:OrthologsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?PROT2 .\n\t?node1 orth:hasHomologousMember* ?PROT1 .\n\t?PROT1 a orth:Protein .\n\t?PROT1 orth:organism/obo:RO_0002162/up:scientificName '$$Musmusculus$$' ;\n\t\trdfs:label '$$HBBY$$' ;\n\t\tlscr:xrefUniprot ?PROT1_UNIPROT_XREF .\n\t?PROT2 a orth:Protein .\n\t?PROT2 orth:organism/obo:RO_0002162/up:scientificName '$$Oryctolaguscuniculus$$' .\n\t?PROT2 lscr:xrefUniprot ?PROT2_UNIPROT_XREF .\n\tFILTER( ?node1 != ?node2 )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "Oryctolaguscuniculus",
                    "type": "list",
                    "default": "Oryctolagus cuniculus",
                    "flavour": "autocomplete",
                    "datasource": "species"
                },
                {
                    "name": "Musmusculus",
                    "type": "list",
                    "default": "Mus musculus",
                    "flavour": "autocomplete",
                    "datasource": "species"
                },
                {
                    "name": "HBBY",
                    "type": "list",
                    "default": "HBB-Y",
                    "flavour": "autocomplete",
                    "datasource": "genesbgee"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000032",
            "question": "The percentage of proteins in $$Drosophilamelanogaster$$ that has at least one paralogous sequence (protein)",
            "SPARQL": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT (COUNT(DISTINCT ?PROTEIN) as ?num_paralogy ) ?total ((xsd:float(?num_paralogy)*100/xsd:float(?total)) as ?result) WHERE {\n\t?cluster a orth:ParalogsCluster .\n\t?cluster orth:hasHomologousMember ?node1 .\n\t?cluster orth:hasHomologousMember ?node2 .\n\t?node2 orth:hasHomologousMember* ?PROTEIN .\n\t?node1 orth:hasHomologousMember* ?IS_PARALOGOUS_TO_PROTEIN .\n\t?PROTEIN a orth:Protein .\n\t?PROTEIN\north:organism/obo:RO_0002162/up:scientificName '$$Drosophilamelanogaster$$' .\n\t?IS_PARALOGOUS_TO_PROTEIN a orth:Protein .\n\t?IS_PARALOGOUS_TO_PROTEIN orth:organism/obo:RO_0002162/up:scientificName '$$Drosophilamelanogaster$$' .\n\t{\n\t\tSELECT (COUNT(DISTINCT ?protein_total) as ?total) WHERE {\n\t\t\t?protein_total a orth:Protein .\n\t\t\t?protein_total orth:organism/obo:RO_0002162/up:scientificName '$$Drosophilamelanogaster$$' .\n\t\t}\n\t}\n\tFILTER(?node1 != ?node2)\n}\nGROUP BY ?num_paralogy ?total ?result",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "Drosophilamelanogaster",
                    "type": "list",
                    "default": "Drosophila melanogaster",
                    "flavour": "autocomplete",
                    "datasource": "species"
                }
            ],
            "parentIds": [
                "C00000019"
            ]
        },
        {
            "id": "Q00000033",
            "question": "Retrieve from Ensembl dataset at the EBI RDF platform the pairwise orthologs of the gene with the $$P68871$$ UniProt accession number - only works if you disable CORS in your browser",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX ensemblterms: <http://rdf.ebi.ac.uk/terms/ensembl/>\nSELECT DISTINCT ?gene_uniprot_uri ?ortholog_uniprot_uri {\n\tVALUES (?gene_uniprot_uri){\n\t\t(<http://purl.uniprot.org/uniprot/$$P68871$$>)\n\t}\n\t?gene sio:SIO_000558 ?ortholog . # « is orthologous to »\n\t?gene obo:RO_0002162 ?taxon . # « in taxon »\n\t?ortholog obo:RO_0002162 ?ortholog_taxon.\n\t?ortholog ensemblterms:DEPENDENT ?ortholog_uniprot_uri.\n\t?gene ensemblterms:DEPENDENT ?gene_uniprot_uri.\n\tFILTER (\n\t\t?taxon != ?ortholog_taxon\n\t)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.ebi.ac.uk/rdf/services/sparql",
            "fetchUrl": "https://www.ebi.ac.uk/rdf/services/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000020"
            ]
        },
        {
            "id": "Q00000034",
            "question": "Retrieve from Ensembl dataset at the EBI RDF platform the pairwise orthologs of the gene with the $$ENSG00000139618$$ Ensembl acession number - only works if you disable CORS in your browser",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX ensemblterms: <http://rdf.ebi.ac.uk/terms/ensembl/>\nSELECT DISTINCT ?gene ?ortholog_uniprot_uri {\n\tVALUES (?gene){\n\t\t(ensembl:$$ENSG00000139618$$)\n\t}\n\t?gene sio:SIO_000558 ?ortholog.\n\t?gene obo:RO_0002162 ?taxon.\n\t?ortholog obo:RO_0002162 ?ortholog_taxon.\n\t?ortholog ensemblterms:DEPENDENT ?ortholog_uniprot_uri.\n\t?gene ensemblterms:DEPENDENT ?gene_uniprot_uri.\n\tFILTER(\n\t\t?taxon != ?ortholog_taxon\n\t\t&&\n\t\tSTRSTARTS(STR(?ortholog_uniprot_uri),\"http://purl.uniprot.org/uniprot/\")\n\t)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.ebi.ac.uk/rdf/services/sparql",
            "fetchUrl": "https://www.ebi.ac.uk/rdf/services/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "ENSG00000139618",
                    "type": "string",
                    "default": "ENSG00000139618"
                }
            ],
            "parentIds": [
                "C00000020"
            ]
        },
        {
            "id": "Q00000035",
            "question": "Retrieve pairwise orthologs which are derived from the HOGs in the OMA database of gene with the $$P68871$$ UniProt accession number",
            "SPARQL": "PREFIX oma: <http://omabrowser.org/ontology/oma#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT DISTINCT ?protein1 ?protein2 {\n\tVALUES (?protein1){\n\t\t(<http://purl.uniprot.org/uniprot/$$P68871$$>)\n\t}\n\t?cluster a orth:OrthologsCluster.\n\t?cluster orth:hasHomologousMember ?node1.\n\t?cluster orth:hasHomologousMember ?node2.\n\t?node1 orth:hasHomologousMember* ?protein_OMA_1.\n\t?node2 orth:hasHomologousMember* ?protein_OMA_2.\n\t?protein_OMA_1 lscr:xrefUniprot ?protein1.\n\t?protein_OMA_2 lscr:xrefUniprot ?protein2.\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000020"
            ]
        },
        {
            "id": "Q00000036",
            "question": "Retrieve pairwise orthologs which are derived from the HOGs in the MBGD database of gene with the $$P68871$$ UniProt accession number - only works if you disable CORS in your browser",
            "SPARQL": "PREFIX mbgdr: <http://mbgd.genome.ad.jp/rdf/resource/>\nPREFIX mbgd: <http://purl.jp/bio/11/mbgd#>\nPREFIX orth: <http://purl.org/net/orth#>\nSELECT ?protein1 ?protein2 WHERE {\n\tVALUES (?protein1){\n\t\t(<http://purl.uniprot.org/uniprot/$$P68871$$>)\n\t}\n\t?cluster a orth:OrthologsCluster.\n\t?cluster orth:hasHomologous ?node1.\n\t?cluster orth:hasHomologous ?node2.\n\t?node1 orth:hasHomologous* ?gene1.\n\t?node2 orth:hasHomologous* ?gene2.\n\t?gene1 mbgd:uniprot ?protein1.\n\t?gene2 mbgd:uniprot ?protein2.\n\tFILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "http://sparql.nibb.ac.jp/sparql",
            "fetchUrl": "http://sparql.nibb.ac.jp/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000020"
            ]
        },
        {
            "id": "Q00000037",
            "question": "Retrieve homologous groups (i.e. clusters) which are derived from the HOGs in the OMA database that contain the gene with the $$P68871$$ UniProt accession number",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nSELECT DISTINCT ?cluster ?protein2_OMA_URI ?protein2_uniprot_URI ?tax_name {\n\tVALUES (?protein1_uniprot_URI){\n\t\t(<http://purl.uniprot.org/uniprot/$$P68871$$>)\n\t}\n\tVALUES (?tax_name){\n\t\t(\"Primates\")\n\t}\n\t?cluster a orth:OrthologsCluster.\n\t?cluster orth:hasHomologousMember* ?protein_OMA_1.\n\t?cluster orth:hasHomologousMember* ?protein2_OMA_URI.\n\t?protein_OMA_1 a orth:Protein.\n\t?protein2_OMA_URI a orth:Protein.\n\t?protein_OMA_1 lscr:xrefUniprot ?protein1_uniprot_URI.\n\tOPTIONAL {\n\t\t?protein2_OMA_URI lscr:xrefUniprot ?protein2_uniprot_URI.\n\t}\n\t?cluster orth:hasTaxonomicRange ?tax.\n\t?tax orth:taxRange ?tax_name.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000021"
            ]
        },
        {
            "id": "Q00000038",
            "question": "Retrieve flat homologous groups (i.e. clusters) which are derived from the HOGs in the OrthoDB that contain the gene with the $$P68871$$ UniProt accession number",
            "SPARQL": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?groups ?species_name ?protein1_uniprot ?gene1 ?taxLevel_uniprot ?taxLevel WHERE {\n\tVALUES ?protein2_uniprot {\n\t\t<http://purl.uniprot.org/uniprot/$$P68871$$>\n\t}\n\tVALUES ?taxLevel {\n\t\t\"Primates\"\n\t}\n\t?gene2 a orthodb:Gene.\n\t?gene2 orthodb:memberOf ?groups.\n\t?gene1 a orthodb:Gene.\n\t?gene1 orthodb:memberOf ?groups.\n\t?gene1 up:organism ?organism.\n\t?organism a ?taxon.\n\t?taxon up:scientificName ?species_name.\n\t?groups orthodb:ogBuiltAt ?taxLevel_uniprot.\n\t?taxLevel_uniprot up:scientificName ?taxLevel.\n\t?gene2 orthodb:xref ?xref2.\n\t?xref2 orthodb:xrefResource ?protein2_uniprot.\n\t?protein2_uniprot a orthodb:Uniprot.\n\t?gene1 orthodb:xref ?xref.\n\t?xref a orthodb:Xref.\n\tOPTIONAL {\n\t\t?xref orthodb:xrefResource ?protein1_uniprot.\n\t\t?protein1_uniprot a orthodb:Uniprot.\n\t}\n}\nORDER BY ?groups, ?taxLevel",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org",
            "fetchUrl": "https://sparql.orthodb.org?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000021"
            ]
        },
        {
            "id": "Q00000039",
            "question": "Retrieve hierarchical orthologous groups from the OMA database that contain the gene with the $$P68871$$ UniProt accession number",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT DISTINCT ?root_hog ?species_name ?protein1_uniprot (?protein1 as ?protein1_OMA) ?taxLevel {\n\tVALUES ?protein2_uniprot {\n\t\t<http://purl.uniprot.org/uniprot/$$P68871$$>\n\t}\n\t?root_hog obo:CDAO_0000148 ?hog_cluster. #has_Root\n\t?hog_cluster orth:hasHomologousMember* ?node1.\n\t?node1 a orth:OrthologsCluster.\n\t?node1 orth:hasTaxonomicRange ?level.\n\t?level orth:taxRange ?taxLevel.\n\t?node1 orth:hasHomologousMember* ?protein1.\n\t?hog_cluster orth:hasHomologousMember* ?protein2.\n\t?protein1 a orth:Protein.\n\t?protein1 orth:organism ?organism.\n\t?organism obo:RO_0002162 ?taxon.\n\t?taxon up:scientificName ?species_name.\n\tOPTIONAL {\n\t\t?protein1 lscr:xrefUniprot ?protein1_uniprot\n\t}\n\t?protein2 a orth:Protein.\n\t?protein2 lscr:xrefUniprot ?protein2_uniprot.\n} ORDER BY ?taxLevel",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000022"
            ]
        },
        {
            "id": "Q00000040",
            "question": "Retrieve hierarchical orthologous groups from the OrthoDB that contain the gene with the $$P68871$$ UniProt accession number - only works if you disable CORS in your browser",
            "SPARQL": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?hog_root ?species_name ?protein1_uniprot ?gene1 ?taxLevel_uniprot ?taxLevel WHERE {\n\tVALUES ?protein2_uniprot {\n\t\t<http://purl.uniprot.org/uniprot/$$P68871$$>\n\t}\n\t?gene2 a orthodb:Gene.\n\t?gene2 orthodb:memberOf ?groups.\n\t?gene2 orthodb:memberOf ?hog_root.\n\tFILTER NOT EXISTS {\n\t\t?hog_root orthodb:ancestralOG ?ancestor.\n\t}\n\t?groups orthodb:ancestralOG* ?hog_root.\n\t?gene1 a orthodb:Gene.\n\t?gene1 orthodb:memberOf ?groups.\n\t?gene1 up:organism ?organism.\n\t?organism a ?taxon.\n\t?taxon up:scientificName ?species_name.\n\t?groups orthodb:ogBuiltAt ?taxLevel_uniprot.\n\t?taxLevel_uniprot up:scientificName ?taxLevel.\n\t?gene2 orthodb:xref ?xref2.\n\t?xref2 orthodb:xrefResource ?protein2_uniprot.\n\t?protein2_uniprot a orthodb:Uniprot.\n\t?gene1 orthodb:xref ?xref.\n\t?xref orthodb:xrefResource ?protein1_uniprot.\n\t?protein1_uniprot a orthodb:Uniprot.\n} ORDER BY ?hog_root ?taxLevel",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql",
            "fetchUrl": "https://sparql.orthodb.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "P68871",
                    "type": "string",
                    "default": "P68871"
                }
            ],
            "parentIds": [
                "C00000022"
            ]
        },
        {
            "id": "Q00000041",
            "question": "Retrieve pairwise orthologous genes of the Cyanobacterium-aponinum psb27- gene that are found in the MBGD database but are not present in OMA",
            "SPARQL": "PREFIX oma: <http://omabrowser.org/ontology/oma#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX mbgd: <http://purl.jp/bio/11/mbgd#>\nSELECT ?protein2 ?species WHERE {\n\tSERVICE<http://sparql.nibb.ac.jp/sparql> {\n\t\tSELECT ?protein2 ?species where {\n\t\t\t?cluster_mbgd a orth:OrthologsCluster.\n\t\t\t?cluster_mbgd orth:hasHomologous ?node1_mbgd.\n\t\t\t?cluster_mbgd orth:hasHomologous ?node2_mbgd.\n\t\t\t?node1_mbgd orth:hasHomologous* ?gene1.\n\t\t\t?node2_mbgd orth:hasHomologous* ?gene2.\n\t\t\t?gene1 mbgd:uniprot <http://purl.uniprot.org/uniprot/K9Z723>.\n\t\t\t?gene2 mbgd:uniprot ?protein2.\n\t\t\t?gene2 mbgd:organism ?taxon.\n\t\t\tOPTIONAL {\n\t\t\t\t?taxon mbgd:species ?species.\n\t\t\t}\n\t\t\tFILTER (?node1_mbgd != ?node2_mbgd)\n\t\t}\n\t}\n\tFILTER NOT EXISTS { # keep only those that do not exist in OMA\n\t\t?cluster a orth:OrthologsCluster.\n\t\t?cluster orth:hasHomologousMember ?node1.\n\t\t?cluster orth:hasHomologousMember ?node2.\n\t\t?node1 orth:hasHomologousMember* ?protein_OMA_1.\n\t\t?node2 orth:hasHomologousMember* ?protein_OMA_2.\n\t\t?protein_OMA_1 lscr:xrefUniprot <http://purl.uniprot.org/uniprot/K9Z723>.\n\t\t?protein_OMA_2 lscr:xrefUniprot ?protein2.\n\t\tFILTER (?node1 != ?node2)\n\t}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/lode/sparql",
            "fetchUrl": "https://sparql.omabrowser.org/lode/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000023"
            ]
        },
        {
            "id": "Q00000042",
            "question": "Select the UniProt protein with the mnemonic '$$A4HUMAN$$'",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein WHERE\n{\n\t?protein a up:Protein .\n\t?protein up:mnemonic '$$A4HUMAN$$'\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "A4HUMAN",
                    "type": "list",
                    "default": "A4_HUMAN",
                    "flavour": "autocomplete",
                    "datasource": "uniprotmnemonics"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000043",
            "question": "Select all UniProt proteins that were integrated on the $$date$$",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein WHERE {\n\t?protein a up:Protein .\n\t?protein up:created '$$date$$'^^xsd:date\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "date",
                    "type": "string",
                    "default": "2010-11-30"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000044",
            "question": "Select all $$taxa$$ from the UniProt taxonomy",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT * WHERE {\n\t?target a $$taxa$$ .\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "taxa",
                    "type": "simplelist",
                    "default": "taxa",
                    "listvalues": [
                        {
                            "label": "taxa",
                            "value": "up:Taxon"
                        },
                        {
                            "label": "strains",
                            "value": "up:Strain"
                        },
                        {
                            "label": "clusters",
                            "value": "up:Cluster"
                        },
                        {
                            "label": "tissues",
                            "value": "up:Tissue"
                        }
                    ],
                    "defaultvalue": "up:Taxon"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000045",
            "question": "Select all bacterial taxa, and their $$scientificname$$ from the UniProt taxonomy",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?taxon ?target WHERE {\n\t?taxon a up:Taxon .\n\t?taxon $$scientificname$$ ?target .\n\t?taxon rdfs:subClassOf taxon:2 .\n}\n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "scientificname",
                    "type": "simplelist",
                    "default": "up:scientificName",
                    "listvalues": [
                        {
                            "label": "scientific name",
                            "value": "up:scientificName"
                        },
                        {
                            "label": "common name",
                            "value": "up:commonName"
                        }
                    ]
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000046",
            "question": "which are the Ensembl transcript and genes for the $$A4HUMAN$$ protein ",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT * WHERE {\n\t?protein a up:Protein .\n\t?protein up:mnemonic '$$A4HUMAN$$' .\n\t?protein rdfs:seeAlso ?ensembl_Transcript .\n\t?ensembl_Transcript a up:Transcript_Resource .\n\t?ensembl_Transcript up:transcribedFrom ?ensembl_Gene .\n\t?ensembl_Transcript up:database <http://purl.uniprot.org/database/Ensembl> .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "A4HUMAN",
                    "type": "list",
                    "default": "A4_HUMAN",
                    "flavour": "autocomplete",
                    "datasource": "uniprotmnemonics"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000047",
            "question": "Select all human UniProt entries with a sequence variant that leads to a $$lossoffunction$$",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?protein ?annotation WHERE {\n\t?protein a up:Protein .\n\t?protein up:organism taxon:9606 .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:Natural_Variant_Annotation .\n\t?annotation rdfs:comment ?text .\n\tFILTER ( CONTAINS(?text,'$$lossoffunction$$') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "lossoffunction",
                    "type": "list",
                    "default": "loss of function",
                    "flavour": "autocomplete",
                    "datasource": "uniprotnaturalannotations"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000048",
            "question": "Select the preferred gene name and disease annotation of all $$human$$ UniProt proteins that are known to be involved in a disease",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nSELECT ?name ?diseaseAnnotation WHERE {\n\t?protein a up:Protein .\n\t?protein up:organism $$human$$ .\n\t?protein up:encodedBy ?gene .\n\t?gene skos:prefLabel ?name .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:Disease_Annotation .\n\t?annotation rdfs:comment ?diseaseAnnotation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "human",
                    "type": "simplelist",
                    "default": "human",
                    "listvalues": [
                        {
                            "label": "human",
                            "value": "taxon:9606"
                        },
                        {
                            "label": "rat",
                            "value": "taxon:10116"
                        }
                    ],
                    "defaultvalue": "taxon:9606"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000049",
            "question": "Select all UniProt proteins with $$TransmembraneAnnotation$$ and the regions' begin and end coordinates on the canonical sequence",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX faldo: <http://biohackathon.org/resource/faldo#>\nSELECT ?protein ?begin ?end WHERE {\n\t?protein a up:Protein .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:$$TransmembraneAnnotation$$ .\n\t?annotation up:range ?range .\n\t?range faldo:begin/faldo:position ?begin .\n\t?range faldo:end/faldo:position ?end .\n} \n$$innerlimit$$",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "TransmembraneAnnotation",
                    "type": "simplelist",
                    "default": "annotated transmembrane regions",
                    "listvalues": [
                        {
                            "label": "annotated transmembrane regions",
                            "value": "Transmembrane_Annotation"
                        },
                        {
                            "label": "annotated sequence unvertainty",
                            "value": "Sequence_Uncertainty_Annotation"
                        },
                        {
                            "label": "annotated modified residue",
                            "value": "Modified_Residue_Annotation"
                        },
                        {
                            "label": "annotated NP binding",
                            "value": "NP_Binding_Annotation"
                        }
                    ],
                    "defaultvalue": "Transmembrane_Annotation"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000050",
            "question": "Select the number of proteins for each of the subclasses of ec:1.1.$$subclasses$$.- EC (Enzyme Commission) class",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?enzyme (COUNT(?protein) as ?number) WHERE {\n\t?protein up:enzyme ?enzyme .\n\t?enzyme rdfs:subClassOf ec:1.1.$$subclasses$$.- .\n}\nGROUP BY ?enzyme ORDER BY ?enzyme",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "subclasses",
                    "type": "simplelist",
                    "default": "1",
                    "listvalues": [
                        {
                            "label": "-",
                            "value": "-"
                        },
                        {
                            "label": "1",
                            "value": "1"
                        },
                        {
                            "label": "2",
                            "value": "2"
                        },
                        {
                            "label": "3",
                            "value": "3"
                        }
                    ]
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00000051",
            "question": "Select all $$EColiK12$$ (including strains) UniProt proteins and their amino acid sequence",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?protein ?aa WHERE {\n\t?protein a up:Protein .\n\t?protein up:organism ?organism .\n\t{\n\t\t?protein up:organism $$EColiK12$$ .\n\t}\n\tUNION\n\t{\n\t\t?protein up:organism ?organism .\n\t\t?organism rdfs:subClassOf $$EColiK12$$ .\n\t}\n\t?protein up:sequence ?s .\n\t?s rdf:value ?aa\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj",
            "vars": [
                {
                    "name": "EColiK12",
                    "type": "list",
                    "default": "E-Coli K12",
                    "flavour": "autocomplete",
                    "datasource": "uniprottaxons",
                    "defaultvalue": "taxon:8333"
                }
            ],
            "parentIds": [
                "C00000025"
            ]
        },
        {
            "id": "Q00003466",
            "question": "Retrieve all genes that are orthologous to HUMAN22169 OMA protein (identifier) and their cross-reference links to OMA and Uniprot.",
            "SPARQL": "PREFIX dc: <http://purl.org/dc/terms/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\n\nSELECT ?protein2 ?Uniprot_link\nWHERE {\n    ?cluster a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein2 .\n    ?node1 orth:hasHomologousMember* ?protein1 .\n    ?protein1 a orth:Protein ;\n        dc:identifier 'HUMAN22169' .\n    ?protein2 a orth:Protein ;\n        lscr:xrefUniprot ?Uniprot_link .\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003467",
            "question": "Find all Rattus norvegicus proteins present in OMA RDF database.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT ?protein ?OMA_link\nWHERE {\n    ?protein a orth:Protein ;\n        orth:organism ?organism .\n    ?organism obo:RO_0002162 ?taxon . # in taxon\n    ?taxon up:scientificName 'Rattus norvegicus' .\n    ?protein rdfs:seeAlso ?OMA_link .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003468",
            "question": "Retrieve all proteins belongong to the Hierarchical Orthologous Group (HOG) at the level 'Vertebrata' to which humans' CDIN1 gene belong, together with their gene name symbol if available.",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?HOG ?MEMBER ?GENE_LABEL\nWHERE {\n    ?HOG a orth:OrthologsCluster ;\n      orth:hasHomologousMember ?node1 ;\n      orth:hasTaxonomicRange ?taxRange .\n    ?taxRange orth:taxRange 'Vertebrata' .\n    ?node1 orth:hasHomologousMember* ?query ;\n      orth:hasHomologousMember* ?MEMBER .\n    ?MEMBER a orth:Protein .\n    OPTIONAL {\n        ?MEMBER rdfs:label ?GENE_LABEL .\n    }\n    ?query a orth:Protein ;\n      orth:organism/obo:RO_0002162/up:scientificName 'Homo sapiens';\n      rdfs:label 'CDIN1'.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003469",
            "question": "Retrieve all genes that are orthologous to ENSLACG00000002497 Ensembl gene (identifier)",
            "SPARQL": "PREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT ?protein2 ?OMA_LINK\nWHERE {\n    # The three that contains Orthologs. The leafs are proteins.\n    # This graph pattern defines the relationship protein1 is Orthologs to protein2\n    ?cluster a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein2 .\n    ?node1 orth:hasHomologousMember* ?protein1 .\n\n    # Specify the protein to look for its orthologs\n    ?protein1 sio:SIO_010079/lscr:xrefEnsemblGene ensembl:ENSLACG00000002497 .\n\n    # The OMA link to the second protein\n    ?protein2 rdfs:seeAlso ?OMA_LINK .\n\n    filter(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003470",
            "question": "Which species are available on OMA database and their scientific names?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?species ?sciname\nWHERE {\n    ?species a up:Taxon ;\n        up:scientificName ?sciname ;\n        up:rank up:Species .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003471",
            "question": "Retrieve all genes per species that are orthologous to Rabbit's APOCI or APOC1 gene and their cross-reference links to OMA and Uniprot including the corresponding Ensembl gene identifier.",
            "SPARQL": "PREFIX dc: <http://purl.org/dc/terms/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein1 ?protein2 ?geneName2 ?species2 ?Prot2_uniprot ?prot2_ensemblGeneId\nWHERE {\n    ?cluster a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein2 .\n    ?node1 orth:hasHomologousMember* ?protein1 .\n    ?protein1 a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName 'Oryctolagus cuniculus';\n        rdfs:label 'APOCI' .\n    ?protein2 a orth:Protein ;\n        lscr:xrefUniprot ?Prot2_uniprot ;\n        sio:SIO_010079/lscr:xrefEnsemblGene/dc:identifier ?prot2_ensemblGeneId ;\n        rdfs:label ?geneName2 ;\n        orth:organism/obo:RO_0002162/up:scientificName ?species2.\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003472",
            "question": "Retrieve all Rabbit's proteins encoded by genes that are orthologous to Mouses's hemoglobin Y gene and their cross-reference links to Uniprot.",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?MOUSE_PROTEIN ?RABIT_PROTEIN ?MOUSE_UNIPROT_XREF ?RABIT_UNIPROT_XREF\nWHERE {\n    ?cluster a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?RABIT_PROTEIN .\n    ?node1 orth:hasHomologousMember* ?MOUSE_PROTEIN .\n    ?MOUSE_PROTEIN a orth:Protein .\n    ?MOUSE_PROTEIN  orth:organism/obo:RO_0002162/up:scientificName 'Mus musculus' ;\n        rdfs:label 'HBB-Y';\n        lscr:xrefUniprot ?MOUSE_UNIPROT_XREF .\n    ?RABIT_PROTEIN a orth:Protein .\n    ?RABIT_PROTEIN orth:organism/obo:RO_0002162/up:scientificName 'Oryctolagus cuniculus' .\n    ?RABIT_PROTEIN lscr:xrefUniprot ?RABIT_UNIPROT_XREF.\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003473",
            "question": "Retrieve all genes that are paralogous to ENSG00000244734 Ensembl gene (identifier).",
            "SPARQL": "PREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT ?protein2 ?OMA_LINK\nWHERE {\n    # The three that contains paralogs. The leafs are proteins.\n    # This graph pattern defines the relationship protein1 is paralogous to protein2\n    ?cluster a orth:ParalogsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein2 .\n    ?node1 orth:hasHomologousMember* ?protein1 .\n\n    # Specify the protein to look for its paralogs\n    ?protein1 sio:SIO_010079/lscr:xrefEnsemblGene ensembl:ENSG00000244734 .\n\n    # The OMA link to the second protein\n    ?protein2 rdfs:seeAlso ?OMA_LINK .\n\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003474",
            "question": "Retrieve pairwise orthologous genes of the Cyanobacterium-aponinum psb27- gene that are found in the MBGD database but are not present in OMA",
            "SPARQL": "PREFIX oma: <http://omabrowser.org/ontology/oma#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX mbgd: <http://purl.jp/bio/11/mbgd#>\n\nSELECT ?protein2 ?species WHERE {\n  SERVICE <http://sparql.nibb.ac.jp/sparql> {\n    SELECT ?protein2 ?species WHERE {\n      ?cluster_mbgd a orth:OrthologsCluster ;\n          orth:hasHomologous ?node1_mbgd ;\n        orth:hasHomologous ?node2_mbgd .\n      ?node1_mbgd orth:hasHomologous* ?gene1 .\n      ?node2_mbgd orth:hasHomologous* ?gene2 .\n      ?gene1 mbgd:uniprot <http://purl.uniprot.org/uniprot/K9Z723> .\n      ?gene2 mbgd:uniprot ?protein2 ;\n        mbgd:organism ?taxon .\n      OPTIONAL {\n        ?taxon mbgd:species ?species .\n      }\n      FILTER (?node1_mbgd != ?node2_mbgd)\n    }\n  }\n  FILTER NOT EXISTS { # keep only those that do not exist in OMA\n    ?cluster a orth:OrthologsCluster ;\n      orth:hasHomologousMember ?node1 ;\n      orth:hasHomologousMember ?node2 .\n    ?node1 orth:hasHomologousMember* ?protein_OMA_1.\n    ?node2 orth:hasHomologousMember* ?protein_OMA_2.\n    ?protein_OMA_1 lscr:xrefUniprot <http://purl.uniprot.org/uniprot/K9Z723>.\n    ?protein_OMA_2 lscr:xrefUniprot ?protein2.\n    FILTER (?node1 != ?node2)\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003475",
            "question": "Retrieve all genes that are paralogous to HUMAN00529 OMA protein (identifier) and their cross-reference links to OMA and Uniprot.",
            "SPARQL": "PREFIX dc: <http://purl.org/dc/terms/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\n\nSELECT ?protein2 ?Uniprot_link\nWHERE {\n    ?cluster a orth:ParalogsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein2 .\n    ?node1 orth:hasHomologousMember* ?protein1 .\n    ?protein1 a orth:Protein ;\n        dc:identifier 'HUMAN00529'.\n    ?protein2 a orth:Protein ;\n        lscr:xrefUniprot ?Uniprot_link .\n    filter(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003476",
            "question": "Retrieve all orthologs between mouse and rabbit, together with their HOG id",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?MOUSE_PROTEIN ?RABIT_PROTEIN ?HOG\nWHERE {\n    ?HOG a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?RABIT_PROTEIN .\n    ?node1 orth:hasHomologousMember* ?MOUSE_PROTEIN .\n    ?MOUSE_PROTEIN a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName 'Mus musculus' .\n    ?RABIT_PROTEIN a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName 'Oryctolagus cuniculus' .\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003477",
            "question": "Retrieve all proteins in OMA that is encoded by the INS gene and their mnemonics and evidence types from Uniprot database (federated query).",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?proteinOMA ?species ?mnemonic ?evidenceType ?UniProt_URI\nWHERE {\n    ?proteinOMA a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName ?species ;\n        rdfs:label 'INS' .\n    ?proteinOMA lscr:xrefUniprot ?UniProt_URI .\n    # Search the INS gene mnemonics and evidence types from Uniprot database\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?UniProt_URI up:mnemonic ?mnemonic ;\n            up:existence/rdfs:label ?evidenceType.\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003478",
            "question": "The percentage of proteins in Drosophila melanogaster that has at least one paralogous sequence (protein).",
            "SPARQL": "PREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT (((xsd:float(?num_paralogy)*100)/xsd:float(?total)) as ?result)\nWHERE {\n    {\n        SELECT (count(distinct ?PROTEIN) as ?num_paralogy )\n        WHERE {\n            ?cluster a orth:ParalogsCluster.\n            ?cluster orth:hasHomologousMember ?node1.\n            ?cluster orth:hasHomologousMember ?node2.\n            ?node2 orth:hasHomologousMember* ?PROTEIN.\n            ?node1 orth:hasHomologousMember* ?IS_PARALOGOUS_TO_PROTEIN.\n            ?PROTEIN a orth:Protein.\n            ?PROTEIN orth:organism/obo:RO_0002162/up:scientificName ?species.\n            ?IS_PARALOGOUS_TO_PROTEIN a orth:Protein.\n            ?IS_PARALOGOUS_TO_PROTEIN orth:organism/obo:RO_0002162/up:scientificName ?species .\n            values(?species ){( 'Drosophila melanogaster' )}\n            filter(?node1 != ?node2)\n        }\n    }\n    {\n        SELECT (count(distinct ?protein_total) as ?total)\n            WHERE {\n               ?protein_total a orth:Protein .\n               ?protein_total orth:organism/obo:RO_0002162/up:scientificName ?species .\n               values(?species ){( 'Drosophila melanogaster' )}\n            }\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003479",
            "question": "Retrieve all human proteins that are paralogous to the HBB gene and their UniProt cross-references.",
            "SPARQL": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?PROTEIN_HBB ?IS_PARALOGOUS_TO_PROTEIN ?PARALOG_GENE_LABEL ?HBB_UNIPROT_XREF ?PARALOG_UNIPROT_XREF\nWHERE {\n    ?cluster a orth:OrthologsCluster ;\n        orth:hasHomologousMember ?node1 ;\n        orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?PROTEIN_HBB .\n    ?node1 orth:hasHomologousMember* ?IS_PARALOGOUS_TO_PROTEIN .\n    ?PROTEIN_HBB a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName 'Homo sapiens' ;\n        rdfs:label 'HBB';\n        lscr:xrefUniprot ?HBB_UNIPROT_XREF .\n    ?IS_PARALOGOUS_TO_PROTEIN a orth:Protein ;\n        orth:organism/obo:RO_0002162/up:scientificName 'Homo sapiens' ;\n        lscr:xrefUniprot ?PARALOG_UNIPROT_XREF ;\n        rdfs:label ?PARALOG_GENE_LABEL .\n    FILTER(?node1 != ?node2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.omabrowser.org/sparql/",
            "fetchUrl": "https://sparql.omabrowser.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000106"
            ]
        },
        {
            "id": "Q00003480",
            "question": "Proteins associated with a disease but without a disease-causing amino-acid substitution variant",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n {\n\t ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n\t ?kw :termType \"Disease\"^^xsd:string\n\t filter (?kw != nextprot_cv:KW-0656)\n }\n filter ( not exists { ?entry :isoform / :variant / :disease ?_ . } )\n filter ( not exists {\n\t?entry :isoform / :proteoform ?pf.\n\t?pf :difference / :evidence / :negative false. # positive evidence only\n\t?pf :diseaseRelatedVariant / :term nextprot_cv:ME_0000013 . # cause of disease\n } )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003481",
            "question": "Proteins with one SH2 and two SH3 domains",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n #with 1 SH3\n {select ?iso where{?iso :region ?stat1. ?stat1 :term nextprot_cv:DO-00614\n } group by ?iso having(count( ?stat1)=1)}\n #with 2 SH2\n {select ?iso where{?iso :region ?stat2. ?stat2 :term nextprot_cv:DO-00615\n } group by ?iso having(count( ?stat2)=2)}\n} group by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003482",
            "question": "Proteins with from 2 to 4 transmembrane regions",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :topology ?statement.\n ?statement a :TransmembraneRegion.\n} group by ?entry ?iso having(count( ?statement)>=2 && count( ?statement)<=4)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003483",
            "question": "Phosphorylation sites from PeptideAtlas Phosphoproteome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT (sample(?iso) as ?isospl) (sample(?pos) as ?posspl) WHERE {\n ?entry :isoform ?iso .\n ?iso :ptm ?ptm.\n ?ptm :entryAnnotationId ?ptmid; :start ?pos .\n ?ptm :evidence / :assignedBy source:PeptideAtlas_human_phosphoproteome .\n}\ngroup by ?ptmid\norder by ?isospl ?posspl",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003484",
            "question": "Variants with normal \"ubiquitin-protein transferase activity\" and decreased or increased binding to UBE2D1 (example: BRCA1-p.Ile89Thr)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT distinct ?pfname ?impact_on_ubi_trsfrt_activity ?impact_on_binding_UBE2D1 WHERE {\n values (?ubi_trsfrt_activity ?no_impact ?UBE2D1 ?impact) \n { (nextprot_cv:GO_0004842 nextprot_cv:ME_0000003 nextprot:NX_P51668 nextprot_cv:ME_0000002) }\n ?pf a :Proteoform .\n ?pf rdfs:label ?pfname .\n ?pf :phenotypicVariation ?pv1 .\n ?pv1 :impactedObject / :term ?ubi_trsfrt_activity .\n ?pv1 :term ?no_impact .\n ?no_impact rdfs:label ?impact_on_ubi_trsfrt_activity .\n ?pf :phenotypicVariation ?pv2 .\n ?pv2 :impactedObject / :interactant ?UBE2D1 .\n ?pv2 :term ?sub_impact .\n ?sub_impact :childOf ?impact .\n ?sub_impact rdfs:label ?impact_on_binding_UBE2D1 .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003485",
            "question": "BRCA1 variants with at least 5 different Severe phenotypes",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT \n?pfname \n(count(?pvlabel) as ?severe_count) \n(group_concat(?pvlabel;separator=\", and \") as ?severe_list) \nWHERE {\n nextprot:NX_P38398 :isoform / :proteoform ?pf .\n ?pf rdfs:label ?pfname .\n ?pf :phenotypicVariation ?pv1 .\n ?pv1 rdfs:comment ?pvlabel .\n ?pv1 :evidence / :severity :Severe . \n }\ngroup by ?pfname having (count(?pvlabel)>=5)\norder by desc(count(?pvlabel)) ?pfname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003486",
            "question": "Proteins associated with an incomplete EC number, no function annotated and high expression in liver",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?isox.\n ?isox :enzymeClassification / :term / rdfs:label ?eclabel.\n filter regex(?eclabel, '-'^^xsd:string) # incomplete EC number\n ?isox :highExpression /:term /:childOf nextprot_cv:TS-0564. # highly expressed in liver\n {\n ?isox :functionInfo / rdfs:comment ?functext .\n filter(strstarts(?functext,\"Probable\") || strstarts(?functext,\"Putative\"))\n }\n UNION\n {\n filter not exists {?isox :functionInfo ?_ } # entries with no function at all\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003487",
            "question": "Proteins with a mature chain of from 300 to 400 residues",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :matureProtein [ :start ?mstart ; :end ?mend].\n filter (?mend-?mstart > 0). # chain fully defined\n bind(?mend - ?mstart as ?mlen)\n filter(?mlen >= 300 && ?mlen <= 400)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003488",
            "question": "Proteins with a PDZ domain that interact with at least one protein which is expressed in brain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :region / :term nextprot_cv:DO-00477. #PDZ domain\n ?iso :binaryInteraction/:interactant/:isoform?/:detectedExpression/:term/:childOf nextprot_cv:TS-0095 #brain\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003489",
            "question": "Proteins phosphorylated and located in the cytoplasm",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?cytoloc {nextprot_cv:SL-0086 nextprot_cv:GO_0005737} # SL and GO values for cytoplasm\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0597. # Phosphorylated\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?cytoloc.\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n}\n\n# Assign values to the variable ?cytoloc\n# The values correspond to the two controlled vocabulary (cv) terms for cytoplam:\n# SL-0086 is the UniProt subcellular location term\n# GO_0005737 is the Gene Ontology cellular component term\n#\n# Use the same name of the variable (?iso and ?loc) in several statements.\n# It is the name of the variable that enforces the constraints.\n#\n# Phosphorylated proteins are retrieved using a keyword:\n# KW-0597 is the UniProt keyword for phosphorylated\n#\n# Use :childOf to include children of a term.\n# Cytosol (SL-0091), the child term of cytoplasm, will thus be included.\n#\n# Exclude negative locatization evidences.\n# This enforces that the protein is located in the cytoplasm.",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003490",
            "question": "Proteins anchored to the membrane via a GPI-anchor",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :lipidationSite / rdfs:comment ?mod.\n filter(contains(?mod,\"GPI-anchor\")).\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003491",
            "question": "Proteins larger than 1000 amino acids that are located in the nucleus and expressed in the nervous system",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?nucloc {nextprot_cv:GO_0005634 nextprot_cv:SL-0191} # GO and SL values for nucleus\n\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term/:childOf ?nucloc.\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n ?iso :detectedExpression/:term/:childOf nextprot_cv:TS-1313.\n ?iso :sequence/:length ?len.\n filter (?len>1000)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003492",
            "question": "Proteins with 7 transmembrane regions",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :topology ?statement.\n ?statement a :TransmembraneRegion.\n} group by ?entry ?iso having(count( ?statement)=7)\n\n# 'a' can also be used instead of 'rdf:type'\n# 'a' is a synonym of 'rdf:type'\n#\n# Apply the grouping criterion (group by) for the results.\n# This groups entries with isoforms having 7 transmembrane regions.\n# Apply the aggregate function (count) to the variable ?statement.\n# This counts the number of transmembrane region statements for each isoform.",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003493",
            "question": "Proteins that are located in both the nucleus and in the cytoplasm",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?cytoloc {nextprot_cv:GO_0005737 nextprot_cv:SL-0086} # GO and SL values for cytoplasm\n values ?nucloc {nextprot_cv:GO_0005634 nextprot_cv:SL-0191} # GO and SL values for nucleus\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc1, ?loc2 .\n ?loc1 :term /:childOf ?cytoloc .\n ?loc2 :term /:childOf ?nucloc .\n filter not exists {?loc1 :negativeEvidence ?negev} # No negative localization evidence\n filter not exists {?loc2 :negativeEvidence ?negev} # No negative localization evidence\n}\n\n# Note the dot \".\" at the end of statements.\n# If missing, you will get a syntax error.\n#\n# Use a comma to retrieve two localizations in:\n# ?iso :cellularComponent ?loc1, ?loc2 .",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003494",
            "question": "Proteins with a mature chain of less than 1000 amino acids which are secreted and do not contain cysteines in the mature chain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?sloc {nextprot_cv:GO_0005576 nextprot_cv:SL-0243} # GO and SL values for secreted\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?anno .\n ?anno :term /:childOf ?sloc .\n filter not exists { ?anno :negativeEvidence ?_ }\n #\n # filter not exists {?iso :cellularComponent /:term nextprot_cv:GO_0070062 .\n # filter not exists {?iso :cellularComponent /:term /:childOf nextprot_cv:SL-0243 .}\n # }\n # you can uncomment this to filters out extracellular exosome only location (2240 entries),\n # most of them evidenced only by large-scale proteomic analysis\n #\n ?iso :sequence / :chain ?seq.\n ?iso :matureProtein [ :start ?mstart ; :end ?mend]\n filter ((?mend-?mstart > 0) && (?mend-?mstart < 1000))\n bind (?mend - ?mstart + 1 as ?mlen)\n bind (substr(?seq, ?mstart, ?mlen) as ?mseq)\n filter (!regex (?mseq,'C'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003495",
            "question": "Proteins that interact with protein RBM17 and that are involved in splicing",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n nextprot:NX_Q96I25 :isoform / :interaction / :interactant ?entry.\n ?entry :isoform / :uniprotKeyword / :term nextprot_cv:KW-0508\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003496",
            "question": "Proteins whose genes are on chromosome 13 and are associated with a disease",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :chromosome \"13\"^^xsd:string.\n ?entry :isoform ?iso.\n {\n\t ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n\t ?kw :termType \"Disease\"^^xsd:string\n\t filter (?kw != nextprot_cv:KW-0656)\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003497",
            "question": "Proteins with protein existence \"At transcript level\" (PE=2) or \"Inferred from homology\" (PE=3) or \"Predicted\" (PE=4)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?level {\n#\t:Evidence_at_protein_level # PE=1\n :Evidence_at_transcript_level # PE=2\n :Inferred_from_homology # PE=3\n :Predicted # PE=4\n#\t:Uncertain # PE=5\n }\n ?entry a :Entry .\n ?entry :existence ?level .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003498",
            "question": "Proteins that are lipoproteins",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0449.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003499",
            "question": "Proteins with cross-references to InterPro",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry ?iprac WHERE {\n ?entry :reference ?ref.\n ?ref :provenance db:InterPro.\n ?ref :accession ?iprac}\norder by ?entry ?iprac",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003500",
            "question": "Proteins associated with diseases that are associated with cardiovascular aspects",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform /:medical / :term /:related / :childOf nextprot_cv:D002318.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003501",
            "question": "Proteins that have a protein kinase domain but lack protein kinase activity",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :region /:term nextprot_cv:DO-00529.\n filter not exists { ?iso :enzymeClassification / :term /:childOf nextprot_cv:2_7_-_- }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003502",
            "question": "Proteins located in mitochondrion and that lack a transit peptide",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739 } # SL and GO values for mitochondrion\n ?entry :isoform ?iso.\n filter not exists { ?iso :uniprotKeyword /:term nextprot_cv:KW-0809 } # Transit peptide\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?mitoloc.\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n}\n\n# Variables start with ? and can be given any name.\n# Variables such as ?entry and ?mitoloc (location in the mitochondrion) are easily understood by humans.",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003503",
            "question": "Proteins that are expressed in liver and involved in transport",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :detectedExpression/:term/:childOf nextprot_cv:TS-0564.\n nextprot_cv:KW-0813 :related ?tra.\n ?iso :generalAnnotation / :term ?tra.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003504",
            "question": "Proteins with a mutagenesis in a position that correspond to an annotated active site",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :mutagenesis /:start ?mutaPos.\n ?iso :activeSite /:start ?actsitePos.\n filter (?mutaPos=?actsitePos)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003505",
            "question": "Proteins with at least one selenocysteine in their sequence",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform/:selenocysteine ?statement.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003506",
            "question": "Proteins that are glycosylated and are not located in the membrane",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0325.\n filter not exists { ?iso :uniprotKeyword / :term nextprot_cv:KW-0812.} # KW for Transmembrane\n filter not exists { ?iso :topology / :term nextprot_cv:CVTO_0004 } # intramembrane segment\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003507",
            "question": "Proteins expressed in brain with observed IHC expression \"high\" but not expressed in testis",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n # get all expression\n ?iso :expression ?e1.\n # highly expressed in brain\n ?e1 :term/:childOf nextprot_cv:TS-0095;:evidence/:observedExpression :High.\n # not expressed in testis\n ?iso :undetectedExpression ?e2.\n ?e2 :term nextprot_cv:TS-1030.\n# Use the semicolon ';' to refer to the previous subject (?e1)\n# Only IHC data has observed expression \"High\" so ECO is not specified.\n#\n# Note that we also exclude expression detected in testis.\n filter not exists { ?iso :detectedExpression / :term / :childOf nextprot_cv:TS-1030 }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003508",
            "question": "Proteins that have at least one RRM RNA-binding domain and either no GO \"RNA binding\" or a GO \"RNA binding\" with evidence cv:ECO_0000501 or cv:ECO_0000250",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n {\n ?entry :isoform ?iso.\n # >=1 RRM RNA-binding domain\n ?iso :region/:term nextprot_cv:DO-00581.\n # No GO \"RNA binding\"\n filter not exists {\n ?iso :function/:term /:childOf nextprot_cv:GO_0003723\n }\n }\n union{\n ?entry :isoform ?iso.\n # >=1 RRM RNA-binding domain\n ?iso :region/:term nextprot_cv:DO-00581.\n # GO \"RNA binding\" with evidence IEA or ISS\n ?iso :function ?s1.\n ?s1 :term /:childOf nextprot_cv:GO_0003723.\n filter not exists { ?s1 :negativeEvidence ?negev. } # No negative function evidence\n ?s1 :evidence /:evidenceCode /:childOf ?pcode.\n values ?pcode { nextprot_cv:ECO_0000501 nextprot_cv:ECO_0000250 }\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003509",
            "question": "Proteins which are expressed in liver according to IHC data but not found in HUPO liver proteome set",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform /:expression ?s1.\n ?s1 :evidence ?evi;:term/:childOf nextprot_cv:TS-0564. #Liver\n ?evi :evidenceCode nextprot_cv:ECO_0001055; :observedExpression ?level .\n filter (?level not in (:Negative))\n filter not exists { ?entry :isoform / :peptideMapping / :evidence / :assignedBy source:PeptideAtlas_human_Liver . }\n filter not exists { ?entry :isoform / :peptideMapping / :evidence / :assignedBy source:MassIVE_human_Liver . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003510",
            "question": "Glycosylation sites from GlyConnect",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry ?iso ?pos ?comment WHERE {\n?entry :isoform ?iso.\n?iso :swissprotDisplayed true .\n?iso :glycosylationSite ?glyco.\n?glyco :evidence / :assignedBy source:GlyConnect.\n?glyco rdfs:comment ?comment.\n?glyco :start ?pos.\n\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003511",
            "question": "PE1 entries that comply with HPP guidelines (at least 2 non overlapping peptides of at least 9aa from a single data source)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :existence :Evidence_at_protein_level .\n ?entry :isoform / :uniprotKeyword / :term nextprot_cv:KW-1267.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003512",
            "question": "Proteins with at least one sequence variant",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :variant ?var.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003513",
            "question": "Proteins that do not have a cross-reference to an Ensembl ENSG",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry a :Entry.\n filter not exists { ?entry :reference / :provenance db:Ensembl . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003514",
            "question": "Proteins with protein existence \"At protein level\" (PE=1) that have no function annotated, are highly expressed in brain and have homologs in Drosophila melanogaster according to OrthoDB",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nselect ?entry (str(?name) as ?human_name) (group_concat(distinct str(?fly_name); SEPARATOR = \",\") as ?fly_names) where\n{\n?entry :isoform ?iso.\n?entry :gene / :recommendedName / rdfs:label ?name.\n?entry :existence :Evidence_at_protein_level .\nfilter not exists { ?iso :functionInfo ?_. }\nfilter not exists { ?iso :catalyticActivity ?_ .}\nfilter not exists { ?iso :transportActivity ?_ .}\nfilter not exists { ?iso :pathway ?_. }\nfilter not exists { ?iso :function / :term ?fterm . filter(?fterm != nextprot_cv:GO_0005524 && ?fterm != nextprot_cv:GO_0000287 && ?fterm != nextprot_cv:GO_0005515 && ?fterm != nextprot_cv:GO_0042802 && ?fterm != nextprot_cv:GO_0008270 && ?fterm != nextprot_cv:GO_0051260 && ?fterm != nextprot_cv:GO_0005509 && ?fterm != nextprot_cv:GO_0003676 && ?fterm != nextprot_cv:GO_0003824 && ?fterm != nextprot_cv:GO_0007165 && ?fterm != nextprot_cv:GO_0035556 && ?fterm != nextprot_cv:GO_0046914 && ?fterm != nextprot_cv:GO_0046872)}\n?iso :expression ?e1.\n?e1 :term/:childOf nextprot_cv:TS-0095;:evidence/:observedExpression :High.\n{\nSERVICE <http://sparql.orthodb.org/sparql>\n{?gene rdfs:seeAlso ?entry; orthodb:memberOf ?og.\n?og orthodb:ogBuiltAt [up:scientificName ?clade]\n; orthodb:hasMember ?ortholog.\n?ortholog orthodb:name ?fly_name; up:organism/a/up:scientificName 'Drosophila melanogaster'.\nfilter (?clade='Metazoa') }\n}\n} group by ?entry ?name",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003515",
            "question": "Proteins with high-frequency missense variants involved in bacterial infection, with dbSNP identifiers and position on the canonical isoform",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX so: <http://purl.obolibrary.org/obo/SO_>\n\nSELECT DISTINCT ?entry ?umlsTerm (str(?snpac) as ?varid) ?pos (str(?orgaa) as ?orgAA) (str(?varaa) as ?varAA) WHERE {\n SERVICE <http://rdf.disgenet.org/sparql/> {\n SELECT DISTINCT ?protein ?variantTitle ?umlsTerm\n WHERE {\n ?vda sio:SIO_000628 ?umls, ?variant .\n ?umls dcterms:title ?umlsTerm ; skos:exactMatch ?doid .\n ?doid rdfs:subClassOf+ <http://purl.obolibrary.org/obo/DOID_104> . # DO id for bacterial infection\n ?variant a so:0001583 ; dcterms:title ?variantTitle . # Missense variant\n ?variant so:associated_with ?gene .\n ?variant sio:SIO_000223 ?altAl .\n ?altAl rdf:type <http://purl.obolibrary.org/obo/GENO_0000476>; sio:SIO_000900 ?altAlFreq .\n ?altAlFreq a sio:SIO_001367; sio:SIO_000300 ?altAlFreqVal .\n filter(?altAlFreqVal > 0.01) # freq > 1%\n ?gene a ncit:C16612; sio:SIO_010078 ?protein .\n }\n }\n\n BIND(IRI(replace(str(?protein),\"purl\",\"www\")) AS ?unipage) .\n ?entry :swissprotPage ?unipage .\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true .\n ?iso :variant ?var .\n ?var :evidence /:reference ?xref .\n ?xref :provenance db:dbSNP; :accession ?snpac .\n ?var :start ?pos ; :original ?orgaa; :variation ?varaa .\n filter(contains(?snpac,str(?variantTitle))) # matches the exact same variant Disgenet returned\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003516",
            "question": "Variants with phenotype annotation that map to a 3D structure",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?pfname) as ?phenovar) (concat(str(sample(?pdbac)),\"...\") as ?pdbsample) WHERE {\n ?entry :gene / :name / rdfs:label ?gen .\n ?entry :isoform ?iso.\n ?iso :proteoform ?pf .\n ?pf rdfs:label ?pfname .\n ?pf :phenotypicVariation ?pv1 .\n ?pf :difference ?pfmod .\n ?pfmod a :Variant .\n ?pfmod :start ?vstart; :end ?vend .\n ?iso :pdbMapping ?pdbmap.\n ?pdbmap rdfs:comment ?pdbac.\n ?pdbmap :start ?pdbstart ; :end ?pdbend.\n filter(?pdbstart <= ?vstart && ?pdbend >= ?vend )\n} group by ?entry ?pfname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003517",
            "question": "Protein that have a signal sequence which is not cleaved",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :signalPeptide / rdfs:comment ?comment .\n filter(contains(?comment,\"Not cleaved\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003518",
            "question": "Proteins which are located in mitochondrion and have at least one HPA antibody and exist in at least one proteome identification sets",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739} # SL and GO values for mitochondrion\n\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?mitoloc .\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n ?iso :antibodyMapping ?abmap.\n ?iso :peptideMapping ?pepmap.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003519",
            "question": "Proteins which have at least one zinc finger of any subtype",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :zincFingerRegion ?_.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003520",
            "question": "Proteins with at least one variant of the type \"C->X\" (Cys to anything else) that are linked to one or more diseases",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n {\n\t?entry :isoform ?iso.\n\t?iso :variant ?var.\n\t?var :disease ?_.\n\t?var :original \"C\"^^xsd:string.\n } UNION {\n ?entry :isoform ?iso .\n\t?iso :proteoform ?pf.\n\t?pf :difference ?var.\n\t?var :evidence / :negative false. # positive evidence\n\t?pf :diseaseRelatedVariant / :term nextprot_cv:ME_0000013 . # cause of disease\n\t?var :original \"C\"^^xsd:string.\n\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003521",
            "question": "Proteins belonging to a family with at least two members in the human proteome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :familyName / :term ?ac.\n ?member :familyName / :term ?ac.\n} group by ?entry having (count(distinct ?member) >= 2 )",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003522",
            "question": "Proteins which have one or more negatively charged residue in a transmembrane domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :transmembraneRegion ?tm.\n ?tm :start ?tmstart ; :end ?tmend.\n ?iso :sequence /:chain ?chain.\n bind (substr(?chain, ?tmstart, ?tmend - ?tmstart + 1) as ?tmseq)\n filter (regex(?tmseq, '([DE]+.*[^DE]){1,}')) # Change the 1 for the number of acidic residues required (5 seems to be the max)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003523",
            "question": "Diseases/phenotypes associated with coding variants and associated publications for a given gene",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX so: <http://purl.obolibrary.org/obo/SO_>\n\nSELECT DISTINCT ?entry (str(?umlsTerm) as ?umlsTermSTR) (str(?snpac) as ?varid) ?pos (str(?orgaa) as ?orgAA) (str(?varaa) as ?varAA) ?article WHERE {\n SERVICE <http://rdf.disgenet.org/sparql/> {\n ?vda sio:SIO_000628 ?umls, ?variant .\n ?vda sio:SIO_000772 ?article .\n ?umls dcterms:title ?umlsTerm.\n {?umls a sio:SIO_010299 .} # disease\n union\n {?umls a sio:SIO_010056 .} # or phenotype\n ?variant a so:0001583 ; dcterms:title ?variantTitle . # Missense variant\n ?variant so:associated_with ?gene .\n ?gene a ncit:C16612; sio:SIO_010078 ?protein .\n ?gene sio:SIO_000205 ?gname.\n filter(contains(str(?gname),\"HBB\")) # Hemoglobin gene (NX_P68871)\n }\n\n BIND(IRI(replace(str(?protein),\"purl\",\"www\")) AS ?unipage) .\n ?entry :swissprotPage ?unipage .\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true .\n ?iso :variant ?var .\n ?var :evidence /:reference ?xref .\n ?xref :provenance db:dbSNP; :accession ?snpac .\n ?var :start ?pos ; :original ?orgaa; :variation ?varaa .\n filter(contains(?snpac,str(?variantTitle))) # matches the exact same variant Disgenet returned\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003524",
            "question": "KEGG and Reactome pathway names",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?src (str(?pathwayname) as ?pw) WHERE {\n ?entry :isoform / :pathway ?pathannot .\n ?pathannot rdfs:comment ?pathwayname; :evidence / :assignedBy ?src.\n filter(?src = source:Reactome || ?src = source:KEGG_PTW)\n} order by ?pathwayname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003525",
            "question": "PE1 entries that do not comply with HPP guidelines (at least 2 non overlapping peptides of at least 9aa from a single data source)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :existence :Evidence_at_protein_level .\n ?entry :isoform ?iso.\n filter not exists { ?iso :uniprotKeyword / :term nextprot_cv:KW-1267.}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003526",
            "question": "Proteins whose gene is annotated to be induced by interferons",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :induction /rdfs:comment ?comment.\n filter(regex (?comment,'IFN|interferon',\"i\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003527",
            "question": "Biological Process and Molecular Function GO terms related to UniPathway metabolic pathways",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT (str(?pathwayname) as ?unipathway) ?related (str(?pathlabel) as ?GO_BP) (str(?pathlabel2) as ?GO_MF) WHERE {\n ?entry :isoform ?iso.\n ?iso :pathway ?pathannot .\n ?pathannot :term ?pathterm; rdfs:comment ?pathwayname.\n ?pathterm :related ?related .\n {?related a :GoBiologicalProcessCv ; rdfs:label ?pathlabel .}\n UNION\n {?related a :GoMolecularFunctionCv ; rdfs:label ?pathlabel2 .}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003528",
            "question": "Proteins which have at least one 3D structure that spans the complete sequence of the mature protein",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :pdbMapping ?pdbmap.\n ?pdbmap :start ?pdbstart ; :end ?pdbend.\n ?iso :matureProtein [ :start ?mstart ; :end ?mend]\n filter (?mend-?mstart > 0)\n filter ((?pdbstart <= ?mstart) && (?pdbend >= ?mend))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003529",
            "question": "Proteins which have been detected in the HUPO liver proteome set but not the HUPO plasma proteome set",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry WHERE {\nvalues ?pepsources {\n source:PeptideAtlas_human_Liver\n source:MassIVE_human_Liver\n }\n ?entry a :Entry.\n ?entry :isoform / :peptideMapping / :evidence / :assignedBy ?pepsources .\n filter not exists { ?entry :isoform / :peptideMapping / :evidence / :assignedBy source:PeptideAtlas_human_Blood_Plasma . }\n filter not exists { ?entry :isoform / :peptideMapping / :evidence / :assignedBy source:MassIVE_human_Blood_Plasma . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003530",
            "question": "Proteins with at least one variant of the types \"A->R\" or \"R->A\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform/:variant ?statement.\n {?statement :original \"A\"^^xsd:string;:variation \"R\"^^xsd:string}\n UNION\n {?statement :original \"R\"^^xsd:string;:variation \"A\"^^xsd:string}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003531",
            "question": "Proteins that have more than one catalytic activity",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :enzymeClassification / :term ?ec .\n}\ngroup by ?entry having (count(distinct ?ec)>1)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003532",
            "question": "Proteins that are glycosylated and phosphorylated on an extracellular topological domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :topologicalDomain ?topodom.\n ?topodom :term nextprot_cv:CVTO_0002.\n ?topodom :start ?topostart ; :end ?topoend.\n ?iso :positionalAnnotation ?annot,?annot2.\n ?annot a :ModifiedResidue.\n ?annot :term ?ptmtype.\n filter (?ptmtype in (nextprot_cv:PTM-0253, nextprot_cv:PTM-0254, nextprot_cv:PTM-0255))\n ?annot2 a :GlycosylationSite.\n ?annot :start ?ptmpos.\n ?annot2 :start ?glypos.\n filter ((?ptmpos >= ?topostart) && (?ptmpos <= ?topoend))\n filter ((?glypos >= ?topostart) && (?glypos <= ?topoend))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003533",
            "question": "Proteins binding estradiol and/or similar molecules (similarity search with SMILES), and their associated GO_MF terms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n\nSELECT distinct ?entry (group_concat(distinct str(?gomflab); SEPARATOR = \",\") as ?gomfx) WHERE {\n \t\tSERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n \t\tSERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/cco> {\n \t\t?compound sachem:similarCompoundSearch [ sachem:query \"CC12CCC3C(C1CCC2O)CCC4=C3C=CC(=C4)O\" ] . # smiles chain for estradiol\n\t\t }\n\t\t \t\t?ACTIVITY rdf:type cco:Activity;\n\t\tcco:hasMolecule ?compound;\n cco:hasAssay ?ASSAY.\n\t\t ?ASSAY cco:hasTarget ?TARGET.\n\t\t ?TARGET cco:taxonomy <http://identifiers.org/taxonomy/9606> . # human protein target\n\t\t ?TARGET cco:hasTargetComponent ?COMPONENT.\n\t\t ?COMPONENT cco:targetCmptXref ?UNIPROT.\n\t\t filter(contains(str(?UNIPROT),\"uniprot\"))\n\t\t }\n\t?entry skos:exactMatch ?UNIPROT.\n\t?entry :isoform ?iso.\n\t?iso :goMolecularFunction / :term ?gomf .\n\t?gomf rdfs:label ?gomflab .\n} \ngroup by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003534",
            "question": "Recommended isoform names for MSH6",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?iso ?name WHERE {\n nextprot:NX_P52701 :isoform ?iso. # MSH6 entry\n ?iso :recommendedName ?name_entity .\n ?name_entity a :IsoformName; rdfs:label ?name.\n}\norder by asc(?iso)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003535",
            "question": "Proteins with at least one cross-reference to SMR (Swiss Model Repository) but no cross-references to PDB",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry a :Entry.\n ?entry :reference / :provenance db:SMR.\n filter not exists { ?entry :reference / :provenance db:PDB }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003536",
            "question": "Proteins with one transmembrane domain and no annotated topology",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :swissprotDisplayed true .\n ?iso :topology ?tm.\n ?tm a :TransmembraneRegion.\n filter (not exists { ?iso :topology ?topodom.\n ?topodom a :TopologicalDomain.\n })\n} group by ?entry having (count( ?tm)=1)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003537",
            "question": "Protein kinases which are high-confidence drug targets according to CHEMBL",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) WHERE {\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n        SELECT DISTINCT ?protein WHERE {\n            ?target cco:hasTargetComponent ?tarComp .\n            ?target cco:taxonomy <http://identifiers.org/taxonomy/9606> . # human protein target\n            ?tarComp cco:targetCmptXref ?protein .\n            #?protein a cco:UniprotRef .\n            FILTER(contains(str(?protein),\"uniprot\"))\n            ?activity a cco:Activity ; cco:hasMolecule ?drug ; cco:hasAssay ?assay .\n            ?drug cco:hasMechanism / cco:hasTarget ?target . # known drug action mechanism\n            ?assay cco:hasTarget ?target; cco:targetConfScore ?score .\n            FILTER(?score > 8) # high-confidence assay\n        }\n    }\n    ?entry skos:exactMatch ?protein .\n    ?entry :isoform / :uniprotKeyword / :term nextprot_cv:KW-0418. #kinase\n    ?entry :gene / :recommendedName / rdfs:label ?gen.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003538",
            "question": "Proteins with 10 or more gold interactions with SH3 domain-containing proteins",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :interaction ?it.\n ?it :quality :GOLD.\n ?it :interactant ?interactant.\n ?interactant :isoform? / :domain / :term nextprot_cv:DO-00615. # SH3\n}\ngroup by ?entry having (count (distinct ?interactant) >= 10)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003539",
            "question": "Proteins whose gene is on chromosome 21 with at least one disease annotation from Orphanet",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX source: <http://nextprot.org/rdf/source/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?disname) as ?disease) WHERE {\n ?entry :isoform ?iso; :gene / :chromosome \"21\"^^xsd:string .\n ?iso :disease ?medannot .\n ?medannot rdfs:comment ?disname; :evidence / :assignedBy source:Orphanet.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003540",
            "question": "Proteins interacting with small molecules according to DrugBank",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (group_concat(distinct str(?lbl); SEPARATOR = \";\") as ?mol) WHERE {\n ?entry :isoform / :smallMoleculeInteraction / :interactant ?ref .\n ?ref :provenance db:DrugBank.\n ?ref rdfs:label ?lbl.\n}\ngroup by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003541",
            "question": "Proteins binding estradiol and/or similar molecules (substructure search with SMILES) and their associated GO_MF terms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT distinct ?entry (group_concat(distinct str(?gomflab); SEPARATOR = \",\") as ?gomfx) WHERE {\n\tSERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n\t\tSERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/cco> {\n\t\t ?compound sachem:substructureSearch [ sachem:query \"CC12CCC3C(C1CCC2O)CCC4=C3C=CC(=C4)O\" ] . # smiles chain for estradiol\n\t\t}\n\t\t?ACTIVITY rdf:type cco:Activity;\n\t\tcco:hasMolecule ?compound;\n\t\tcco:hasAssay ?ASSAY.\n\t\t?ASSAY cco:hasTarget ?TARGET.\n\t\t?TARGET cco:hasTargetComponent ?COMPONENT.\n\t\t?TARGET cco:taxonomy <http://identifiers.org/taxonomy/9606> . # human protein target\n\t\t?COMPONENT cco:targetCmptXref ?UNIPROT.\n\t\t#?UNIPROT rdf:type cco:UniprotRef.\n\t\tfilter(contains(str(?UNIPROT),\"uniprot\"))\n\t}\n\n\t?entry skos:exactMatch ?UNIPROT.\n\t?entry :isoform ?iso.\n\t?iso :goMolecularFunction / :term ?gomf .\n\t?gomf rdfs:label ?gomflab .\n}\n\nGROUP BY ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003542",
            "question": "Proteins involved in coronaviruses/SARS-CoV-2 pathways with associated medical information",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?gen) AS ?gene) ?pathwayname (str(?discom) AS ?discom1) ?medsource WHERE {\n SERVICE <http://sparql.wikipathways.org/sparql> {\n {?geneProduct a wp:Protein}\n union\n {?geneProduct a wp:GeneProduct}\n\n ?geneProduct rdfs:label ?genraw .\n bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).\n filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching\n\n ?geneProduct dcterms:isPartOf ?pathway .\n ?pathway a wp:Pathway .\n ?pathway wp:organism ?organism .\n filter(contains(str(?organism),\"9606\"))\n\n ?pathway dc:title ?pathwayname .\n filter(regex(?pathwayname,\"sars-cov-2\",\"i\")|| regex(?pathwayname,\"corona\",\"i\") ).\n }\n\n ?entry a :Entry .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n ?entry :isoform ?iso.\n ?iso :medical ?med.\n ?med rdfs:comment ?discom.\n ?med :evidence/:assignedBy ?medsource.\n}\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003543",
            "question": "Proteins which are located on the genome next to a protein which is involved in spermatogenesis",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT (?neighbour as ?entry) (str(?gen) as ?spergen) WHERE {\n {\n SELECT DISTINCT ?chr ?gen ?sperstart (MAX(?ldist) as ?lmin) (MIN(?rdist) as ?rmin) WHERE {\n ?entryx :isoform / :function ?func .\n\t ?func :term / :childOf nextprot_cv:GO_0007283 . # Involvment in spermatogenesis\n\t filter not exists {?func :negativeEvidence ?negev}\n ?entryx :gene ?gene.\n ?gene :begin ?sperstart; :end ?e; :chromosome ?chr; :recommendedName / rdfs:label ?gen.\n ?ngen :chromosome ?chr.\n ?ngen :begin ?n_begin; :end ?n_end .\n filter ( ?n_end > (?sperstart - 1000000) && ?n_begin <= (?sperstart + 1000000) && ?ngen != ?gene)\n bind(?sperstart - ?n_begin as ?dist)\n bind(if(?dist<0,?dist,-1000000) as ?ldist)\n bind(if(?dist>0,?dist,1000000) as ?rdist)\n } group by ?chr ?gen ?sperstart\n }\n bind(?sperstart - ?lmin as ?lchrpos)\n ?lgene :begin ?lchrpos; :chromosome ?chr.\n bind(?sperstart - ?rmin as ?rchrpos)\n ?rgene :begin ?rchrpos; :chromosome ?chr.\n { ?neighbour :gene ?lgene. } # left gene\n\t union\n { ?neighbour :gene ?rgene. } # right gene\n} order by ?gen",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003544",
            "question": "Proteins which are enzymes and that have an incomplete EC number",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform/ :enzymeClassification ?ec.\n ?ec :term / rdfs:label ?eclabel.\n filter regex(?eclabel, '-'^^xsd:string)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003545",
            "question": "Proteins secreted but without a signal sequence",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?sloc {nextprot_cv:GO_0005576 nextprot_cv:SL-0243} # GO and SL values for secreted\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term/:childOf ?sloc .\n filter not exists {?sloc :negativeEvidence ?negev} # No negative localization evidence\n filter not exists {?iso :cellularComponent /:term nextprot_cv:GO_0070062 .\n\t\t\t\t\t filter not exists {?iso :cellularComponent /:term /:childOf nextprot_cv:SL-0243 .}\n\t\t\t\t\t} # filters out extracellular exosome only location (2758 entries)\n filter not exists {?iso :signalPeptide ?_}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003546",
            "question": "Proteins that are cytoplasmic with alternate O-glycosylation or phosphorylation at the same positions",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?cytoloc {nextprot_cv:SL-0086 nextprot_cv:GO_0005737} # SL and GO values for cytoplasm\n\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?cytoloc .\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n ?iso :modifiedResidue /:term ?ptmtype.\n ?iso :modifiedResidue /:start ?ptmpos.\n filter (?ptmtype in (nextprot_cv:PTM-0253, nextprot_cv:PTM-0254, nextprot_cv:PTM-0255))\n ?iso :glycosylationSite /:start ?ptmpos.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003547",
            "question": "Proteins with a cross-reference to CCDS",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :reference / :provenance db:CCDS.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003548",
            "question": "Secreted proteins that have at least one PTM in a position of a variant",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?sloc {nextprot_cv:GO_0005576 nextprot_cv:SL-0243} # GO and SL values for secreted\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true . # restricted to main isoform due to computing time (> 98% of sites)\n ?iso :cellularComponent ?anno .\n ?anno :quality :GOLD; :term /:childOf ?sloc. # secreted\n filter not exists { ?anno :negativeEvidence ?_ }\n # excludes \"extracellular exosome\"-only location, most of them evidenced only by large-scale proteomic analysis\n filter not exists {\n\t ?iso :cellularComponent /:term nextprot_cv:GO_0070062 . # extracellular exosome\n \t filter not exists { ?iso :cellularComponent /:term /:childOf nextprot_cv:SL-0243 .}\n \t}\n ?iso :variant /:start ?varpos.\n ?iso :ptm /:start ?varpos.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003549",
            "question": "Proteins belonging to Rett syndrome pathways, and their subcellular locations (GOLD)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nselect ?entry (str(?gen) AS ?gene) ?pathwayname (group_concat(distinct str(?loclab); SEPARATOR = \",\") as ?locs) WHERE {\n SERVICE <http://sparql.wikipathways.org/sparql> {\n\n {?geneProduct a wp:Protein}\n union\n {?geneProduct a wp:GeneProduct}\n\n ?geneProduct rdfs:label ?genraw .\n bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).\n\n filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching\n ?geneProduct dcterms:isPartOf ?pathway .\n ?pathway a wp:Pathway .\n ?pathway wp:organism ?organism .\n filter(contains(str(?organism),\"9606\"))\n ?pathway dc:title ?pathwayname .\n filter(regex(?pathwayname,\"rett\",\"i\")).\n }\n ?entry a :Entry .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?locannot .\n ?locannot :term ?locterm .\n ?locterm rdfs:label ?loclab .\n ?locannot :evidence ?locev .\n ?locev :quality :GOLD .\n filter not exists {?locannot :negativeEvidence ?locev .}\n}\ngroup by ?entry ?gen ?pathwayname\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003550",
            "question": "Proteins involved in diseases due to intronic variants with one selected publication",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX so: <http://purl.obolibrary.org/obo/SO_>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) ?diseaseTitle ?sampleArticle WHERE {\n SERVICE <http://rdf.disgenet.org/sparql/> {\n SELECT DISTINCT ?protein ?diseaseTitle (sample(?article) as ?sampleArticle) WHERE {\n ?vda sio:SIO_000628 ?variant,?disease .\n\t?vda sio:SIO_000772 ?article .\n ?disease a sio:SIO_010299 ; dcterms:title ?diseaseTitle . # true disease, use ncit:C7057 for traits\n ?variant a so:0001627 ; dcterms:title ?variantTitle . # intron variant\n ?variant so:associated_with ?gene .\n ?gene a ncit:C16612; sio:SIO_010078 ?protein .\n } group by ?protein ?diseaseTitle\n }\n BIND(IRI(replace(str(?protein),\"purl\",\"www\")) AS ?unipage) .\n ?entry :swissprotPage ?unipage .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003551",
            "question": "Proteins located in nucleus and nowhere else",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect ?entry WHERE {\n {\n select ?entry (count(?loc) as ?anyLoc) (sum(?inNucleus) as ?nucleusLoc)\n WHERE {\n ?entry :isoform / :cellularComponent ?loc .\n ?loc :evidence / :negative false .\n ?loc :term ?locterm.\n bind( exists {\n ?locterm :childOf / rdfs:label ?label.\n filter (regex(?label, '^[Nn]ucleus$'))\n } as ?inNucleus)\n }\n group by ?entry\n }\n filter ( ?anyLoc = ?nucleusLoc)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003552",
            "question": "Proteins annotated as glycosylated but with no recorded glycosylation site",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0325.\n filter not exists { ?entry :isoform /:glycosylationSite ?_. }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003553",
            "question": "Proteins with a protein existence not \"At protein level\" (PE=1) and with a HGNC approved gene name that contains \"orf\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :existence ?level.\n filter (?level != :Evidence_at_protein_level).\n ?entry :reference ?r.\n ?r :provenance db:HGNC ; :accession ?ac.\n filter (regex(?ac,'orf')) .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003554",
            "question": "Proteins with protein existence \"At protein level\" (PE=1) and at least one proteotypic peptide",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :peptideMapping ?pm .\n ?entry :existence :Evidence_at_protein_level .\n ?pm :proteotypic true .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003555",
            "question": "Proteins involved in diseases with clinical manifestations that include long organs ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT DISTINCT ?entry (str(?gen) as ?genx) ?umlsTerm WHERE {\n SERVICE <http://rdf.disgenet.org/sparql/> {\n SELECT DISTINCT ?protein ?umlsTerm WHERE {\n ?gda sio:SIO_000628 ?gene,?disease .\n ?disease a sio:SIO_010056 . # traits or phenotypes\n ?disease dcterms:title ?umlsTerm .\n filter(contains(str(?umlsTerm),\"Long \"))\n ?gene a ncit:C16612; sio:SIO_010078 ?protein .\n }\n }\n BIND(IRI(replace(str(?protein),\"purl\",\"www\")) AS ?unipage) .\n ?entry :swissprotPage ?unipage .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003556",
            "question": "Polymorphisms located on ACE2 and TMPRSS2 and affecting proteins’ activity, structure, PTM...",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT (str(?gn) as ?gene) ?pos (str(?snpac) as ?varid) (str(?orgaa) as ?orgAA) ?annot_type (str(?txt) as ?note) (str(?varaa) as ?varAA) ?freq where\n{\n values ?entry {nextprot:NX_Q9BYF1 nextprot:NX_O15393} # proteins of interest (ACE2, TMPRSS2)\n ?entry :gene /:recommendedName / rdfs:label ?gn.\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true; :variant ?var .\n ?var :start ?pos ; :original ?orgaa; :variation ?varaa .\n optional {?var :evidence / :alleleFrequency ?freq .}\n ?var :evidence / :reference ?xref .\n ?iso :positionalAnnotation ?annot .\n optional {?annot rdfs:comment ?txt .}\n ?annot a ?annot_type .\n {\n ?annot :start ?pos; :end ?pos.\n filter not exists {?annot a :Variant. }\n filter not exists {?annot a :SequenceConflict. }\n }\n union\n {\n ?annot a :DisulfideBond.\n {?annot :start ?pos. }\n union\n {?annot :end ?pos. }\n }\n } order by ?entry ?pos",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003557",
            "question": "Retrieve all positional annotations at a given position on a neXtProt isoform",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX isoform: <http://nextprot.org/rdf/isoform/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?iso ?spos ?epos ?annot_type (str(?txt) as ?note) where\n{\n values ?iso { isoform:NX_Q99728-1 }\n values ?poi {107} # position of interest\n\n{\n ?iso :positionalAnnotation ?statement . optional {?statement rdfs:comment ?txt .}\n\n ?statement a ?annot_type .\n ?statement :start ?spos; :end ?epos .\n}\n union\n\n{\n ?iso :proteoform ?pf .\n ?pf :difference ?varmut; :phenotypicVariation ?phvar .\n ?varmut :start ?spos; :end ?epos.\n ?phvar :term ?phtype; :impactedObject /:term /rdfs:label ?ioTermlab .\n ?phvar a ?annot_type .\n ?phtype :childOf nextprot_cv:ME_0000002; rdfs:label ?effect . # children of impact\n bind (concat(CONCAT(?effect,\" \"),?ioTermlab) as ?txt) }\n\n filter((?spos <= ?poi) && (?epos >= ?poi)) # select annotations encompassing the position of interest\n} order by ?spos",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003558",
            "question": "Proteins with no known (annotated) domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry a :Entry.\n filter not exists { ?entry :isoform / :region/rdf:type :Domain}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003559",
            "question": "Proteins with alternative acetylation or Ubl conjugation (SUMO or Ubiquitin) at the same positions",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :crossLink /:start ?ptmpos.\n ?iso :modifiedResidue ?ptm.\n ?ptm :start ?ptmpos.\n ?ptm rdfs:comment ?comment.\n # We use this filter to select acetylations\n filter regex(?comment, \"acetyl\",\"i\")\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003560",
            "question": "Proteins that bind a metal and are secreted",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?sloc {nextprot_cv:GO_0005576 nextprot_cv:SL-0243} # GO and SL values for secreted\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?sloc .\n filter not exists {?sloc :negativeEvidence ?negev} # No negative localization evidence\n #filter not exists {?iso :cellularComponent /:term nextprot_cv:GO_0070062 .\n\t\t\t\t\t #filter not exists {?iso :cellularComponent /:term /:childOf nextprot_cv:SL-0243 .}\n\t\t\t\t\t#} # filters out extracellular exosome only location (2758 entries)\n ?iso :goMolecularFunction / :term /:childOf nextprot_cv:GO_0046872 . # metal-binding\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003561",
            "question": "Proteins with at least one 3D structure and that are located in the mitochondrion and are linked with a disease",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739} # SL and GO values for mitochondrion\n ?entry :isoform ?iso.\n ?iso :pdbMapping ?map.\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?mitoloc . # mitochondrial\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n {\n ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n ?kw :termType \"Disease\"^^xsd:string\n filter (?kw != nextprot_cv:KW-0656)\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003562",
            "question": "Gold binary interactions with other human proteins ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?interactant WHERE {\n ?entry :isoform ?iso.\n ?entry :isoform/:binaryInteraction ?interaction.\n ?interaction :interactant ?interactant; :quality :GOLD.\n filter not exists { ?interactant a :Xref . }\n filter(?interactant != ?entry) # remove self-interacting proteins\n}\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003563",
            "question": "Proteins with associated pathways in WikiPathways",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry ?gen ?pathwayname WHERE {\n SERVICE <http://sparql.wikipathways.org/sparql> {\n\n {?geneProduct a wp:Protein}\n union\n {?geneProduct a wp:GeneProduct}\n\n ?geneProduct rdfs:label ?genraw .\n\t bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).\n filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching\n\n ?geneProduct dcterms:isPartOf ?pathway .\n ?pathway a wp:Pathway .\n ?pathway wp:organism ?organism .\n filter(contains(str(?organism),\"9606\")) # Human proteins\n ?pathway dc:title ?pathwayname .\n }\n ?entry a :Entry .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n}\norder by ?pathwayname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003564",
            "question": "Proteins with no reported mitochondrial localization but interacting with 20 or more mitochondrial proteins ('gold' quality) ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) (count(distinct ?mitopartner) as ?mitcount) (count(distinct ?partner) as ?itcount) WHERE {\nvalues ?mitloc {nextprot_cv:GO_0005739 nextprot_cv:SL-0173} # GO and SL values for mitochondrion\n ?entry :isoform ?iso.\n ?entry :gene / :recommendedName / rdfs:label ?gen.\n filter not exists { ?iso :cellularComponent /:term / :childOf ?mitloc }\n ?iso :binaryInteraction ?it, ?it2.\n ?it :interactant ?mitopartner; :quality :GOLD .\n ?mitopartner :isoform / :cellularComponent ?loc .\n ?loc :quality :GOLD; :term / :childOf ?mitloc .\n ?it2 :interactant ?partner; :quality :GOLD .\n} group by ?entry ?gen ?mitcnt having (count(distinct ?mitopartner) >= 20)\norder by desc(?mitcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003565",
            "question": "PDB structures spanning the complete sequence of the mature protein",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nselect ?entry (group_concat(distinct str(?pdbac); SEPARATOR = \",\") as ?pdbacs) WHERE {\n ?entry :isoform ?iso.\n ?iso :pdbMapping ?pdbmap.\n ?pdbmap :evidence /:reference ?ref.\n ?ref :provenance db:PDB.\n ?ref :accession ?pdbac.\n ?pdbmap :start ?pdbstart ; :end ?pdbend.\n ?iso :matureProtein [ :start ?mstart ; :end ?mend]\n filter (?mend-?mstart > 0)\n filter ((?pdbstart <= ?mstart) && (?pdbend >= ?mend))\n} group by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003566",
            "question": "Proteins whose sequence was updated in 2014",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry a :Entry.\n ?entry :history / :lastSequenceUpdate ?sequpd.\n filter(contains(str(?sequpd),\"2014\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003567",
            "question": "Proteins that potentially interact with Class I PDZ domains (whose C-terminal sequence has a PDZ-binding consensus)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :matureProtein / :end ?mend.\n ?iso :sequence / :chain ?seq.\n filter (strlen(?seq) > 2).\n bind (substr(?seq, ?mend-2, 3) as ?cterseq).\n filter(regex(?cterseq,'[ST].[ILV]')). # short motif consensus for C-terminal PDZ-binding\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003568",
            "question": "Pathways in which SCN1A GOLD interactants are involved",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?pathway WHERE {\n nextprot:NX_P35498 :isoform /:binaryInteraction ?interaction.\n ?interaction :interactant ?entry; :quality :GOLD.\n ?entry a :Entry.\n ?entry :isoform /:pathway /rdfs:comment ?pathway.\n}\norder by asc(?pathway)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003569",
            "question": "Proteins with an interaction mapping encompassing a coiled coil or bZip region ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) ?itlen ?coilen (str(?gen2) as ?partnergene) WHERE {\n ?entry :isoform ?iso; :gene / :recommendedName / rdfs:label ?gen .\n ?iso :swissprotDisplayed true; :interactionMapping ?itmap .\n ?itmap :interactant ?entry2; :start ?its; :end ?ite .\n bind(?ite - ?its + 1 as ?itlen)\n ?entry2 :isoform? ?iso2; :gene / :recommendedName / rdfs:label ?gen2.\n ?iso2 :swissprotDisplayed true.\n {?iso :coiledCoilRegion ?coil . }\n union\n {?iso :region ?coil .\n ?coil :term nextprot_cv:DO-00078 # bzip\n }\n ?coil :start ?cs; :end ?ce .\n bind(?ce - ?cs + 1 as ?coilen)\n filter (?cs >= ?its -15 && ?ce <= ?ite + 15) # overlap\n filter(xsd:float(?itlen) / xsd:float(?coilen) < 2.0) # itlen no more than 2 coilen\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003570",
            "question": "Variants identified in exome datasets with a frequency of >0.1",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?varpos ?freq where\n{\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true .\n ?iso :variant ?var .\n ?var :start ?varpos .\n ?var :evidence ?ev .\n ?ev :alleleNumber ?anb .\n ?ev :alleleFrequency ?freq .\n filter(?freq > 0.1 && ?anb > 100000)\n } order by desc(?freq)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003571",
            "question": "Interaction annotations from SwissProt ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?txt) as ?itinfo) WHERE {\n SELECT DISTINCT ?entry ?txt WHERE {\n ?entry :isoform ?iso.\n ?iso :interactionInfo / rdfs:comment ?txt.\n } order by ?entry\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003572",
            "question": "Proteins with associated cancer pathways in WikiPathways (via Disease Ontology classification)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) ?pathwayname WHERE {\n SERVICE <http://sparql.wikipathways.org/sparql> {\n {?geneProduct a wp:Protein}\n union\n {?geneProduct a wp:GeneProduct}\n ?geneProduct rdfs:label ?genraw .\n bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).\n filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching\n ?geneProduct dcterms:isPartOf ?pathway .\n ?pathway a wp:Pathway .\n ?pathway wp:organism ?organism .\n filter(contains(str(?organism),\"9606\")) # Human proteins\n ?pathway dc:title ?pathwayname .\n ?pathway wp:ontologyTag <http://purl.obolibrary.org/obo/DOID_162> . # Parent id for all cancers\n }\n ?entry a :Entry .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n}\norder by ?pathwayname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003573",
            "question": "Proteins with at least one 3D structure of resolution less than 3 Angstroms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :pdbMapping ?map.\n ?map :resolution ?res_and_unit.\n bind (xsd:float(substr(?res_and_unit,0,strlen(?res_and_unit)-2)) as ?res)\n filter (?res <= 3.0)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003574",
            "question": "Proteins that are located in the mitochondrion with an experimental evidence originating not from HPA or DKFZ-GFP",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739} # SL and GO values for mitochondrion\n\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc.\n ?loc :term /:childOf ?mitoloc.\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n ?loc :evidence /:assignedBy ?src.\n filter ( ?src not in (source:Human_protein_atlas, source:GFP-cDNAEMBL))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003575",
            "question": "Proteins that bind zinc and are not oxidoreductase and not involved in transcription",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0479. # metal-binding\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0862. # zinc\n filter not exists {?iso :uniprotKeyword / :term nextprot_cv:KW-0804} # transcription\n filter not exists {?iso :uniprotKeyword / :term nextprot_cv:KW-0560} # oxidoreductase\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003576",
            "question": "Proteins which are the substrate of protein kinase SYK",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n {\n ?iso :modifiedResidue ?ptm.\n ?ptm :term ?ptmtype.\n ?ptm rdfs:comment ?comment.\n filter (?ptmtype in (nextprot_cv:PTM-0253, nextprot_cv:PTM-0254, nextprot_cv:PTM-0255))\n filter regex(?comment, \"SYK\",\"i\")\n # filter regex(?comment, \"auto\",\"i\")\n }\n union\n {\n ?iso :ptmInfo / rdfs:comment ?ptmtext .\n filter regex(?ptmtext, \"SYK\",\"i\")\n #filter regex(?ptmtext, \"autophos\",\"i\")\n }\n }",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003577",
            "question": "Proteins which have genes of length greater than 2 million bp",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :length ?l.\n filter (?l > 2000000)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003578",
            "question": "Proteins that are annotated with GO \"F\" (function) terms prefixed by \"Not\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :goMolecularFunction ?statement.\n ?statement :negativeEvidence ?ev.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003579",
            "question": "Proteins whose genes are on chromosome 21 that have \"gold\" variants not associated with a disease",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :chromosome \"21\"^^xsd:string; :isoform / :variant ?variant.\n ?variant :evidence / :quality :GOLD.\n filter not exists { ?variant :disease ?disease. }\n filter ( not exists {\n\t?entry :isoform / :proteoform ?pf.\n\t?pf :difference ?variant.\n\t?variant :evidence / :negative false. # variant with positive evidence\n\t?pf :diseaseRelatedVariant / :term nextprot_cv:ME_0000013 . # variant is causing disease\n } )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003580",
            "question": "Proteins with a signal sequence ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :signalPeptide ?_.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003581",
            "question": "Variants in MECP2 causing Rett Syndrome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?start ?stop ?original ?modified WHERE {\n nextprot:NX_P51608 :isoform ?iso. #MECP2 entry\n ?iso :swissprotDisplayed true. #Swissprot canonical isoform\n {\n ?iso :variant ?v.\n ?v :disease nextprot_cv:DI-00999. #UniProtKB term for Rett Syndrome\n ?v :start ?start.\n ?v :end ?stop.\n filter((?stop - ?start) = 0) #single amino acid variants (SAAVs)\n ?v :original ?original.\n ?v :variation ?modified.\n }\n union\n {\n ?iso :proteoform ?pf.\n ?pf :diseaseRelatedVariant ?ann.\n filter not exists {?ann :negativeEvidence ?negev} # No negative disease evidence\n ?ann :impactedObject /:term nextprot_cv:C75488. #NCI Thesaurus term for Rett Syndrome\n ?pf :difference ?v.\n ?v :start ?start.\n ?v :end ?stop.\n filter((?stop - ?start) = 0)\n ?v :original ?original.\n ?v :variation ?modified.\n }\n}\norder by asc(?start)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003582",
            "question": "Proteins interacting with at least 10 members of a protein family ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) (str(?xlab) as ?itfamily) ?itcnt ?membercnt ((xsd:float(?itcnt) / xsd:float(?membercnt)) as ?ratio) WHERE {\n {\n select ?xterm ?xlab (count(distinct ?member) as ?membercnt) WHERE {\n ?member :isoform? / :familyName /:term /:childOf ?xterm.\n ?xterm rdfs:label ?xlab .\n } group by ?xterm ?xlab\n }\n {\n select ?xterm ?entry ?gen (count (distinct ?interactant) as ?itcnt) WHERE {\n ?entry :isoform ?iso; :gene / :name / rdfs:label ?gen .\n ?iso :interaction ?it.\n ?it :quality :GOLD; :interactant ?interactant.\n ?interactant :familyName /:term /:childOf ?xterm .\n } group by ?xterm ?entry ?gen having (count (distinct ?interactant) >= 10)\n }\n}\norder by desc(?ratio)\nlimit 60",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003583",
            "question": "Proteins that have a MS-identified proteotypic peptide that maps partly or fully into a signal sequence",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?overlap WHERE {\n ?entry :isoform ?iso.\n #get Signal position (start is always 1)\n ?iso :signalPeptide [:end ?s2] .\n ?iso :peptideMapping ?pm .\n ?pm :proteotypic true .\n #get peptide position\n ?pm :start ?p1 ; :end ?p2 .\n #match positions\n filter ( ?p1 < ?s2 )\n bind ( if(?p2<?s2, ?p2, ?s2) - ?p1 as ?overlap) .\n filter(?overlap > 2)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003584",
            "question": "Proteins involved in both Wnt and Hippo signaling pathways",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n # nextprot_cv:GO:0016055 wnt pathway\n ?iso :goBiologicalProcess ?func1 .\n ?func1 :term / :childOf nextprot_cv:GO_0016055.\n filter not exists { ?func1 :negativeEvidence ?negev. } # No negative function evidence\n # nextprot_cv:GO:0035329 Hippo pathway\n ?iso :goBiologicalProcess ?func2 .\n ?func2 :term / :childOf nextprot_cv:GO_0035329.\n filter not exists { ?func2 :negativeEvidence ?negev. } # No negative function evidence\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003585",
            "question": "Proteins that have a 3D structure in PDB that overlap by at least 50 amino acids with a SH3 domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?isoform.\n ?isoform :pdbMapping ?struc.\n ?struc :start ?s1 ; :end ?s2.\n ?isoform :region ?dom.\n ?dom :term nextprot_cv:DO-00615 ; :start ?d1 ; :end ?d2.\n bind ( if(?d2<?s2, ?d2, ?s2) - if(?d1>?s1, ?d1, ?s1) as ?overlap) .\n filter (?overlap>50)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003586",
            "question": "Protein pairs with at least 50 common interactors (excluding keratins) ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry ?gene ?entry2 ?gene2 ?commonitcnt ?sampleit WHERE {\n {\n SELECT DISTINCT ?entry (str(?gen) as ?gene) ?entry2 (str(?gen2) as ?gene2) (count (distinct ?commonpartner) as ?commonitcnt) (str(sample(?genit)) as ?sampleit) WHERE {\n ?entry :isoform / :interaction ?it1; :gene / :name / rdfs:label ?gen.\n ?it1 :quality :GOLD; :interactant ?commonpartner .\n ?entry2 :isoform / :interaction ?it2; :gene / :name / rdfs:label ?gen2.\n ?it2 :quality :GOLD;:interactant ?commonpartner .\n ?commonpartner :gene / :name / rdfs:label ?genit .\n filter(?entry != ?entry2)\n filter(!contains(?gen,\"KRT\") && !contains(?gen2,\"KRT\") && !contains(?genit,\"KRT\")) # remove sticky keratins\n} group by ?entry ?gen ?entry2 ?gen2 having (count (distinct ?commonpartner) >= 50) \t\t\t\t}\nfilter(substr(str(?entry),34) < substr(str(?entry2),34)) # ensures only one row by it pair\n}\norder by desc(?commonitcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003587",
            "question": "References for SCN1A variants causing Dravet syndrome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT (str(?publiid) as ?PMID) ?title WHERE {\n nextprot:NX_P35498 :isoform ?iso. #SCN1A entry\n ?iso :swissprotDisplayed true. #Swissprot canonical isoform\n {\n ?iso :variant ?v.\n ?v :disease nextprot_cv:DI-01023. #UniProtKB term for Dravet syndrome\n ?v :evidence /:reference ?pub.\n ?pub :title ?title.\n ?pub :from ?xref .\n ?xref :accession ?publiid ; :provenance db:PubMed .\n }\n union\n {\n ?iso :proteoform ?pf.\n ?pf :diseaseRelatedVariant ?ann.\n filter not exists {?ann :negativeEvidence ?negev} # No negative disease evidence\n ?ann :impactedObject /:term nextprot_cv:C116573. #NCI Thesaurus term for Dravet syndrome\n ?ann :evidence /:reference ?pub.\n ?pub :title ?title.\n ?pub :from ?xref .\n ?xref :accession ?publiid ; :provenance db:PubMed .\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003588",
            "question": "Proteins with a mitochondrial transit peptide",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :mitochondrialTransitPeptide ?mit.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003589",
            "question": "Variants identified in exome datasets in a frequent homozygote state",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?varpos where\n{\n ?entry :isoform ?iso .\n ?iso :swissprotDisplayed true .\n ?iso :variant ?var .\n ?var :start ?varpos .\n ?var :evidence ?ev .\n ?var :evidence / :homozygoteCount ?hcnt .\n filter(?hcnt > 100000)\n }\n order by desc(?hcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003590",
            "question": "Proteins that are expressed only in liver",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSelect distinct ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :detectedExpression /:term ?tiss, ?tiss2.\n ?tiss2 :childOf nextprot_cv:TS-0564. # Liver\n} group by ?entry ?iso having(count(distinct ?tiss) = count(distinct ?tiss2))",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003591",
            "question": "Proteins located on chromosome 2 and having at least one variant in a phosphorylated tyrosine",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :chromosome \"2\"^^xsd:string .\n ?entry :isoform ?iso.\n ?iso :variant /:start ?varpos.\n ?iso :modifiedResidue ?modres.\n ?modres :term nextprot_cv:PTM-0255.\n ?modres :start ?varpos.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003592",
            "question": "Proteins that are enzymes and with at least one mutagenesis site that decrease or abolish activity",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?nextprot:isoform ?iso.\n ?iso :enzymeClassification ?_ .\n ?iso :mutagenesis/rdfs:comment ?comment\n filter regex(?comment, '(decrease|abolish).*activity','i')\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003593",
            "question": "Proteins which are \"Receptor binding\" according to GO and have the Swiss-Prot keyword \"Immunity\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :function ?statement.\n ?statement :term / :childOf nextprot_cv:GO_0005102.\n filter not exists { ?statement :negativeEvidence ?negev. } # No negative function evidence\n ?iso :uniprotKeyword/:term nextprot_cv:KW-0391.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003594",
            "question": "Proteins with a protein existence \"At transcript level\" (PE=2)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :existence :Evidence_at_transcript_level\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003595",
            "question": "Proteins involved in the Reactome pathway \"Respiratory electron transport\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :pathway ?p.\n ?p :evidence /:reference ?xref.\n ?xref :provenance db:Reactome; :accession \"R-HSA-611105\"^^xsd:string.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003596",
            "question": "Proteins which have been identified in at least one proteomics set and that are secreted",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?sloc {nextprot_cv:GO_0005576 nextprot_cv:SL-0243} # GO and SL values for secreted\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term/:childOf ?sloc .\n filter not exists {?sloc :negativeEvidence ?negev} # No negative localization evidence\n #filter not exists {?iso :cellularComponent /:term nextprot_cv:GO_0070062 .\n #\t\t\t\t\t filter not exists {?iso :cellularComponent /:term /:childOf nextprot_cv:SL-0243 .}\n #\t\t\t\t\t} # you can uncomment this to filters out extracellular exosome only location (2240 entries), most of them evidenced only by large-scale proteomic analysis\n ?iso :peptideMapping ?map.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003597",
            "question": "Proteins with a sequence containing \"FF.+QYE\" where \".+\" is any peptide of any length",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :sequence / :chain ?chain.\n filter ( regex(?chain, \"FF.+QYE\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003598",
            "question": "Proteins whose genes are on chromosome X and which do not have a ortholog in mouse",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :chromosome \"X\"^^xsd:string .\n filter not exists { ?entry :reference / :provenance db:MGI . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003599",
            "question": "Proteins which are enzymes catalyzing a reaction involving lipids",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?entry WHERE {\n#SELECT DISTINCT ?entry str(?xlab) WHERE {\n SERVICE <https://sparql.rhea-db.org/sparql> {\n SELECT distinct ?chebi WHERE {\n ?reaction rdfs:subClassOf rh:Reaction .\n ?reaction rh:status rh:Approved .\n ?reaction rh:side ?reactionSide .\n ?reactionSide rh:contains ?participant .\n ?participant rh:compound ?compound .\n ?compound rh:chebi ?chebi .\n ?chebi rdfs:subClassOf+ CHEBI:18059 .\n }\n }\n ?entry :isoform / :smallMoleculeInteraction / :interactant ?x .\n ?x rdfs:label ?xlab .\n ?x skos:exactMatch ?chebi .\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003600",
            "question": "What are the 25 most frequent families with member count",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect (str(?famlab) as ?familylabel) (count(distinct(?member)) as ?membercnt) where{\n ?member :familyName /:term /:childOf / rdfs:label ?famlab .\n} group by ?famlab\norder by desc(?membercnt)\nlimit 25",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003601",
            "question": "Proteins with a DNA-binding region but not located in the nucleus",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?entry :gene / :name / rdfs:label ?gen .\n ?iso :dnaBindingRegion ?dnab.\n filter not exists { ?entry :isoform / :cellularComponent /:term /:childOf nextprot_cv:SL-0191} # SL for nucleus\n filter not exists { ?entry :isoform / :cellularComponent /:term /:childOf nextprot_cv:GO_0005634} # GO for nucleus\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003602",
            "question": "Proteins with at least one somatic variant",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :variant ?var.\n {\n ?var rdfs:comment ?comment.\n filter (contains (?comment,'somatic'))\n }\n union\n {\n ?var :evidence ?ev.\n ?ev :assignedBy source:Cosmic.\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003603",
            "question": "Proteins with at least one annotated mutagenesis site",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :mutagenesis ?mut.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003604",
            "question": "Terms of controlled vocabularies containing some word(s)",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT * WHERE {\n ?term rdfs:label ?label ; a ?type .\n # ---------------------------\n # exact match\n # ---------------------------\n filter(?label = \"peroxisome\"^^xsd:string)\n\n # ---------------------------\n # starting with peroxisome\n # ---------------------------\n # filter(regex(?label,\"^peroxisome\"))\n\n # ---------------------------\n # containing peroxisome\n # ---------------------------\n # filter(regex(?label,\"peroxisome\"))\n\n # ------------------------------------\n # containing peroxisome and receptor\n # ------------------------------------\n # filter(regex(?label,\"peroxisome.*receptor\"))\n} limit 20",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003605",
            "question": "Domains that are entirely covered by 3D structures",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?domlabel WHERE {\n ?entry :isoform ?isoform.\n ?isoform :pdbMapping ?struc.\n ?struc :start ?s1 ; :end ?s2.\n ?isoform :domain ?dom.\n ?dom :start ?d1 ; :end ?d2.\n ?dom :term/rdfs:label ?domlabel\n filter ((?s1 <= ?d1) && (?s2 >= ?d2))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003606",
            "question": "Proteins that are enzymes requiring the cofactor Ca(2+) and with a calcium binding site",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry (str(?name) as ?prot_name) (str(?ec) as ?ecs) where\n\n{ ?entry :recommendedName ?name_entity .\n ?name_entity a :ProteinName; rdfs:label ?name.\n ?entry :isoform ?iso.\n ?iso :enzymeClassification /rdfs:comment ?ec.\n ?iso :cofactor /:interactant /skos:exactMatch CHEBI:29108. # Ca(2+) cofactor\n ?iso :bindingSite /:interactant ?inter.\n ?inter :accession \"CHEBI:29108\"^^xsd:string # binding site interactant Ca(2+)\n}\norder by asc(?ec)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003607",
            "question": "Proteins with a molecular weight less than 25 kDa",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?mw WHERE {\n ?entry :isoform / :sequence / :molecularWeight ?mw.\n filter ( ?mw < 25000)\n} order by ?mw",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003608",
            "question": "Human pathways in which at least one protein is mitochondrial GOLD",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n\nselect ?pathwayname (group_concat(distinct ?gen ; SEPARATOR = ',') as ?gene) WHERE {\n SERVICE <http://sparql.wikipathways.org/sparql> {\n\n { ?geneProduct a wp:GeneProduct . }\n union\n { ?geneProduct a wp:Protein . }\n ?geneProduct rdfs:label ?genraw .\n bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).\n filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching\n ?geneProduct dcterms:isPartOf ?pathway .\n ?pathway a wp:Pathway .\n ?pathway wp:organism ?organism .\n filter(contains(str(?organism),\"9606\"))\n ?pathway dc:title ?pathwayname .\n }\n\n ?entry a :Entry .\n ?entry :gene / :recommendedName / rdfs:label ?gen .\n ?entry :isoform / :cellularComponent ?loc .\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739 } # SL and GO values for mitochondrion\n ?loc :term / :childOf ?mitoloc. # mitochondrion\n ?loc :evidence / :quality :GOLD .\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n}\ngroup by ?pathwayname\norder by ?pathwayname",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003609",
            "question": "Proteins whose genes are located in chromosome 2 region from 2p12 to 2p24.2",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene ?gene .\n ?gene :chromosome \"2\"^^xsd:string .\n ?gene :band ?band.\n filter (?band >= \"p12\"@en && ?band <= \"p24.2\"@en )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003610",
            "question": "Proteins with a sequence containing \"FF.QYE\" where \".\" is any single amino-acid",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry rdf:type :Entry.\n ?entry :isoform / :sequence / :chain ?chain.\n filter ( regex(?chain, \"FF.QYE\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003611",
            "question": "Proteins with at least one 3D structure and that are phosphorylated",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0597. # Phosphoprotein\n ?iso :pdbMapping ?map.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003612",
            "question": "Proteins with an active site that is a proton acceptor",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry ?comment WHERE {\n ?entry :isoform/ :activeSite /rdfs:comment ?comment.\n filter (contains (?comment,'Proton acceptor'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003613",
            "question": "Proteins that have at least one 3D structure solved by NMR",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :pdbMapping ?map.\n ?map :method ?meth\n filter (contains(?meth,'NMR'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003614",
            "question": "Proteins with a gene name that starts with \"CLDN\"",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene / :name / rdfs:label ?name.\n filter (regex(?name, \"^CLDN\"@en))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003615",
            "question": "Proteins which are involved in cell adhesion according to GO with an evidence which is not used in automatic assertion nor a sequence similarity evidence used in manual assertion",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform/:function ?statement.\n ?statement :term / :childOf nextprot_cv:GO_0007155.\n filter not exists { ?statement :negativeEvidence ?negev. } # No negative function evidence\n ?statement :evidence/:evidenceCode ?ecode.\n filter not exists { ?ecode :childOf nextprot_cv:ECO_0000501. } # Automatic assertion\n filter not exists { ?ecode :childOf nextprot_cv:ECO_0000250. } # Sequence similarity evidence used in manual assertion\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003616",
            "question": "Proteins whose genes are on chromosome 18 and that are experimentally (cv:ECO_0000269) known to be glycosylated or phosphorylated or acetylated",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry {\n ?entry :gene / :chromosome \"18\"^^xsd:string.\n ?entry :isoform ?iso.\n {\n ?iso :glycosylationSite ?ptm1.\n ?ptm1 :evidence /:evidenceCode / :childOf nextprot_cv:ECO_0000269\n }\n union {\n ?iso :modifiedResidue ?ptm2.\n ?ptm2 rdfs:comment ?com.\n ?ptm2 :evidence / :evidenceCode / :childOf nextprot_cv:ECO_0000269\n filter (regex(?com, '^phospho|acetyl','i'))\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003617",
            "question": "Proteins which are linked to a disease and that do not have orthologs/paralogs in mouse",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n {\n ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n ?kw :termType \"Disease\"^^xsd:string\n filter (?kw != nextprot_cv:KW-0656)\n }\n FILTER NOT EXISTS { ?entry :reference / :provenance db:MGI . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003618",
            "question": "Proteins with a propeptide ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :propeptide ?propep .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003619",
            "question": "Proteins with at least one proteotypic peptide 9aa+ not mapping on canonical isoform",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nselect ?entry (sample(?isopos) as ?samplematch) WHERE {\n ?entry :isoform ?iso1, ?isononcano.\n ?iso1 :swissprotDisplayed true .\n ?isononcano :swissprotDisplayed false .\n ?isononcano :peptideMapping ?pm.\n ?pm :peptideName ?pepname.\n ?pm :proteotypic true.\n ?pm :start ?pos ; :end ?pos2 .\n filter(?pos2 - ?pos >= 8) # peptide length >= 9\n bind(strafter(str(?isononcano),\"-\") as ?isostr)\n bind(concat(concat(?isostr,\"-\"),?pos) as ?isopos)\n filter not exists {?iso1 :peptideMapping/ :peptideName ?pepname.}\n }\ngroup by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003620",
            "question": "Proteins for which an interaction mapping region is described for both interactants ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?gen) AS ?gene) ?entry2 (str(?gen2) AS ?gene2) WHERE {\n ?entry :isoform ?iso; :gene / :recommendedName / rdfs:label ?gen .\n ?iso :interactionMapping / :interactant ?entry2.\n ?entry2 :gene / :recommendedName / rdfs:label ?gen2 .\n filter exists { ?entry2 :isoform / :interactionMapping / :interactant ?entry.}\n} order by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003621",
            "question": "Protein domains or regions that frequently occur in interaction mappings",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT (str(?rlab) as ?rlab1) (count(distinct ?itid) as ?itcnt) WHERE {\n ?entry :isoform ?iso; :gene / :name / rdfs:label ?gen .\n ?iso :swissprotDisplayed true; :interactionMapping ?itmap .\n ?itmap :entryAnnotationId ?itid; :start ?its; :end ?ite .\n bind(?ite - ?its + 1 as ?itlen)\n ?iso :region ?reg .\n ?reg :start ?rs; :end ?re; :term ?rterm .\n ?rterm rdfs:label ?rlab .\n bind(?re - ?rs + 1 as ?rlen)\n filter (?rs >= ?its - 15 && ?re <= ?ite + 15)\n filter(xsd:float(?itlen) / xsd:float(?rlen) < 2.0)\n} group by ?rlab having(count(distinct ?itid) >= 10)\norder by desc(?itcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003622",
            "question": "Proteins with at least one known SUMOylation site",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :crossLink /rdfs:comment ?comment.\n filter(contains (?comment,'SUMO'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003623",
            "question": "Peptides that are potential neo N-termini from undescribed isoforms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?pep WHERE {\n ?entry :isoform ?iso .\n ?iso :peptideMapping ?pm.\n ?pm :start ?p1 ; :end ?p2 .\n ?pm :proteotypic true .\n filter(?p1 > 2). # must not be already N-terminal\n ?iso :sequence / :chain ?chain.\n bind (substr(?chain, ?p1, ?p2 - ?p1 + 1) as ?pep) .\n bind (substr(?chain, ?p1-1, 1) as ?prevAA) .\n bind (substr(?chain, ?p1, 1) as ?firstAA) .\n bind (substr(?chain, ?p2, 1) as ?lastAA) .\n filter(!regex (?prevAA,'[KR]')) # must be semi-tryptic in N-ter\n filter(regex (?prevAA,'M') || regex (?firstAA,'M')) # must be N-terminal\n filter(!regex (?firstAA,'[DEFIKLRY]')) #plausible 2nd AA\n filter(regex (?lastAA,'[KR]')) # must be tryptic in C-ter\n filter not exists { # The candidate peptide must not already exist as N-ter in a described isoform\n ?entry :isoform ?iso2.\n ?iso2 :sequence / :chain ?chain2.\n ?iso2 :matureProtein [ :start ?mstart ; :end ?mend]\n bind (substr(?chain2, ?mstart, ?mend - ?mstart + 1) as ?mat2) .\n filter(strlen(?mat2) > 30).\n bind (substr(?mat2, 2, strlen(?mat2) - 1) as ?mat22) .\n filter(regex(?mat2,concat(\"^\", ?pep)) || regex(?mat22,concat(\"^\", ?pep))).\n }\n}\norder by ?pep\n\n# overestimated, need additional filter(s)\n# but for instance AELEEVTLDGKPLQALR, AELEEVTLDGKPLQALRVTDLKAALEQR and AELEEVTLDGKPLQALRVTDLKAALEQR in Q9UKV3\n# are N-acetylated and good markers for an additional iso starting at M-59",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003624",
            "question": "Proteins with a 3D structure in complex with another human protein which is not reported as binary interactant",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry a :Entry.\n ?entry :reference ?ref.\n ?ref :provenance db:PDB; :accession ?ac.\n ?entry2 a :Entry.\n ?ac ^:accession/^:reference ?entry2.\n filter(?entry != ?entry2).\n filter not exists{?entry :isoform /:binaryInteraction / :interactant ?entry2.}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003625",
            "question": "Proteins with interactions obtained from x-ray crystallography",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :binaryInteraction /:evidence ?ev.\n ?ev :interactionDetectionMethod nextprot_cv:MI_0114. # x-ray crystallography\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003626",
            "question": "Authors who have reported more than 25000 human protein-protein interactions ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT (str(?auth) AS ?auth1) (count (distinct ?itid) as ?itcnt) WHERE {\n ?entry :isoform / :binaryInteraction ?interaction.\n ?interaction :evidence / :reference ?publi .\n ?publi :author / :name ?auth .\n ?interaction :interactant ?interactant; :quality :GOLD; :entryAnnotationId ?itid.\n} group by ?auth having (count (distinct ?itid) > 25000)\norder by desc(?itcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003627",
            "question": "Proteins that act as transporters and their TCDB numbers",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?trcom) as ?trannot) (str(?acc) as ?trac) {\n ?entry :isoform/ :transportActivity ?tr.\n ?tr rdfs:comment ?trcom; :evidence / :reference ?ref.\n ?ref a :Xref; :accession ?acc .\n} order by ?acc",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003628",
            "question": "Proteins with a variant having an impact on a binary interaction ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry ?interactant WHERE {\n ?entry :isoform / :proteoform / :phenotypicVariation ?phvar .\n ?phvar :term / :childOf nextprot_cv:ME_0000002 . # children of impact\n ?phvar :evidence / :quality :GOLD .\n ?phvar :impactedObject / :interactant ?interactant.\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003629",
            "question": "Proteins with Poly-Proline stretches",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :compositionallyBiasedRegion / rdfs:comment ?desc.\n filter (contains(?desc,'Pro residues')).\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003630",
            "question": "Proteins with a sequence that does not contain a lysine in the mature region",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :sequence / :chain ?seq.\n ?iso :matureProtein [ :start ?mstart ; :end ?mend]\n bind(?mend - ?mstart + 1 as ?mlen)\n bind(substr(?seq, ?mstart, ?mlen) as ?mseq)\n filter (!regex (?mseq,'K'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003631",
            "question": "Proteins with a gene alternative name starting with IL27",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry ?recname ?altname WHERE {\n ?entry :gene ?gn.\n ?gn :recommendedName / rdfs:label ?recname.\n ?gn :alternativeName / rdfs:label ?altname.\n filter (regex(?altname, \"^IL27\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003632",
            "question": "Proteins with 3 disulfide bonds and that are not annotated as hormones ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?isoform.\n ?isoform :ptm ?statement.\n ?statement a :DisulfideBond.\n filter not exists { ?entry :isoform / :function / :term /:childOf nextprot_cv:GO_0005179. } # GO Hormone activity\n} group by ?entry ?isoform having (count(?statement) =3 )",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003633",
            "question": "Proteins with at least one HPA antibody that are located in the peroxisome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?peroxiloc {nextprot_cv:GO_0005777 nextprot_cv:SL-0204} # GO and SL values for peroxisome\n\n ?entry :isoform ?iso.\n ?iso :antibodyMapping ?map.\n ?iso :cellularComponent ?loc .\n ?loc :term /:childOf ?peroxiloc. # peroxisomal\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003634",
            "question": "Proteins located in the mitochondrion and which are enzymes",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739} # SL and GO values for mitochondrion\n ?entry :isoform / :enzymeClassification ?_ .\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term / :childOf ?mitoloc.\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003635",
            "question": "100 most-cited publications in neXtProt and the corresponding number of associated entries",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\n\nselect (str(?publiid) as ?PMID) (str(?tt) as ?title) (count(distinct ?entry) as ?ecnt) \nwhere {\n ?entry a :Entry .\n ?entry :reference ?ref .\n ?ref a :Publication.\n ?ref :title ?tt .\n ?ref :from ?xref .\n ?xref :accession ?publiid .\n ?xref :provenance db:PubMed .\n}\ngroup by ?publiid ?tt\norder by desc(?ecnt)\nlimit 100",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003636",
            "question": "Transmembrane proteins with the number of transmembrane domains in the canonical isoform by decreasing order",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nselect ?entry (count(distinct(?statement)) as ?tmcnt) WHERE {\n ?entry :isoform ?iso.\n ?iso :swissprotDisplayed true .\n ?iso :topology ?statement.\n ?statement a :TransmembraneRegion.\n}\ngroup by ?entry\norder by desc(?tmcnt)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003637",
            "question": "Proteins that interact with viral proteins",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n optional {?iso :interactionInfo ?itinfo .}\n {\n ?itinfo rdfs:comment ?txt.\n filter(contains(?txt,\"viral\") || contains(?txt,\"virus\")).\n } # refers to a virus in the free-text interactionInfo topic\nUNION\n { ?iso :uniprotKeyword / :term nextprot_cv:KW-0945.} # host-virus interaction keyword\nUNION\n {\n SERVICE <https://sparql.uniprot.org/sparql> {\n SELECT distinct ?viralinteractor WHERE # get viral proteins with an IntAct xref\n {\n\t?viralinteractor a up:Protein .\n\t?viralinteractor rdfs:seeAlso ?db .\n\t?db up:database <http://purl.uniprot.org/database/IntAct> .\n \t?viralinteractor up:organism ?tax .\n\t?tax up:scientificName ?orgname.\n\tfilter(contains(?orgname,\"virus\"))\n }\n }\n ?entry :isoform / :binaryInteraction ?it .\n ?it :interactant ?interactant; :quality :GOLD. # NeXtprot entries with a GOLD IntAct binary interaction\n ?interactant skos:exactMatch ?viralinteractor . # interactant must be in the uniprot service result set to select the entry\n }\nUNION\n {\n SERVICE <https://sparql.uniprot.org/sparql> {\n SELECT distinct ?humprotein WHERE # get human proteins that share a PDB xref with a viral protein (same PDB id)\n {\n\t?humprotein a up:Protein .\n ?humprotein up:organism taxon:9606 .\n\t?humprotein rdfs:seeAlso ?db .\n\t?db up:database <http://purl.uniprot.org/database/PDB> .\n\t?viralprotein a up:Protein .\n\t?viralprotein rdfs:seeAlso ?db .\n ?viralprotein up:organism ?tax .\n\t?tax up:scientificName ?orgname.\n\tfilter(contains(?orgname,\"virus\"))\n }\n }\n ?entry skos:exactMatch ?humprotein .\n }\n}\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003638",
            "question": "Proteins with subcellular location gold and list of all these locations",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (group_concat(distinct str(?loclab); SEPARATOR = \",\") as ?locs) WHERE {\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?locannot .\n ?locannot :term ?locterm .\n ?locterm rdfs:label ?loclab .\n ?locannot :evidence ?locev .\n ?locev :quality :GOLD .\n filter not exists {?locannot :negativeEvidence ?locev .}\n}\nGROUP BY ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003639",
            "question": "Proteins with both RNA-seq expression and observed IHC expression \"high\" in brain or one of its subparts",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :expression ?exprna, ?expihc.\n ?exprna :term ?rnatiss .\n ?exprna :evidence ?evirna.\n ?evirna :observedExpression :Positive.\n ?evirna :evidenceCode nextprot_cv:ECO_0000295. # RNA-seq\n ?rnatiss :childOf nextprot_cv:TS-0095. #brain\n ?expihc :quality :GOLD .\n ?expihc :term ?ihctiss .\n ?expihc :evidence ?eviihc.\n ?eviihc :evidenceCode nextprot_cv:ECO_0001055. #IHC\n ?eviihc :observedExpression :High.\n ?ihctiss :childOf ?rnatiss .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003640",
            "question": "Proteins with at least one homeobox domain and with at least one variant in the homeobox domain(s)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n # with >=1 homeobox domain\n ?iso :region ?st1.\n ?st1 :term nextprot_cv:DO-00312;:start ?start;:end ?end.\n # with >=1 variant\n ?iso :variant ?var.\n ?var :start ?varpos.\n # one variant in the homeobox domain\n filter (?varpos >=?start && ?varpos <=?end)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003641",
            "question": "Proteins with at least 2 HPA antibodies whose genes are located on chromosome 21 and that are highly expressed according to IHC in heart",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nselect ?entry WHERE {\n SELECT DISTINCT ?entry ?id WHERE {\n ?entry :gene / :chromosome \"21\"^^xsd:string .\n ?entry :isoform / :expressionProfile ?s1.\n ?s1 :term / :childOf nextprot_cv:TS-0445.\n ?s1 :evidence ?evi.\n ?evi :observedExpression :High.\n ?evi :evidenceCode nextprot_cv:ECO_0001055.\n ?entry :isoform / :antibodyMapping ?map.\n\t ?map :evidence / :reference / :accession ?id .\n }\n} group by ?entry having (count(?id)>=2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003642",
            "question": "Proteins whose genes are less than 50000 bp away from the location of the gene coding for protein p53",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot: <http://nextprot.org/rdf/entry/>\n\nSELECT DISTINCT ?entry WHERE {\n nextprot:NX_P04637 :gene /:begin ?s;:gene/:chromosome ?chr.\n ?entry :gene/:begin ?gs;:gene/:chromosome ?chr.\n filter ( ?gs > (?s -50000) && ?gs <= (?s +50000) && ?entry != nextprot:NX_P04637 )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003643",
            "question": "Proteins that are oxidoreductases and that bind to NAD/NADP",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword /:term nextprot_cv:KW-0560. #oxidoreductase\n ?iso :uniprotKeyword /:term ?kw\n filter( ?kw in (nextprot_cv:KW-0520,nextprot_cv:KW-0521)) # NAD or NADP\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003644",
            "question": "Proteins with no function annotated",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n filter not exists { ?iso :functionInfo ?_. }\n filter not exists { ?iso :catalyticActivity ?_ .}\n filter not exists { ?iso :transportActivity ?_ .}\n filter not exists { ?iso :pathway ?_. }\n filter not exists {\n ?iso :function / :term ?fterm .\n\t\t\t filter(?fterm != nextprot_cv:GO_0005524 && ?fterm != nextprot_cv:GO_0000287 && ?fterm != nextprot_cv:GO_0005515 && ?fterm != nextprot_cv:GO_0042802\n\t\t\t && ?fterm != nextprot_cv:GO_0008270 && ?fterm != nextprot_cv:GO_0051260 && ?fterm != nextprot_cv:GO_0005509\n\t\t\t\t\t && ?fterm != nextprot_cv:GO_0003676 && ?fterm != nextprot_cv:GO_0003824 && ?fterm != nextprot_cv:GO_0007165 && ?fterm != nextprot_cv:GO_0035556\n\t\t\t\t\t && ?fterm != nextprot_cv:GO_0046914 && ?fterm != nextprot_cv:GO_0046872)\n }\n filter not exists { ?entry :existence :Uncertain } # Remove PE5 proteins\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003645",
            "question": "Proteins which are ion channels and are associated with a disease",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :uniprotKeyword /:term nextprot_cv:KW-0407. #ion channel\n {\n ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n ?kw :termType \"Disease\"^^xsd:string\n filter (?kw != nextprot_cv:KW-0656)\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003646",
            "question": "Proteins with at least two proteotypic synthetic peptides from SRMAtlas of at least 9 amino acids in length",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :srmPeptideMapping ?srm .\n ?srm :start ?ps; :end ?pe .\n filter(?pe - ?ps + 1 >= 9)\n ?srm :proteotypic true .\n ?srm :peptideName ?pepid .\n}\ngroup by ?entry having(count(distinct ?pepid) > 1)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003647",
            "question": "Proteins located on chromosome MT (mitochondrial) coded by a gene located on the plus strand",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :gene ?gene .\n ?gene :chromosome \"MT\"^^xsd:string; :strand \"1\"^^xsd:string .\n }",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003648",
            "question": "Proteins for which none of the reported proteotypic peptides is from PeptideAtlas nor MassIVE",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nselect ?entry WHERE {\n ?entry :isoform / :peptideMapping ?pm.\n ?pm :proteotypic true .\n ?pm :peptideSource ?src .\n bind (?src = source:MassIVE as ?massive)\n bind (?src = source:PeptideAtlas as ?pa)\n bind (?src != source:MassIVE && ?src != source:PeptideAtlas as ?other)\n}\ngroup by ?entry\nhaving (sum(?massive)=0 && sum(?pa)=0 && sum(?other)>0)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003649",
            "question": "Proteins with RNA-seq observed expression \"not detected\" and IHC observed expression : \"high\" (same tissue or children)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :expression ?exp, ?exp2.\n ?exp :term ?tiss .\n ?exp :negativeEvidence / :evidenceCode nextprot_cv:ECO_0000295. # RNA-seq\n ?exp2 :quality :GOLD .\n ?exp2 :term ?tiss2 .\n ?exp2 :evidence ?evi2.\n ?evi2 :evidenceCode nextprot_cv:ECO_0001055. # IHC\n ?evi2 :observedExpression :High.\n ?tiss2 :childOf ?tiss . # same tissue or children\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003650",
            "question": "Proteins with at least two antibodies available from Human Protein Atlas that have associated tissue expression annotations from immunohistochemistry studies ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :antibodyMapping ?abmap.\n ?abmap :evidence / :reference / :accession ?aid .\n ?iso :expressionProfile / :evidence ?ev .\n ?ev :evidenceCode nextprot_cv:ECO_0001055.\n# ?ev :quality :GOLD .\n}\ngroup by ?entry having(count(distinct ?aid) > 1)\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003651",
            "question": "Glycosylation sites and cross links positions on SwissProt canonical isoforms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry ?iso ?ptmtype ?pos ?modres WHERE {\n?entry :isoform ?iso.\n?iso :swissprotDisplayed true .\n?iso :sequence / :chain ?seq .\n?iso :ptm ?ptm.\n?ptm :term ?modterm.\n?ptm :start ?pos.\nbind (substr(?seq,?pos,1) as ?modres)\t.\n{\n?ptm a :GlycosylationSite .\nbind(\"glyco\" as ?ptmtype)\n}\nunion\n{\n?ptm a :CrossLink .\nbind(\"cross-link\" as ?ptmtype)\n}\n}\norder by ?iso\n#limit 100",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003652",
            "question": "Proteins that are involved in transport and located in a membrane and that are not glycosylated (experimentally or predicted)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n {\n ?iso :goBiologicalProcess ?gofunc .\n\t?gofunc :term / :childOf nextprot_cv:GO_0006810. # GO value for transport\n\tfilter not exists {?gofunc :negativeEvidence ?negev} # No negative function evidence\n } union {\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0813. # KW for transport\n }\n {\n ?iso :uniprotKeyword / :term nextprot_cv:KW-0812. # transmembrane\n } union {\n ?iso :topology / :term nextprot_cv:CVTO_0004. # intramembrane\n }\n filter not exists { ?iso :uniprotKeyword / :term nextprot_cv:KW-0325 } # not a glycoprotein\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003653",
            "question": "Proteins that bind RNA but do not contain a RRM domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso .\n ?iso :uniprotKeyword /:term nextprot_cv:KW-0694. #RNA-binding\n filter not exists {?iso :region/:term nextprot_cv:DO-00581} #RRM\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003654",
            "question": "Proteins with at least one phosphotyrosine but no phosphoserine or phosphothreonine",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n select ?entry ?iso (count(?ptm) as ?ptmCnt) WHERE {\n ?entry :isoform ?iso.\n ?iso :modifiedResidue ?ptm.\n ?ptm :term nextprot_cv:PTM-0255 #phosphotyrosine.\n filter (\n not exists { ?iso :modifiedResidue / :term nextprot_cv:PTM-0253. } #phosphoserine\n &&\n not exists { ?iso :modifiedResidue / :term nextprot_cv:PTM-0254. } #phosphothreonine\n )\n } group by ?entry ?iso having ( count(?ptm) >= 1 )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003655",
            "question": "Proteins with one or more glycosylation sites reported in PubMed:20570859 or PubMed:14760718",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX db: <http://nextprot.org/rdf/db/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry ?publications WHERE {\n values ?pmid {\"20570859\"^^xsd:string \"14760718\"^^xsd:string}\n # get all assertions from the publications\n ?entry :isoform/:glycosylationSite ?statement.\n ?statement :evidence/:reference/:from ?xref .\n ?xref :accession ?pmid ; :provenance db:PubMed .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003656",
            "question": "Proteins with sequences 100% identical to other proteins",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform / :sequence / :chain ?chain1.\n ?entry2 :isoform / :sequence / :chain ?chain2.\n filter ( (?chain1 = ?chain2) && (?entry != ?entry2))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003657",
            "question": "Proteins with high proline content",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry ?AAcnt ?seqlen ?AAdensity WHERE {\n ?entry :isoform ?iso.\n ?iso :swissprotDisplayed true .\n ?iso :sequence / :chain ?seq .\n ?iso :sequence / :length ?seqlen .\n bind( strlen( replace( str(?seq), \"[^P]\", \"\")) as ?AAcnt) # replace all non-Proline by empty string\n bind(xsd:float(?AAcnt)/xsd:float(?seqlen) as ?AAdensity)\n filter(?AAcnt > 10)\n}\norder by desc(?AAdensity)\nlimit 100 # will bring-up the 100 most relevant cases",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003658",
            "question": "Proteins entries from a list of gene names",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n values ?gene\n {\"UBA6\" \"PXDNL\" \"CNOT1\" \"TCAF2\" \"ARHGAP32\" \"HACD1\" \"AKR1B15\" \"SGK1\" \"MYO1C\" \"LGALS9\"\n \"PIK3CD\" \"PDE2A\" \"DNM1L\"} # space or nl-separated\n\n bind (STRDT (?gene,xsd:string) as ?genename ) . # converts raw string to ^^xsd:string\n ?entry :gene / :recommendedName / rdfs:label ?genename .\n }",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003659",
            "question": "Proteins with a variant having an impact on the nucleus localization at level GOLD",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry\nwhere {\n values ?ioTerm {nextprot_cv:GO_0005634} . # nucleus\n ?entry :isoform / :proteoform / :phenotypicVariation ?phvar .\n ?phvar :term / :childOf nextprot_cv:ME_0000002 . # children of impact\n ?phvar :evidence / :quality :GOLD .\n ?phvar :impactedObject / :term ?ioTerm .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003660",
            "question": "Proteins having at least 2 proteotypic peptides of 7 or 8aa but no proteotypic peptide >= 9 aa",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n?entry :isoform / :peptideMapping ?pm.\n?pm :proteotypic true .\n?pm :peptideName ?pepid .\n#?pm :start ?pos1 ; :end ?pos2 .\n#filter((?pos2 - ?pos1 + 1) >= 7) # This is not absolutely required for current query since 7 is the minimum length for accepted proteotypic peptides\nfilter not exists {\n ?entry :isoform / :peptideMapping ?pm2.\n ?pm2 :start ?p1 ; :end ?p2 .\n ?pm2 :proteotypic true .\n filter((?p2 - ?p1 + 1) >= 9)\n }\n}\ngroup by ?entry having(count (distinct ?pepid) >= 2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003661",
            "question": "Proteins for which different splice isoforms have a different subcellular location or function",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n#A0A1B0GVQ0,A0AVT1 ,A0PJK1...\n\n\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso1, ?iso2.\n ?iso1 :swissprotDisplayed true .\n ?iso2 :swissprotDisplayed false .\n {\n ?iso2 :function / :term ?functerm .\n filter (?functerm != nextprot_cv:GO_0005515) #protein-binding\n filter not exists {?iso1 :function / :term ?functerm .}\n }\n UNION\n {\n ?iso2 :functionInfo / rdfs:comment ?functext .\n filter not exists {?iso1 :functionInfo / rdfs:comment ?functext .}\n }\n UNION\n {\n ?iso2 :cellularComponent / :term ?locterm .\n filter not exists {?iso1 :cellularComponent / :term ?locterm}\n }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003662",
            "question": "Transmembrane proteins with at least 100 consecutive aa located in the EXTRACELLULAR OR LUMENAL compartment.",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :topologicalDomain ?topdom .\n ?topdom :term ?topterm .\n filter (?topterm in (nextprot_cv:CVTO_0002, nextprot_cv:CVTO_0003, nextprot_cv:CVTO_0007)) # extracellular, exoplasmic loop, lumenal\n ?topdom :start ?domstart; :end ?domend .\n filter ((?domend - ?domstart) >= 100)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003663",
            "question": "Proteins with experimentally determined lengthy alpha-helices (> 75 aa)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry (str(?gen) as ?gene) ?hlen WHERE {\n ?entry :isoform ?iso.\n ?entry :gene / :recommendedName / rdfs:label ?gen.\n ?iso :helix ?hel .\n ?hel :start ?s; :end ?e .\n bind((?e - ?s + 1) as ?hlen )\n filter(?hlen > 75)\n}\norder by desc(?hlen)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003664",
            "question": "Proteins interacting with at least one protein which is located in the mitochondrion",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?mitoloc {nextprot_cv:SL-0173 nextprot_cv:GO_0005739} # SL and GO values for mitochondrion\n\n ?entry :isoform / :interaction ?it .\n ?it :quality :GOLD . # remove this filter for lower quality interactions\n ?it :interactant ?interactant.\n ?interactant :isoform? / :cellularComponent ?loc .\n # the question mark at :isoform allows to select also isoform-specific interactions\n ?loc :term / :childOf ?mitoloc.\n filter not exists { ?loc :negativeEvidence ?negev. } # No negative localization evidence\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003665",
            "question": "Proteins with a coiled coil region and that are involved in transcription but do not contain a bZIP domain",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :function ?func .\n ?func :term / :childOf nextprot_cv:GO_0006351. # Transcription\n filter not exists {?func :negativeEvidence ?negev. } # no negative evidence\n ?iso :region/rdf:type :CoiledCoilRegion.\n filter not exists { ?iso :region/:term nextprot_cv:DO-00078 } # Bzip domain\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003666",
            "question": "Proteins with more than 10 reported interactions (of 'gold' quality)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform/:binaryInteraction ?interaction.\n ?interaction :interactant ?interactant; :quality :GOLD.\n ?interactant a :Entry.\n} group by ?entry having (count(distinct ?interactant) > 10)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003667",
            "question": "Proteins whose gene is located in chromosome 2 that belongs to families with at least 5 members in the human proteome",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nselect ?entry WHERE {\n ?entry :familyName / :term/^:term/^:familyName ?member.\n ?entry :gene / :chromosome \"2\"^^xsd:string .\n} group by ?entry having ( count(distinct ?member) >= 5 )",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003668",
            "question": "Proteins that are acetylated and methylated and located in the nucleus",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?nucloc {nextprot_cv:GO_0005634 nextprot_cv:SL-0191} # GO and SL values for nucleus\n\n ?entry :isoform ?iso.\n ?iso :cellularComponent ?loc .\n ?loc :term/:childOf ?nucloc.\n filter not exists {?loc :negativeEvidence ?negev} # No negative localization evidence\n ?iso :uniprotKeyword/:term nextprot_cv:KW-0007,nextprot_cv:KW-0488. # acetylated and methylated\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003669",
            "question": "Proteins with at least 2 validating peptides >=9aa found in blood plasma, urine or cerebrospinal fluid (criteria for biomarker)].",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX source: <http://nextprot.org/rdf/source/>\n\nSELECT DISTINCT ?entry WHERE {\nvalues ?pepsources {\n source:PeptideAtlas_human_Cerebrospinal_Fluid\n source:PeptideAtlas_human_Blood_Plasma\n source:PeptideAtlas_human_Urine\n source:MassIVE_human_Cerebrospinal_Fluid\n source:MassIVE_human_Blood_Plasma\n source:MassIVE_human_Urine\n }\n ?entry :isoform ?iso.\n ?iso :peptideMapping ?pm .\n ?pm :peptideName ?pepid .\n ?pm :evidence / :assignedBy ?pepsources .\n ?pm :proteotypic true .\n ?pm :start ?p1 ; :end ?p2 .\n filter(?p2-?p1 >= 8) # peptide length >= 9\n}\ngroup by ?entry having(count (distinct ?pepid) > 1) # at least two such peptides",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003670",
            "question": "Proteins with sequences 100% identical to other proteins, grouped",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry (group_concat(distinct substr(str(?entry2),34); separator = \",\") as ?sameseq) WHERE {\n ?entry :isoform / :sequence / :chain ?chain1.\n ?entry2 :isoform / :sequence / :chain ?chain2.\n filter ( (?chain1 = ?chain2) && (?entry != ?entry2))\n}\ngroup by ?entry\norder by ?entry",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003671",
            "question": "Proteins that contains a sequence \"QHP\" where the Proline is amidated",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n?entry :isoform ?isoform.\n?isoform :ptm ?ptm.\n?ptm :term nextprot_cv:PTM-0257 . # Proline amide\n?ptm :start ?ptmpos .\n?isoform :sequence / :chain ?seq.\nbind(substr(?seq, ?ptmpos-2, 3) as ?modseq)\nfilter ( regex(?modseq, \"QHP\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003672",
            "question": "Proteins which include a mature chain of less or equal to 50 amino acid residues whose C-terminus is amidated",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?entry WHERE {\n?entry :isoform ?isoform.\n?isoform :ptm ?ptm.\n?ptm rdfs:comment ?comment.\nfilter regex(?comment, \"amid\",\"i\")\n?ptm :start ?ptmpos .\n?isoform :matureProtein [ :start ?mstart ; :end ?mend]\nfilter ((?mend = ?ptmpos) && (?mend-?mstart < 50))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003673",
            "question": "Proteins that are PE>1 with at least one proteotypic peptide of at least 9 amino-acids identified in a human sample ",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n values ?level {\n \t:Evidence_at_transcript_level # PE=2\n \t:Inferred_from_homology \t# PE=3\n \t:Predicted \t# PE=4\n\t:Uncertain \t# PE=5\n\t}\n ?entry a :Entry .\n ?entry :existence ?level .\n ?entry :isoform / :peptideMapping ?pm.\n ?pm :proteotypic true .\n ?pm :start ?pos1 ; :end ?pos2 .\n filter((?pos2 - ?pos1 + 1) >= 9)\n }",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003674",
            "question": "Proteins with more than 12 WD repeats (ie: with at least two beta-propellers)",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n {select ?iso where{\n ?iso :repeat ?rep. ?rep :term nextprot_cv:DO-00722\n }\n group by ?iso having(count( ?rep) > 12)}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003675",
            "question": "Proteins with more than 10 alternative isoforms",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n} group by ?entry having (count(?iso)>10)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003676",
            "question": "Proteins with at least 50 interactors that are not associated with a disease",
            "SPARQL": "PREFIX : <http://nextprot.org/rdf/>\nPREFIX nextprot_cv: <http://nextprot.org/rdf/terminology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?entry WHERE {\n ?entry :isoform ?iso.\n ?iso :binaryInteraction/:interactant ?interactant.\n\n # with no disease\n filter not exists {\n {\n ?iso :medical / rdf:type :Disease.\n } union {\n ?iso :uniprotKeyword / :term ?kw .\n ?kw :termType \"Disease\"^^xsd:string\n filter (?kw != nextprot_cv:KW-0656)\n }\n }\n\n} group by ?entry ?iso having (count(?interactant) >= 50)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.nextprot.org/sparql",
            "fetchUrl": "https://sparql.nextprot.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000105"
            ]
        },
        {
            "id": "Q00003677",
            "question": "Building on example 10. ...in addition reactions are endowed with a direction, flux bounds and possibly the description of the enzymes that catalyze it.",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Building on example 10. ...in addition reactions are endowed with a direction, flux \n# bounds and possibly the description of the enzymes that \n# catalyze it. \n\nSELECT ?reac_orig_label ?reac_mnx_label ?lb ?ub ?dir ?cata_orig (GROUP_CONCAT(?cplx_label ; separator=' OR ') AS ?cplx_info )\nWHERE{\n    ?mnet rdfs:label 'bigg_e_coli_core';\n          mnx:gpr ?gpr .\n    ?gpr rdfs:label ?reac_orig_label ;\n         rdfs:comment ?cata_orig ;\n         mnx:reac ?reac ;\n         mnx:cata ?cata .\n    ?reac rdfs:label ?reac_mnx_label .\n    ?cata mnx:lb ?lb ;\n          mnx:ub ?ub ;\n          mnx:dir ?dir ;\n          mnx:cplx ?cplx .\n    ?cplx rdfs:label ?cplx_label .\n}\nGROUP BY ?reac_orig_label ?reac_mnx_label ?lb ?ub ?dir ?cata_orig ORDER BY (?reac)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003678",
            "question": "A GEM is primarily a set of reactions: here are all the reaction equations occurring in bigg_e_coli_core. NB: here the reac label is the one produced while compiling MetaNetX",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# A GEM is primarily a set of reactions: here are all the \n# reaction equations occurring in *bigg_e_coli_core*. NB: here \n# the reac label is the one produced while compiling MetaNetX \n\nSELECT ?reac_label ?chem_name ?comp_name ?coef\nWHERE{\n    ?mnet rdfs:label 'bigg_e_coli_core' ;\n          mnx:gpr/mnx:reac ?reac .\n    ?reac rdfs:label ?reac_label ;\n          ?side      ?part .\n    ?part mnx:chem ?chem ;\n          mnx:comp ?comp ;\n          mnx:coef ?c    .\n    ?chem rdfs:comment ?chem_name .\n    ?comp rdfs:comment ?comp_name .\n    FILTER( ?side IN ( mnx:left , mnx:right ))\n    BIND( IF( ?side = mnx:left, - ?c, ?c ) AS ?coef )\n}\nORDER BY ?reac_label",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003679",
            "question": "Given the protein with UniProt accession number P42588 (PAT_ECOLI, putrescine aminotransferase, EC 2.6.1.82) retrieve all reactions and models in which this polypeptide appears.",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Given the protein with UniProt accession number *P42588* \n# (PAT_ECOLI, putrescine aminotransferase, EC 2.6.1.82) \n# retrieve all reactions and models in which this polypeptide \n# appears. \n\nSELECT ?mnet_label ?reac_label ?reac_eq ?MNXR (GROUP_CONCAT( ?cata_label; separator=';' ) AS ?complex )\nWHERE{\n    ?pept mnx:peptXref up:P42588 .\n    ?cata mnx:pept ?pept ;\n          rdfs:label ?cata_label .\n    ?gpr mnx:cata ?cata ;\n         mnx:reac ?reac .\n    ?reac rdfs:label ?reac_label ;\n          rdfs:comment ?reac_eq .\n    ?mnet mnx:gpr ?gpr ;\n          rdfs:label ?mnet_label.\n    OPTIONAL{ ?reac mnx:mnxr ?MNXR }\n} GROUP BY ?mnet_label ?reac_label ?reac_eq ?MNXR",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003680",
            "question": "Same as example 12 but with <a href=\"http://purl.uniprot.org/uniprot/P0ABU7\">P0ABU7</a> as a query (Biopolymer transport protein ExbB).",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Same as example 13 but with *P0ABU7* as a query (Biopolymer \n# transport protein ExbB). \n\nSELECT ?mnet_label ?reac_label ?reac_eq ?MNXR (GROUP_CONCAT( ?cata_label; separator=';' ) AS ?complex )\nWHERE{\n    ?pept mnx:peptXref up:P0ABU7 .\n    ?cata mnx:pept ?pept ;\n          rdfs:label ?cata_label .\n    ?gpr mnx:cata ?cata ;\n         mnx:reac ?reac .\n    ?reac rdfs:label ?reac_label ;\n          rdfs:comment ?reac_eq .\n    ?mnet mnx:gpr ?gpr ;\n          rdfs:label ?mnet_label.\n    OPTIONAL{ ?reac mnx:mnxr ?MNXR }\n} GROUP BY ?mnet_label ?reac_label ?reac_eq ?MNXR",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003681",
            "question": "Show the reaction equation for ATP synthase (reaction ATPS4m from BiGG). NB: there are two types of protons here, as MetaNetX distinguishes protons used for balancing (MNXM1) from those that are translocated (MNXM01).",
            "SPARQL": "PREFIX biggR: <https://identifiers.org/bigg.reaction:>\nPREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Show the reaction equation for ATP synthase (reaction \n# *ATPS4m* from BiGG). NB: there are two types of protons \n# here, as MetaNetX distinguishes protons used for balancing \n# (MNXM1) from those that are translocated (MNXM01). \n\nSELECT ?chem ?chem_name ?comp ?comp_name $coef\nWHERE{\n    ?reaction mnx:reacXref biggR:ATPS4m .\n    ?reaction ?side ?part .\n    ?part mnx:chem ?chem ;\n          mnx:comp ?comp ;\n          mnx:coef ?c    .\n    ?chem rdfs:comment ?chem_name .\n    ?comp rdfs:comment ?comp_name .\n    FILTER( ?side IN ( mnx:left , mnx:right ))\n    BIND( IF( ?side = mnx:left, - ?c, ?c ) AS ?coef )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003682",
            "question": "List all GEMs currently in the MetaNetX repository, with their numbers of reactions, chemical, compartments and genes/proteins.",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\n\n# List all GEMs currently in the MetaNetX repository, with \n# their numbers of reactions, chemical, compartments and \n# genes/proteins. \n\nSELECT ?mnet ?taxon\n    (COUNT( DISTINCT ?reac) AS ?count_reac)\n    (COUNT( DISTINCT ?chem) AS ?count_chem)\n    (COUNT( DISTINCT ?comp) AS ?count_comp)\n    (COUNT( DISTINCT ?pept) AS ?count_pept)\nWHERE{\n    ?mnet a mnx:MNET .\n    ?mnet mnx:gpr  ?gpr .\n    ?gpr  mnx:reac ?reac .\n    ?reac mnx:left|mnx:right ?part .\n    ?part mnx:chem ?chem;\n          mnx:comp ?comp.\n    ?gpr mnx:cata/mnx:pept ?pept .\n    OPTIONAL{ ?mnet mnx:taxid ?taxon }\n} GROUP BY ?mnet ?taxon",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003683",
            "question": "Show the reaction equation for the tartrate/succinate antiporter (rhea:34763). NB: there are two generic compartments here.)",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Show the reaction equation for the tartrate/succinate \n# antiporter (*rh:34763*). NB: there are two generic \n# compartments here. \n\nSELECT ?chem ?chem_name ?comp ?comp_name ?coef\nWHERE{\n    ?reac mnx:reacXref rh:34763 .\n    ?reac ?side ?part .\n    ?part mnx:chem ?chem ;\n          mnx:comp ?comp ;\n          mnx:coef ?c    .\n    ?chem rdfs:comment ?chem_name .\n    ?comp rdfs:comment ?comp_name .\n    FILTER( ?side IN ( mnx:left , mnx:right ))\n    BIND( IF( ?side = mnx:left, - ?c, ?c ) AS ?coef )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003684",
            "question": "Show the reaction equation catalyzed by lactate dehydrogenase (KEGG reaction R00703). NB: Stoichiometric coefficients for substrates are given a negative value.",
            "SPARQL": "PREFIX keggR: <https://identifiers.org/kegg.reaction:>\nPREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Show the reaction equation catalyzed by lactate \n# dehydrogenase (KEGG reaction *R00703*). NB: Stoichiometric \n# coefficients for substrates are given a negative value \n\nSELECT ?chem ?chem_name ?comp ?comp_name ?coef\nWHERE{\n    ?reac mnx:reacXref keggR:R00703 .\n    ?reac ?side ?part .\n    ?part mnx:chem ?chem ;\n          mnx:comp ?comp ;\n          mnx:coef ?c    .\n    ?chem rdfs:comment ?chem_name .\n    ?comp rdfs:comment ?comp_name .\n    FILTER( ?side IN ( mnx:left , mnx:right ))\n    BIND( IF( ?side = mnx:left, - ?c, ?c ) AS ?coef )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003685",
            "question": "Retrieve the MNXref reaction identifier, that corresponds to the KEGG reaction R00703 (lactate dehydrogenase).",
            "SPARQL": "PREFIX keggR: <https://identifiers.org/kegg.reaction:>\nPREFIX mnx: <https://rdf.metanetx.org/schema/>\n\n# Retrieve the MNXref reaction identifier, that corresponds to \n# the KEGG reaction *R00703* (lactate dehydrogenase). \n\nSELECT ?reaction ?reference\nWHERE {\n    ?reaction a mnx:REAC .\n    ?reaction mnx:reacXref keggR:R00703 .\n    ?reaction mnx:reacRefer ?reference\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003686",
            "question": "List the external identifiers that correspond to the KEGG reaction R00703 (lactate dehydrogenase). This crosslinking of external identifiers is the core of MNXref",
            "SPARQL": "PREFIX keggR: <https://identifiers.org/kegg.reaction:>\nPREFIX mnx: <https://rdf.metanetx.org/schema/>\n\n# List the external identifiers that correspond to the KEGG \n# reaction *R00703* (lactate dehydrogenase). This crosslinking \n# of external identifiers is the core of MNXref. \n\nSELECT ?xref\nWHERE {\n    ?reaction a mnx:REAC .\n    ?reaction mnx:reacXref keggR:R00703 .\n    ?reaction mnx:reacXref ?xref\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003687",
            "question": "Retrieve the MNXref metabolite with name <em>N,N-dimethyl-beta-alanine</em>, together with molecular information.",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?metabolite ?label ?source ?formula ?charge ?inchi ?inchikey ?smiles\nWHERE {\n    ?metabolite a mnx:CHEM .\n    ?metabolite rdfs:label ?label .\n    ?metabolite rdfs:comment 'N,N-dimethyl-beta-alanine' .\n    ?metabolite mnx:chemSource ?source\n    OPTIONAL { ?metabolite mnx:formula  ?formula }\n    OPTIONAL { ?metabolite mnx:charge   ?charge }\n    OPTIONAL { ?metabolite mnx:inchi    ?inchi }\n    OPTIONAL { ?metabolite mnx:inchikey ?inchikey }\n    OPTIONAL { ?metabolite mnx:smiles   ?smiles }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003688",
            "question": "Retrieve the identifiers for N,N-dimethyl-beta-alanine in external databases. This crosslinking of external identifiers is the core of MNXref.",
            "SPARQL": "PREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Retrieve the identifiers for *N,N-dimethyl-beta-alanine* in \n# external databases. This crosslinking of external \n# identifiers is the core of MNXref. \n\nSELECT ?metabolite ?xref\nWHERE {\n    ?metabolite a mnx:CHEM .\n    ?metabolite rdfs:comment 'N-nitrosomethanamine' .\n    ?metabolite mnx:chemXref ?xref\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003689",
            "question": "For the KEGG compound C01732, retrieve the MNXref identifier, name and reference",
            "SPARQL": "PREFIX keggC: <https://identifiers.org/kegg.compound:>\nPREFIX mnx: <https://rdf.metanetx.org/schema/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# For the KEGG compound *C01732*, retrieve the MNXref \n# identifier, name and reference. \n\nSELECT ?metabolite ?reference ?name\nWHERE {\n    ?metabolite a mnx:CHEM .\n    ?metabolite mnx:chemRefer ?reference .\n    ?metabolite rdfs:comment ?name .\n    ?metabolite mnx:chemXref keggC:C01732\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://rdf.metanetx.org/sparql/",
            "fetchUrl": "https://rdf.metanetx.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000102"
            ]
        },
        {
            "id": "Q00003690",
            "question": "What are the anatomical entities where the APOC1 Homo sapiens gene is not expressed, that is where is APOC1 absent?",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?anat ?anatName WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label \"APOC1\" ;\n        genex:isAbsentIn ?anat ;\n        orth:organism ?organism .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?organism obo:RO_0002162  ?species .\n    ?species a up:Taxon ;\n        up:scientificName \"Homo sapiens\" .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003691",
            "question": "What are the species present in Bgee?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?species WHERE {\n    ?species a up:Taxon .\n    ?species up:rank up:Species .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003692",
            "question": "What is all the metadata related to the ENSG00000130208 gene, where ENSG00000130208 is the identifier of the APOC1 human gene.",
            "SPARQL": "PREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?symbol ?description ?id\n?links ?organism ?uniprot ?ensembl ?ncbi WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label ?symbol ;\n        rdfs:seeAlso ?links ;\n        dcterms:description ?description ;\n        dcterms:identifier ?id ;\n        orth:organism ?organism .\n    OPTIONAL{?seq lscr:xrefUniprot ?uniprot .}\n    OPTIONAL{?seq lscr:xrefEnsemblGene ?ensembl .}\n    OPTIONAL{?seq lscr:xrefNCBIGene ?ncbi .}\n    FILTER (?id = \"ENSG00000130208\")\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003693",
            "question": "What are the species present in Bgee and their scientific and common names?",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?species ?sci_name ?common_name WHERE {\n    ?species a up:Taxon ;\n        up:scientificName ?sci_name ;\n        up:rank up:Species .\n    OPTIONAL { ?species up:commonName ?common_name . }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003694",
            "question": "Which are the genes in Human associated to a disease that are orthologous to a gene expressed in the rat's brain?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT ?gene ?omaLink ?uniprot ?diseaseLabel ?annotationText WHERE {\n    SERVICE <https://www.bgee.org/sparql/> {\n        SELECT ?gene {\n            ?anat rdfs:label 'brain' .\n            ?gene genex:isExpressedIn ?anat ;\n                orth:organism/obo:RO_0002162 ?taxonRat .\n            ?taxonRat up:commonName 'rat' .\n        } LIMIT 20\n    }\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?taxonHuman up:commonName 'Human' .\n    }\n    SERVICE <https://sparql.omabrowser.org/sparql> {\n        ?cluster a orth:OrthologsCluster ;\n            orth:hasHomologousMember ?node1 ;\n            orth:hasHomologousMember ?node2 .\n        ?node2 orth:hasHomologousMember* ?protein2 .\n        ?node1 orth:hasHomologousMember* ?protein1 .\n        ?protein1 a orth:Protein ;\n            sio:SIO_010079 ?gene . # encoded by\n        ?protein2 a orth:Protein ;\n            rdfs:seeAlso ?omaLink ;\n            orth:organism/obo:RO_0002162 ?taxonHuman ;\n            lscr:xrefUniprot ?uniprot .\n        FILTER(?node1 != ?node2)\n    }\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?uniprot up:annotation ?annotation .\n        ?annotation a up:Disease_Annotation ;\n            rdfs:comment ?annotationText ;\n            up:disease ?disease .\n        ?disease skos:prefLabel ?diseaseLabel .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003695",
            "question": "Anatomical entities where the ins zebrafish gene is expressed and its gene GO annotations.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?anatomicalEntity ?goClass ?goLabel {\n    {\n        SELECT ?ensemblGene ?anatomicalEntity {\n            ?geneB a orth:Gene ;\n                genex:isExpressedIn ?anat ;\n                rdfs:label ?geneLabel ;\n                lscr:xrefEnsemblGene ?ensemblGene ;\n                orth:organism/obo:RO_0002162 ?taxon2 .\n            ?taxon2 up:commonName 'zebrafish' .\n            FILTER (UCASE(?geneLabel) = UCASE('ins'))\n            ?anat rdfs:label ?anatomicalEntity .\n        }\n    }\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?uniprot rdfs:seeAlso/up:transcribedFrom ?ensemblGene ;\n            a up:Protein ;\n            up:classifiedWith ?goClass .\n        ?goClass rdfs:label ?goLabel .\n    }\n} LIMIT 20",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003696",
            "question": "What are the anatomical entities where the APOC1 gene is expressed?",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?anat ?anatName WHERE {\n    ?seq a orth:Gene ;\n        genex:isExpressedIn ?anat ;\n        rdfs:label \"APOC1\" .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003697",
            "question": "What are the anatomical entities where the mouse gene APOC1 is expressed in the adult stages?",
            "SPARQL": "PREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?geneName ?anatName ?anat ?stageName ?stage WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label ?geneName ;\n        genex:isExpressedIn ?condition ;\n        orth:organism ?organism .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasAnatomicalEntity obo:GO_0005575 ;\n        genex:hasDevelopmentalStage ?stage .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?stage a efo:EFO_0000399 ; # developmental stage\n        rdfs:label ?stageName .\n    ?organism obo:RO_0002162 ?taxon . # in taxon\n    ?taxon a up:Taxon ;\n        up:commonName \"mouse\" .\n    FILTER (CONTAINS(LCASE(?stageName), 'adult' ))\n    FILTER (lcase(str(?geneName)) = \"apoc1\" ).\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003698",
            "question": "What are the anatomical entities where the P02654 gene is expressed? Note that P02654 is a UniProtKB identifier of the APOC1 human gene.",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?anat ?anatName WHERE {\n    ?seq a orth:Gene ;\n        genex:isExpressedIn ?anat ;\n        lscr:xrefUniprot uniprotkb:P02654 .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003699",
            "question": "What are the anatomical entities where the eel gene apoc1 is expressed along with its expression score independently of the strain, sex, and cell type?",
            "SPARQL": "PREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?anat ?anatName ?stageIRI ?score WHERE {\n    ?seq a orth:Gene ;\n        lscr:xrefNCBIGene <https://www.ncbi.nlm.nih.gov/gene/118230125> .\n        # Or dcterms:identifier \"118230125\" .\n    ?expression a genex:Expression ;\n        genex:hasExpressionCondition ?condition ;\n        genex:hasExpressionLevel ?score ;\n        genex:hasSequenceUnit ?seq .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasDevelopmentalStage ?stageIRI ;\n        genex:hasSex \"any\" ;\n        genex:hasStrain ?strain .\n    ?stageIRI a efo:EFO_0000399 .\n    ?strain a efo:EFO_0005135 ;\n        rdfs:label \"wild-type\" .\n    FILTER (?anat != obo:GO_0005575)\n} ORDER BY DESC(?score)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003700",
            "question": "What are the anatomical entities where the human gene APOC1 is expressed in the post-juvenile stage?",
            "SPARQL": "PREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?anatName ?anat ?stageName ?stage WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label \"APOC1\" ;\n        genex:isExpressedIn ?condition ;\n        orth:organism ?organism .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasAnatomicalEntity obo:GO_0005575 ;\n        genex:hasDevelopmentalStage ?stage .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?stage a efo:EFO_0000399 ;\n        rdfs:label ?stageName .\n    ?organism obo:RO_0002162  ?species .\n    ?species a up:Taxon ;\n        up:commonName \"human\" .\n    FILTER (CONTAINS(LCASE(?stageName), 'post-juvenile' ))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003701",
            "question": "What are the anatomical entities including cell types, if any, where the human gene APOC1 is expressed at the post-juvenile stage along with its expression score independently of the strain and sex?",
            "SPARQL": "PREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?anat ?cellType ?anatName ?cellTypeName ?score ?stage WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label \"APOC1\" ;\n        orth:organism ?organism .\n    ?expression a genex:Expression ;\n        genex:hasExpressionCondition ?condition ;\n        genex:hasExpressionLevel ?score ;\n        genex:hasSequenceUnit ?seq .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasAnatomicalEntity ?cellType ;\n        genex:hasDevelopmentalStage ?stage .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?cellType rdfs:label ?cellTypeName .\n    ?stage a efo:EFO_0000399 ;\n        rdfs:label \"post-juvenile\" .\n    ?organism obo:RO_0002162  ?species .\n    ?species a up:Taxon ;\n        up:commonName \"human\" .\n    FILTER (?anat !=  obo:GO_0005575)\n    FILTER (?anat != ?cellType)\n} ORDER BY DESC(?score)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003702",
            "question": "What are the anatomical entities where the APOC1 Homo sapiens gene is expressed?",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?geneName ?anat ?anatName WHERE {\n    ?seq a orth:Gene ;\n        genex:isExpressedIn ?anat ;\n        rdfs:label ?geneName .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?seq orth:organism ?organism .\n    ?organism obo:RO_0002162  ?species .\n    ?species a up:Taxon ;\n        up:scientificName \"Homo sapiens\" .\n    FILTER (LCASE(?geneName) = LCASE('APOC1') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003703",
            "question": "What are the anatomical entities where the APOC1 gene is expressed independently of the developmental stage, sex, strain and cell type?",
            "SPARQL": "PREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?anat ?anatName {\n    ?seq a orth:Gene ;\n        genex:isExpressedIn ?condition ;\n        rdfs:label \"APOC1\" .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasAnatomicalEntity obo:GO_0005575 ;\n        genex:hasDevelopmentalStage ?stage ;\n        genex:hasSex \"any\" ;\n        genex:hasStrain ?strain .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?stage a efo:EFO_0000399 ;\n        rdfs:label \"life cycle\" .\n    ?strain rdfs:label \"wild-type\" .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003704",
            "question": "What are the developmental stages present in Bgee?",
            "SPARQL": "PREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?stage ?stageName ?stageDescription WHERE {\n    ?stage a efo:EFO_0000399 ;\n        rdfs:label ?stageName ;\n        dcterms:description ?stageDescription .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003705",
            "question": "What are the anatomical entities where the human gene APOC1 is expressed at the post-juvenile stage along with its expression score independently of the strain, sex, and cell type?",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?anat ?anatName ?score ?stage WHERE {\n    ?seq a orth:Gene ;\n        rdfs:label \"APOC1\" ;\n        orth:organism ?organism .\n    ?expression a genex:Expression ;\n        genex:hasExpressionCondition ?condition ;\n        genex:hasExpressionLevel ?score ;\n        genex:hasSequenceUnit ?seq .\n    ?condition a genex:ExpressionCondition ;\n        genex:hasAnatomicalEntity ?anat ;\n        genex:hasAnatomicalEntity obo:GO_0005575 ;\n        genex:hasDevelopmentalStage ?stage ;\n        genex:hasSex \"any\" ;\n        genex:hasStrain ?strain .\n    ?anat a genex:AnatomicalEntity ;\n        rdfs:label ?anatName .\n    ?stage rdfs:label ?stageName .\n    ?strain rdfs:label \"wild-type\" .\n    ?organism obo:RO_0002162  ?species .\n    ?species a up:Taxon ;\n        up:commonName \"human\" .\n    FILTER (?anat !=  obo:GO_0005575)\n    FILTER (CONTAINS(LCASE(?stageName), 'post-juvenile' ))\n} ORDER BY DESC(?score)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003706",
            "question": "Which are the genes in Primates orthologous to a gene that is expressed in the fruit fly's eye?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT DISTINCT ?flyEnsemblGene ?orthologTaxon ?orthologEnsemblGene ?orthologOmaLink WHERE {\n\t{\n        SELECT DISTINCT ?gene ?flyEnsemblGene {\n        ?gene a orth:Gene ;\n            genex:isExpressedIn/rdfs:label 'eye' ;\n            orth:organism/obo:RO_0002162 ?taxon ;\n            dcterms:identifier ?flyEnsemblGene .\n        ?taxon up:commonName 'fruit fly' .\n        } LIMIT 100\n    }\n    SERVICE <https://sparql.omabrowser.org/sparql/> {\n        ?protein2 a orth:Protein .\n        ?protein1 a orth:Protein .\n        ?clusterPrimates a orth:OrthologsCluster .\n        ?cluster a orth:OrthologsCluster ;\n            orth:hasHomologousMember ?node1 ;\n            orth:hasHomologousMember ?node2 .\n        ?node1 orth:hasHomologousMember* ?protein1 .\n        ?node2 orth:hasHomologousMember* ?clusterPrimates .\n        ?clusterPrimates orth:hasHomologousMember* ?protein2 .\n        ?protein1 sio:SIO_010079 ?gene . # is encoded by\n        ?protein2 rdfs:seeAlso ?orthologOmaLink ;\n            orth:organism/obo:RO_0002162 ?orthologTaxonUri ;\n            sio:SIO_010079 ?orthologGene . # is encoded by\n        ?clusterPrimates orth:hasTaxonomicRange ?taxRange .\n        ?taxRange orth:taxRange 'Primates' .\n        FILTER ( ?node1 != ?node2 )\n    }\n    ?orthologTaxonUri up:commonName ?orthologTaxon .\n    ?orthologGene dcterms:identifier ?orthologEnsemblGene .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003707",
            "question": "Which species the Mt-co1 gene is present (without considering synonyms)?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT ?name\nWHERE {\n    ?gene a orth:Gene ;\n        rdfs:label ?geneName ;\n        orth:organism ?organism .\n    ?organism obo:RO_0002162 ?taxon . # in taxon\n    ?taxon up:scientificName ?name .\n    FILTER ( UCASE(?geneName) = UCASE('Mt-co1') )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003708",
            "question": "Human anatomical entities at young adult developmental stage",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?anatomicalEntity ?stageName {\n    ?condition genex:hasAnatomicalEntity ?anatEntity ;\n        genex:hasDevelopmentalStage ?stage ;\n        obo:RO_0002162/up:commonName ?commonName .\n    ?anatEntity rdfs:label ?anatomicalEntity .\n    ?stage rdfs:label ?stageName .\n    FILTER ( lcase(?commonName) = \"human\" ).\n    FILTER ( CONTAINS(lcase(?stageName), \"young adult\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003709",
            "question": "List the labels and identifiers of pig-tailed macaque genes in bgee",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?geneId ?geneName\nWHERE {\n    ?gene a orth:Gene ;\n        dcterms:identifier ?geneId ;\n        orth:organism/obo:RO_0002162/up:commonName ?commonName .\n    OPTIONAL { ?gene rdfs:label ?geneName .}\n    FILTER ( LCASE(?commonName) = \"pig-tailed macaque\" ) .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003710",
            "question": "What is the post-juvenile stage link and description?",
            "SPARQL": "PREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX efo: <http://www.ebi.ac.uk/efo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?stage ?stageName ?stageDescription WHERE {\n    ?stage a efo:EFO_0000399 ;\n        rdfs:label ?stageName ;\n        dcterms:description ?stageDescription .\n    FILTER(CONTAINS(LCASE(?stageName), \"post-juvenile\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003711",
            "question": "Which are the orthologs of a gene that is expressed in the fruit fly's brain?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT DISTINCT ?geneEnsembl ?proteinOrtholog ?geneOrthologEnsembl ?taxonOrtholog ?omaLinkOrtholog WHERE {\n    {\n        SELECT DISTINCT * {\n            ?gene a orth:Gene ;\n                genex:isExpressedIn/rdfs:label 'brain' ;\n                orth:organism/obo:RO_0002162 ?taxonFly ;\n                dcterms:identifier ?geneEnsembl .\n            ?taxonFly up:commonName 'fruit fly' .\n        } LIMIT 20\n    }\n\n    SERVICE <https://sparql.omabrowser.org/sparql> {\n        ?cluster a orth:OrthologsCluster ;\n            orth:hasHomologousMember ?node1 ;\n            orth:hasHomologousMember ?node2 .\n        ?node1 orth:hasHomologousMember* ?protein1 .\n        ?node2 orth:hasHomologousMember* ?proteinOrtholog .\n        ?protein1 sio:SIO_010079 ?gene . # is encoded by\n        ?proteinOrtholog rdfs:seeAlso ?omaLinkOrtholog ;\n            orth:organism/obo:RO_0002162 ?taxonOrthologUri ;\n            sio:SIO_010079 ?geneOrtholog . # is encoded by\n        FILTER ( ?node1 != ?node2 )\n    }\n    ?taxonOrthologUri up:commonName ?taxonOrtholog .\n    ?geneOrtholog dcterms:identifier ?geneOrthologEnsembl .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003712",
            "question": "Which are the mouse's proteins encoded by genes which are expressed in the liver and are orthologous to human's INS gene?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\n\nSELECT ?humanProtein ?mouseProtein ?mouseOmaLink {\n    SERVICE <https://www.bgee.org/sparql/> {\n        ?humanTaxon up:commonName 'human' .\n        ?mouseTaxon up:commonName 'mouse' .\n    }\n    SERVICE <https://sparql.omabrowser.org/sparql/> {\n        ?cluster a orth:OrthologsCluster ;\n            orth:hasHomologousMember ?node1 ;\n            orth:hasHomologousMember ?node2 .\n        ?node2 orth:hasHomologousMember* ?mouseProtein .\n        ?node1 orth:hasHomologousMember* ?humanProtein .\n        ?humanProtein a orth:Protein ;\n            rdfs:label 'INS' ;\n            orth:organism/obo:RO_0002162 ?humanTaxon .\n        ?mouseProtein a orth:Protein ;\n            sio:SIO_010079 ?mouseGene ; # is encoded by\n            orth:organism/obo:RO_0002162 ?mouseTaxon ;\n            rdfs:seeAlso ?mouseOmaLink .\n        ?mouseGene lscr:xrefEnsemblGene ?mouseGeneEnsembl .\n        FILTER ( ?node1 != ?node2 )\n    }\n    SERVICE <https://www.bgee.org/sparql/> {\n        ?mouseGeneBgee a orth:Gene ;\n            lscr:xrefEnsemblGene ?mouseGeneEnsembl ;\n            genex:isExpressedIn ?cond ;\n            orth:organism/obo:RO_0002162 ?mouseTaxon .\n        ?cond genex:hasAnatomicalEntity/rdfs:label 'liver' .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003713",
            "question": "Human anatomic entities at young adult developmental stage",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?anatomicalEntity ?stageName {\n    ?condition genex:hasAnatomicalEntity ?anatEntity ;\n        genex:hasDevelopmentalStage ?stage ;\n        obo:RO_0002162/up:commonName ?commonName .\n    ?anatEntity rdfs:label ?anatomicalEntity .\n    ?stage rdfs:label ?stageName .\n    FILTER( LCASE(?commonName) = \"human\" )\n    FILTER( CONTAINS(LCASE(?stageName), \"young adult\") )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://www.bgee.org/sparql/",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$&format=application%2Fsparql-results%2Bjson$$",
            "vars": [],
            "parentIds": [
                "C00000101"
            ]
        },
        {
            "id": "Q00003714",
            "question": "Among the SIRIUS structural annotations from Tabernaemontana coffeoides (Apocynaceae) seeds extract, which ones are reported in the Tabernaemontana genus?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX pr: <http://www.wikidata.org/prop/reference/>\n\nSELECT DISTINCT ?ik2d ?genus\nWHERE\n    {\n    ?material sosa:hasSample ?extract ;\n        sosa:isSampleOf ?organe .\n    ?organe emi:inTaxon ?wd_sp .\n    ?wd_sp rdfs:label \"tabernaemontana coffeoides\" .\n    ?extract sosa:isFeatureOfInterestOf ?lcms .\n    ?lcms sosa:hasResult ?feature_list .\n    ?feature_list emi:hasLCMSFeature ?feature .\n    ?feature emi:hasAnnotation ?sirius_annotation .\n    ?sirius_annotation a emi:StructuralAnnotation ;\n        prov:wasGeneratedBy ?activity ;\n        emi:hasChemicalStructure ?ik2d .\n    ?activity prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n    ?ik2d emi:hasSMILES ?smiles ;\n        emi:isInChIKey2DOf ?ik .\n    ?ik emi:isInChIKeyOf ?wd_id .\n\t{\n        SELECT DISTINCT ?wd_id ?genus WHERE {\n            ?material sosa:hasSample ?extract ;\n                sosa:isSampleOf ?organe .\n            ?organe emi:inTaxon ?wd_sp .\n            ?wd_sp rdfs:label \"tabernaemontana coffeoides\" .\n            OPTIONAL {\n                SERVICE <https://query.wikidata.org/sparql> {\n                    ?wd_sp wdt:P225 ?species_name .\n                    ?genus wdt:P31 wd:Q16521 ;\n                        wdt:P105 wd:Q34740 ;\n                        ^wdt:P171* ?wd_sp .\n                    ?childtaxa wdt:P171* ?genus .\n                    ?wd_id wdt:P703 ?childtaxa\n                }\n            }\n        }\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003715",
            "question": "Among the structural annotations from Tabernaemontana coffeoides (Apocynaceae) seeds extract, which ones contain an aspidospermidine substructure?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX enpkg: <https://enpkg.commons-lab.org/kg/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT DISTINCT ?ik2d ?smiles\nWHERE {\n    ?extract a emi:ExtractSample ;\n        sosa:isSampleOf* ?organe .\n    ?organe emi:inTaxon ?taxon .\n    ?taxon rdfs:label \"tabernaemontana coffeoides\" .\n    ?extract sosa:isFeatureOfInterestOf ?lcms .\n    ?lcms sosa:hasResult ?feature_list .\n    ?feature_list emi:hasLCMSFeature ?feature .\n    ?feature emi:hasAnnotation ?annotation .\n    ?annotation emi:hasChemicalStructure ?ik2d .\n    ?ik2d a emi:InChIKey2D ;\n        emi:hasSMILES ?smiles ;\n        emi:isInChIKey2DOf ?ik .\n    ?ik emi:isInChIKeyOf ?wd_id .\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/wikidata> {\n        SELECT * WHERE {\n            ?wd_id sachem:substructureSearch [\n                sachem:query \"CCC12CCCN3C1C4(CC3)C(CC2)NC5=CC=CC=C45\" # Aspidospermidine scaffold\n            ] .\n        }\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003716",
            "question": "Filter the positive ionization mode features of Melochia umbellate annotated as [M+H]+ by SIRIUS to keep the ones for which a feature in negative ionization mode is detected with the same retention time (� 3 seconds) and a mass corresponding to the [M-H]- adduct (� 5 ppm).",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT DISTINCT ?feature ?rt ?pm ?feature_opp ?rt_opp ?pm_opp\nWHERE {\n    VALUES ?ppm {\n        \"5\"^^xsd:decimal # m/z tolerance\n    }\n    VALUES ?rt_tol {\n        \"0.05\"^^xsd:decimal # RT tolerance (minute)\n    }\n    ?sample a emi:ExtractSample ;\n        sosa:isSampleOf* ?organe .\n    ?organe emi:inTaxon ?taxon .\n    ?taxon rdfs:label \"melochia umbellata\" .\n    ?sample sosa:isFeatureOfInterestOf ?lcms .\n    ?lcms a emi:LCMSAnalysisPos ;\n        sosa:hasResult ?feature_list .\n    ?feature_list emi:hasLCMSFeature ?feature .\n    ?feature emi:hasParentMass ?pm ;\n        emi:hasRetentionTime ?rt ;\n        emi:hasAnnotation ?sirius .\n\t?sirius a emi:StructuralAnnotation ;\n        prov:wasGeneratedBy ?activiy .\n    ?activiy prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n    ?sirius emi:hasAdduct ?adduct .\n    FILTER(regex(str(?adduct), \"[M+H]+\"))\n    ?sample sosa:isFeatureOfInterestOf ?lcms_opp .\n    ?lcms_opp a emi:LCMSAnalysisNeg ;\n        sosa:hasResult ?feature_list_opp .\n    ?feature_list_opp emi:hasLCMSFeature ?feature_opp .\n\t?feature_opp emi:hasParentMass ?pm_opp ;\n        emi:hasRetentionTime ?rt_opp .\n    FILTER(((?rt - ?rt_tol) < ?rt_opp) && ((?rt + ?rt_tol) > ?rt_opp))\n    FILTER((?pm_opp > ((?pm - 2.014) - ((?ppm * 0.000001) * (?pm - 2.014)))) && (?pm_opp < ((?pm - 2.014) + ((?ppm * 0.000001) * (?pm - 2.014)))))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003717",
            "question": "Show chemical structures in Melochia umbellata extracts with structural annotations where the cosmic score is greater than 0.5 and the zodiac score is less than 0.8. For ISDB annotations, consider taxon scores less than 6",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT DISTINCT ?ik ?wd_id ?taxon ?taxon_name\nWHERE {\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wd_id wdt:P31 wd:Q113145171 ;\n            wdt:P703 ?taxon .\n        ?taxon wdt:P225 ?taxon_name .\n    }\n    {\n        SELECT DISTINCT ?ik ?chemblid ?name ?type ?value ?wd_id\n        WHERE {\n            ?sample a emi:ExtractSample ;\n                sosa:isSampleOf* ?organe ;\n                sosa:isFeatureOfInterestOf ?lcms .\n            ?organe emi:inTaxon ?taxon .\n            ?taxon rdfs:label \"melochia umbellata\" .\n            ?lcms a emi:LCMSAnalysisPos ;\n                sosa:hasResult ?feature_list .\n            ?feature_list emi:hasLCMSFeature ?feature .\n            {\n                ?feature emi:hasAnnotation ?annotation .\n                ?annotation a emi:StructuralAnnotation ;\n                    prov:wasGeneratedBy ?activity .\n                ?activity prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n                ?annotation emi:hasCosmicScore ?cosmic ;\n                    emi:hasZodiacScore ?zodiac .\n                FILTER((?cosmic > 0.5) && (?zodiac > 0.8))\n            } UNION {\n                ?feature emi:hasAnnotation ?annotation .\n                ?annotation emi:hasTaxoScore ?taxo .\n                FILTER(?taxo >= 6)\n            }\n            ?annotation emi:hasChemicalStructure ?ik2d .\n            ?ik2d emi:hasSMILES ?smiles ;\n                emi:isInChIKey2DOf ?ik .\n            ?ik emi:isInChIKeyOf ?wd_id .\n        }\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003718",
            "question": "Search spectrally related features with and within the VGF151_E05 sample of a datura stramonium through counts of common peaks and loss. Return their species, family and genus names",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT ?family_name ?genus_name ?species_name ?wd_sp ?feature ?sub_rt ?sub_parent_mass ?count\nWHERE {\n    # Subquery to get the top N hits with their Wikidata IDs\n    {\n        SELECT ?wd_sp ?feature (SAMPLE(?rt) AS ?sub_rt) (SAMPLE(?parent_mass) AS ?sub_parent_mass) (COUNT(?peakloss) AS ?count)\n        WHERE {\n            ?material sosa:hasSample ?extract ;\n                sosa:isSampleOf* ?organism.\n            ?organism emi:inTaxon ?wd_sp .\n            ?extract a emi:ExtractSample ;\n                sosa:isFeatureOfInterestOf ?lcms .\n            ?lcms a emi:LCMSAnalysisPos ;\n                sosa:hasResult ?feature_list .\n            ?feature_list emi:hasLCMSFeature ?feature .\n            ?feature a emi:LCMSFeature ;\n                emi:hasSpec2VecDoc ?doc ;\n                emi:hasParentMass ?parent_mass ;\n                emi:hasRetentionTime ?rt .\n            ?doc emi:hasSpec2VecLoss|emi:hasSpec2VecPeak ?peakloss .\n\n            {\n                SELECT ?peakloss WHERE {\n                    ?lcms a emi:LCMSAnalysisPos ;\n                        sosa:hasResult ?feature_list ;\n                        sosa:hasFeatureOfInterest ?sample .\n                    ?sample dcterms:identifier \"VGF151_E05\" ;\n                        sosa:isSampleOf* ?organism .\n                    ?organism emi:inTaxon/rdfs:label \"datura stramonium\".\n                    ?feature_list emi:hasLCMSFeature ?feature .\n                    ?feature a emi:LCMSFeature ;\n                        emi:hasSpec2VecDoc ?doc .\n                    ?doc emi:hasSpec2VecLoss|emi:hasSpec2VecPeak ?peakloss .\n                }\n            }\n        }\n        GROUP BY ?wd_sp ?feature\n        ORDER BY DESC(?count)\n        LIMIT 5\n    }\n\n    # Outer query to fetch species names from Wikidata\n    # Fetching taxonomic information from Wikidata\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wd_sp wdt:P225 ?species_name .\n        OPTIONAL {\n            ?family wdt:P31 wd:Q16521 ;\n                wdt:P105 wd:Q35409 ;\n                wdt:P225 ?family_name ;\n                ^wdt:P171* ?wd_sp .\n        }\n        OPTIONAL {\n            ?genus wdt:P31 wd:Q16521 ;\n                wdt:P105 wd:Q34740 ;\n                wdt:P225 ?genus_name ;\n                ^wdt:P171* ?wd_sp .\n        }\n    }\n} GROUP BY ?family_name ?genus_name ?species_name ?wd_sp ?feature ?sub_rt ?sub_parent_mass ?count\nORDER BY DESC(?count)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003719",
            "question": "For features from Melochia umbellata in positive ionization mode with SIRIUS annotations, get the ones for which a feature in negative ionization mode with the same retention time (� 3 sec) has the same SIRIUS annotation (2D InChIKey).",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT DISTINCT ?feature ?feature_opp ?ik2d ?rt ?rt_opp\nWHERE {\n    VALUES ?rt_tol {\n        \"0.05\"^^xsd:decimal # RT tolerance (minute)\n    }\n    ?sample a emi:ExtractSample ;\n        sosa:isSampleOf* ?organe .\n    ?organe emi:inTaxon ?taxon .\n    ?taxon rdfs:label \"melochia umbellata\" .\n    ?sample sosa:isFeatureOfInterestOf ?lcms .\n    ?lcms a emi:LCMSAnalysisPos ;\n        sosa:hasResult ?feature_list .\n    ?feature_list emi:hasLCMSFeature ?feature .\n    ?feature emi:hasRetentionTime ?rt ;\n        emi:hasAnnotation ?sirius .\n    ?sirius a emi:StructuralAnnotation ;\n        prov:wasGeneratedBy ?activity .\n    ?activity prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n    ?sirius emi:hasChemicalStructure ?ik2d .\n    ?sample sosa:isFeatureOfInterestOf ?lcms_opp .\n    ?lcms_opp a emi:LCMSAnalysisNeg ;\n        sosa:hasResult ?feature_list_opp .\n    ?feature_list_opp emi:hasLCMSFeature ?feature_opp .\n    ?feature_opp emi:hasRetentionTime ?rt_opp ;\n        emi:hasAnnotation ?sirius_opp .\n    ?sirius_opp a emi:StructuralAnnotation ;\n        prov:wasGeneratedBy ?activity_opp ;\n        emi:hasChemicalStructure ?ik2d .\n    ?activity_opp prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n    FILTER(((?rt - ?rt_tol) < ?rt_opp) && ((?rt + ?rt_tol) > ?rt_opp))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003720",
            "question": "How many features have the same SIRIUS and ISDB annotation?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX enpkg: <https://enpkg.commons-lab.org/kg/>\nPREFIX emi: <https://purl.org/emi#>\n\nSELECT (COUNT(?feature) AS ?count)\nWHERE {\n        ?lcms emi:hasMassiveDOI ?massive_doi ;\n            emi:hasLCMSFeatureSet ?feature_list .\n        # FILTER(regex(str(?massive_doi), \"MSV000087728\")) # MassIVE id filter, MSV000087728 is pf1600, MSV000093464 is 337 Korean medicinal plants, if you want to query both you can pipe \"MSV000087728|MSV000093464\". You can apply or not these filters by ucommenting/commenting this line.\n        ?feature_list emi:hasLCMSFeature ?feature .\n        ?feature emi:hasAnnotation ?sirius_annotation .\n        ?sirius_annotation a emi:StructuralAnnotation ;\n            prov:wasGeneratedBy ?activity ;\n            emi:hasChemicalStructure ?sirius_ik2d .\n        ?activity prov:wasAssociatedWith <https://bio.informatik.uni-jena.de/software/sirius> .\n        ?feature emi:hasAnnotation ?isdb_annotation .\n        ?activity_isdb prov:wasAssociatedWith <https://oolonek.github.io/ISDB> .\n        ?isdb_annotation a emi:StructuralAnnotation ;\n            prov:wasGeneratedBy ?activity_isdb ;\n            emi:hasChemicalStructure ?isdb_ik2d .\n    FILTER(?isdb_ik2d = ?sirius_ik2d) .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003721",
            "question": "Which features in the positive ionization mode have the most fragments and neutral losses in common with the feature identified as mzspec:MSV000087728:VGF143_H08_features_ms2_pos.mgf:scan:707",
            "SPARQL": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT ?feature ?massive_doi (SAMPLE(?rt) AS ?retention_time) (SAMPLE(?pm) AS ?parent_mass) (COUNT(?peakloss) AS ?count)\nWHERE {\n    ?lcms a emi:LCMSAnalysisPos ;\n        emi:hasMassiveDOI ?massive_doi ;\n        sosa:hasResult ?feature_list .\n    #FILTER(regex(str(?massive_doi), \"MSV000087728\")) # MassIVE id filter\n    ?feature_list emi:hasLCMSFeature ?feature .\n    ?feature a emi:LCMSFeature ;\n        emi:hasSpec2VecDoc ?doc ;\n        emi:hasParentMass ?pm ;\n        emi:hasRetentionTime ?rt .\n    ?doc emi:hasSpec2VecLoss|emi:hasSpec2VecPeak ?peakloss .\n\n    {\n        SELECT ?peakloss WHERE {\n            ?feature a emi:LCMSFeature ;\n                emi:hasUSI \"mzspec:MSV000087728:VGF143_H08_features_ms2_pos.mgf:scan:707\" ;\n                emi:hasSpec2VecDoc ?doc .\n            ?doc emi:hasSpec2VecLoss|emi:hasSpec2VecPeak ?peakloss .\n        }\n    }\n} GROUP BY ?feature ?massive_doi ORDER BY DESC(?count)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003722",
            "question": "Which samples have features annotated as Aspidosperma_type alkaloids by CANOPUS with a probability score above 0.5, ordered by the decreasing count of features?",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX emi: <https://purl.org/emi#>\nPREFIX sosa: <http://www.w3.org/ns/sosa/>\n\nSELECT ?extract ?organe ?species_name ?genus_name ?family_name ?count_of_selected_class\nWHERE {\n    ?material sosa:hasSample ?extract ;\n        sosa:isSampleOf ?organe .\n    ?organe emi:inTaxon ?wd_sp .\n    OPTIONAL {\n        SERVICE <https://query.wikidata.org/sparql> {\n            ?wd_sp wdt:P225 ?species_name .\n            ?family wdt:P31 wd:Q16521 ;\n                wdt:P105 wd:Q35409 ;\n                wdt:P225 ?family_name ;\n                ^wdt:P171* ?wd_sp .\n            ?genus wdt:P31 wd:Q16521 ;\n                wdt:P105 wd:Q34740 ;\n                wdt:P225 ?genus_name ;\n                ^wdt:P171* ?wd_sp .\n        }\n    }\n    {\n        SELECT ?extract (COUNT(DISTINCT ?feature) AS ?count_of_selected_class)\n        WHERE {\n            ?extract a emi:ExtractSample ;\n                sosa:isFeatureOfInterestOf ?lcms .\n            ?lcms a emi:LCMSAnalysis ;\n                emi:hasLCMSFeatureSet ?feature_list .\n            ?feature_list emi:hasLCMSFeature ?feature .\n            ?feature emi:hasAnnotation ?canopus .\n            ?canopus a emi:ChemicalTaxonAnnotation ;\n                emi:hasClass ?np_class ;\n                emi:hasClassProbability ?class_prob .\n            ?np_class rdfs:label \"Aspidosperma type\" .\n            FILTER((?class_prob > 0.5)) .\n        } GROUP BY ?extract ORDER BY DESC(?count_of_selected_class)\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi",
            "fetchUrl": "https://biosoda.unil.ch/graphdb/repositories/emi-dbgi?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000110"
            ]
        },
        {
            "id": "Q00003723",
            "question": "For a given list of LIPID MAPS identifiers return the list of corresponding ChEBI IDs. Output should include LIPID MAPS ID, the corresponding SwissLipids ID and name, plus the ChEBI ID.  This query first identifies SwissLipids identifiers for a given list of HMDB identifiers. It then retrieves all children  and from them the required LIPID MAPS identifiers.  extends ex:9",
            "SPARQL": "PREFIX lipidmaps: <https://www.lipidmaps.org/rdf/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 14\nSELECT ?lipidmaps ?slm ?slmName ?chebi\nWHERE {\n  #VALUES ?lipidmaps {lipidmaps:LMSP01020001 lipidmaps:LMST01010069 lipidmaps:LMST04030222}\n  ?slm rdfs:label ?slmName . \n  # Corresponding SwissLipids entries\n  ?slm rdfs:seeAlso ?lipidmaps .\n  FILTER regex(str(?lipidmaps), \"lipidmaps\") .\n\n  # Hierarchical search\n  #?children rdfs:subClassOf* ?slm .\n  #?children rdfs:label ?name .\n  # Corresponding ChEBI entries\n  ?slm owl:equivalentClass ?chebi .\n}\nORDER BY ?lipidmaps ?slm ?chebi",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003724",
            "question": "For a given list of LipidX lipid identifiers return the list of published Isomeric subspecies. Output should include the LipidX ID and the corresponding SwissLipids ID(s) and name(s) plus PubMed ID(s).  This query first identifies SwissLipids identifiers for a given list of LipidX identifiers. It then retrieves the corresponding Isomeric subspecies that are linked to at least one publication, and the corresponding PMIDs.  extends ex:15",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n    ?swisslipid\n    ?lipidx\n    ?isomericsubSwisslipid\n    ?pubmed\nWHERE {\n    VALUES ?hmdb {'HMDB00269' 'MDB00032'}\n    BIND (IRI(CONCAT('http://identifiers.org/lipidx/', ?lipidx)) AS ?lipidxIRI)\n    ?swisslipid rdfs:seeAlso ?lipidxIRI .\n    ?swisslipid rdfs:subClassOf ?isomericsubSwisslipid .\n    ?isomericsubSwisslipid SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies .\n    ?isomericsubSwisslipid SWISSLIPID:citation ?pubmed .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003725",
            "question": "For a given list of HMDB identifiers return the list of corresponding SwissLipids identifiers. Output should include SwissLipids identifier and name plus the HMDB identifier.  This query considers only the cross references in the SwissLipids entry – it does not attempt to query other levels to find links between parents or children. Recapitulates one ID mapping function on the website.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 11\nprefix HMDB:<http://identifiers.org/hmdb/>\nSELECT ?hmdb ?slm ?slmName \nWHERE {\n  VALUES ?hmdb {HMDB:HMDB00269 HMDB:HMDB00032 HMDB:HMDB01383}\n  ?slm rdfs:label ?slmName . \n  # Corresponding SwissLipids entries\n  ?slm rdfs:seeAlso ?hmdb .\n}\nORDER BY ?hmdb",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003726",
            "question": "Retrieve mapping between SwissLipids lipid identifiers and their corresponding HMDB identifiers. Output should include SwissLipids identifier and name plus the HMDB identifier.  ",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 10\nSELECT ?slm ?slmName ?hmdb\nWHERE {\n  ?slm rdfs:label ?slmName . \n  # Corresponding HMDB entries\n  ?slm rdfs:seeAlso ?hmdb .\n  FILTER regex(str(?hmdb), \"hmdb\") .\n}\nORDER BY ?slm",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003727",
            "question": "Returns the list of isomeric subspecies that contain the same fatty acid component(s) at the same position(s) as a user-defined lipid, but limits the output to published lipids linked to a PMID. Output should include the corresponding SwissLipids ID(s) and name(s) and the PMID(s) for each. ?Extends ex:36 Output should include the corresponding SwissLipids ID(s) and name(s).",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 38\nSELECT ?startId ?startName ?tail1 ?tailName1 ?tail2 ?tailName2 ?id ?name ?pubmed\nWHERE {\n  VALUES ?startId { SWISSLIPID:000121946 }\n  ?startId rdfs:label ?startName .\n  # tail components\n  ?startId SWISSLIPID:haspart ?tail1 .\n  ?startId SWISSLIPID:haspart ?tail2 .\n  FILTER(!sameTerm(?tail1, ?tail2))\n  ?tail1 rdfs:label ?tailName1 .\n  ?tail2 rdfs:label ?tailName2 .\n\n  # Retrieve lipids with similar tails\n  ?id SWISSLIPID:haspart ?tail1 , \n                  ?tail2 .\n  \n  # Restrict to isomeric subspecies with PubMed citation(s)\n  ?id SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies .\n  ?id SWISSLIPID:citation ?pubmed .\n\n  # Retrieve name\n  ?id rdfs:label ?name .\n}\nORDER BY ?id ?tail1 ?tail2",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003728",
            "question": "Retrieve mapping between SwissLipids lipid identifiers and their corresponding ChEBI identifiers. Output should include SwissLipids identifier and name plus the ChEBI identifier.",
            "SPARQL": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 12\nSELECT ?slm ?slmName ?chebi\nWHERE {\n  ?slm rdfs:label ?slmName . \n  # Corresponding ChEBI entries\n  ?slm owl:equivalentClass ?chebi .\n}\nORDER BY ?slm",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003729",
            "question": "For a given list of ChEBI identifiers return the list of corresponding SwissLipids identifiers. Output should include SwissLipids identifier and name plus the HMDB identifier.  This query considers only the cross references in the SwissLipids entry – it does not attempt to query other levels to find links between parents or children. Recapitulates one ID mapping function on the website.",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 13\nSELECT ?chebi ?slm ?slmName \nWHERE {\n  VALUES ?chebi {CHEBI:70846 CHEBI:70771 CHEBI:70829}\n  ?slm rdfs:label ?slmName . \n  # Corresponding SwissLipids entries\n  ?slm owl:equivalentClass ?chebi .\n}\nORDER BY ?chebi",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003730",
            "question": "Retrieve mapping between SwissLipids lipid identifiers and their corresponding LIPID MAPS identifiers. Output should include SwissLipids identifier and name plus the LIPID MAPS identifier.  ",
            "SPARQL": "PREFIX lipidmaps: <https://www.lipidmaps.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 8\nSELECT ?slm ?slmName ?lipidmaps\nWHERE {\n  ?slm rdfs:label ?slmName . \n  # Corresponding LIPID MAPS\n  ?slm rdfs:seeAlso ?lipidmaps .\n  FILTER (strstarts(str(?lipidmaps), str(lipidmaps:))) .\n}\nORDER BY ?slm",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003731",
            "question": "For a given list of LIPID MAPS identifiers return the list of corresponding SwissLipids identifiers. Output should include SwissLipids identifier and name plus the LIPID MAPS identifier.  This query considers only the cross references in the SwissLipids entry – it does not attempt to query other levels to find links between parents or children. Recapitulates one ID mapping function on the website ",
            "SPARQL": "PREFIX lipidmaps: <https://www.lipidmaps.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 9\nSELECT ?lipidmaps ?slm ?slmName \nWHERE {\n  VALUES ?lipidmaps {lipidmaps:LMSP01020001 lipidmaps:LMST01010069 lipidmaps:LMST04030222}\n  ?slm rdfs:label ?slmName . \n  # Corresponding SwissLipds entries\n  ?slm rdfs:seeAlso ?lipidmaps .\n}\nORDER BY ?lipidmaps",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003732",
            "question": "For a given list of lipid Species, return a list of the corresponding Isomeric subspecies for that particular lipid that are linked to an enzyme as annotated in UniProtKB (UniProt AC and recommended name). This question would allow a user with (a list of) very high level MS identifications to immediately narrow them to the most likely potential lipid structures and protein targets as in this example: SWISSLIPID:000056871 / PC(O-36:4) (target species of interest) -> SWISSLIPID:000028143 / PC(O-16:0/20:4(5Z,8Z,11Z,14Z)) -> LPCAT4, PLA2G4A, PLA2G4C, PLA2G4F (target proteins)",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 7\nSELECT ?startId ?startLabel ?id ?name \nWHERE {\n  # Queried lipid species\n  VALUES ?startId { SWISSLIPID:000056871 }\n  ?startId rdfs:label ?startLabel . \n  # Corresponding Isomeric subspecies\n  ?id rdfs:subClassOf+ ?startId .  \n  ?id SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecie ;\n\t  rdfs:label ?name .\n  # Mapped ChEBI\n  ?id owl:equivalentClass ?chebi .  \n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003733",
            "question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name). This query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003734",
            "question": "For a given (list of) lipid classes (e.g. SWISSLIPID:000399814 (Ceramide) SWISSLIPID:000000007 (Sphingomyelin (iso-d17:1(4E))), return a list of the corresponding Isomeric subspecies.  The query should return the lipid recommended names (?name) as well as identifiers (?id). Recapitulates the “browse lipid classes” function of the website (in batch).",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 4\nSELECT ?startId ?startName ?id ?name\nWHERE\n{\n  VALUES ?startId { SWISSLIPID:000399814 SWISSLIPID:000000567}\n  ?startId SWISSLIPID:rank SWISSLIPID:Class .\n  ?startId rdfs:label ?startName .\n  ?id rdfs:subClassOf+ ?startId .\n  ?id SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies ;\n\t  rdfs:label ?name .    \n} \nORDER BY ?startId",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003735",
            "question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation). This query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003736",
            "question": "Select the SwissLipids categories and their labels.",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 1\nSELECT ?category ?label\nWHERE\n{\n    ?category SWISSLIPID:rank SWISSLIPID:Category .\n    ?category rdfs:label ?label .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003737",
            "question": "For a given (list of) lipid Species identifier(s) (e.g. SWISSLIPID:000056420 (Phosphatidylcholine (20:2)) SWISSLIPID:000308470 (Triacylglycerol (64:6))), return a list of the corresponding Molecular subspecies (if any), Structural subspecies (if any), and Isomeric subspecies. The query should return the lipid recommended names as well as identifiers. The list should be sorted by level in the hierarchy (Isomeric subspecies last). Future versions of this query should be generic enough to work from any start point (Species, Molecular subspecies, Structural subspecies). Recapitulates the “browse lipid analytes” function of the website (in batch).",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 2\nSELECT ?startId ?startName ?rank ?id ?name\nWHERE\n{\n  # query: list of SwissLipids Species identifiers\n  VALUES ?startId { SWISSLIPID:000056420 SWISSLIPID:000308470 }\n  ?startId SWISSLIPID:rank SWISSLIPID:Species .\n  # SwissLipids Species name\n  ?startId rdfs:label ?startName .  \n  # Hierarchical search\n  ?id rdfs:subClassOf+ ?startId .\n  ?id SWISSLIPID:rank ?rank .\n  VALUES ?rank { SWISSLIPID:Isomeric_Subspecies SWISSLIPID:Molecular_Subspecies SWISSLIPID:Structural_Subspecies}\n  ?id rdfs:label ?name .\n} \nORDER BY DESC(?rank) ?startId",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003738",
            "question": "For a given (list of) lipid Species identifiers (e.g. SWISSLIPID:000056493, Phosphatidylcholine (32:0)), return a list of the corresponding Molecular subspecies (if any), Structural subspecies (if any), and Isomeric subspecies (if any) which are associated with at least one citation (PMID: PubMed id). The query should return the lipid identifiers (?id), recommended names (?name), and PMIDs (?citation).  Future versions of this query should be generic enough to work from any start point (Species, Molecular subspecies, Structural subspecies). ",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 3\nSELECT ?startId ?startLabel ?rank ?id ?name ?citation\nWHERE\n{\n  # Queried lipid species\n  VALUES ?startId { SWISSLIPID:000056493 }\n  ?startId rdfs:label ?startLabel .\n \n  ?id rdfs:subClassOf+ ?startId .  \n  VALUES ?rank { SWISSLIPID:Isomeric_Subspecie SWISSLIPID:Molecular_Subspecies SWISSLIPID:Structural_Subspecies}\n  ?id SWISSLIPID:rank ?rank ;\n\t  rdfs:label ?name ;\n      SWISSLIPID:citation ?citation .\n      \n} \nORDER BY ?startId ?id DESC(?rank)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003739",
            "question": "Returns the list of isomeric subspecies containing a specific combination of fatty acids at defined positions, but only those isomeric subspecies that are associated with a publication. If the user supplies a single fatty acid and position (e.g. hexadecanoate at sn1), find all lipids with that fatty acid at that position, irrespective of whether or not there are other fatty acids at positions (here sn2, sn3).  could generalize this query to allow logical combinations of fatty acids (e.g. hexadecanoate at sn1 AND (9Z)-octadecenoate at sn2, hexadecanoate at sn1 AND NOT (9Z)-octadecenoate at sn2, etc) Output should include the corresponding SwissLipids ID(s) and name(s) and PMIDs.",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\nSELECT ?startId ?startName ?tail1 ?tailName1 ?tail2 ?tailName2 ?id ?name ?pubmed\nWHERE {\n  VALUES ?startId { SWISSLIPID:000121946 }\n  ?startId rdfs:label ?startName .\n  # tail components\n  ?startId SWISSLIPID:haspart ?tail1 .\n  ?startId SWISSLIPID:haspart ?tail2 .\n  FILTER(!sameTerm(?tail1, ?tail2))\n  ?tail1 rdfs:label ?tailName1 .\n  ?tail2 rdfs:label ?tailName2 .\n\n  # Retrieve lipids with similar tails\n  ?id SWISSLIPID:haspart ?tail1 , ?tail2 .\n  \n  # Restrict to isomeric subspecies with PubMed citation(s)\n  ?id SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies .\n  ?id SWISSLIPID:citation ?pubmed .\n\n  # Retrieve name\n  ?id rdfs:label ?name .\n}\nORDER BY ?id ?tail1 ?tail2",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003740",
            "question": "Returns the list of isomeric subspecies that contain the same fatty acid component(s) at the same position(s) as a user-defined lipid. The user supplies a lipid ID, from which we first retrieve the fatty acids and their positions, after which we search for other lipids with the same combination of fatty acids at the same positions. This query could be useful in the website (classification tab): for a given lipid, provide a list of the other lipids with the same “tail” e.g. for PA(16:0/18:1(9Z)) => hexadecanoate@sn1 AND (9Z)-octadecenoate@sn2 => PC(16:0/18:1(9Z)), PE(16:0/18:1(9Z)), PG(16:0/18:1(9Z)), PI(16:0/18:1(9Z)), PIP[3](16:0/18:1(9Z)), PIP[4](16:0/18:1(9Z)), PIP[5](16:0/18:1(9Z)), PI2P[3,4](16:0/18:1(9Z)), PI2P[4,5](16:0/18:1(9Z)), PI2P[3,5](16:0/18:1(9Z)), PI3P[3,4,5](16:0/18:1(9Z)), PS(16:0/18:1(9Z))… Output should include the corresponding SwissLipids ID(s) and name(s).",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Example 37\nSELECT ?startId ?startName ?tail1 ?tailName1 ?tail2 ?tailName2 ?id ?name\nWHERE {\n  VALUES ?startId { SWISSLIPID:000121946 }\n  ?startId rdfs:label ?startName .\n  # tail components\n  ?startId SWISSLIPID:haspart ?tail1 .\n  ?startId SWISSLIPID:haspart ?tail2 .\n  FILTER(!sameTerm(?tail1, ?tail2))\n  ?tail1 rdfs:label ?tailName1 .\n  ?tail2 rdfs:label ?tailName2 .\n\n  # Retrieve lipids with similar tails\n  ?id SWISSLIPID:haspart ?tail1 , ?tail2 .\n  \n  # Restrict to isomeric subspecies with PubMed citation(s)\n  ?id SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies .\n\n  # Retrieve name\n  ?id rdfs:label ?name .\n}\nORDER BY ?id ?tail1 ?tail2",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003741",
            "question": "Lipids by fatty acid component (hexadecanoate) at position sn1",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\nSELECT \n?swisslipid \nWHERE {\n  VALUES (?chebi) {\n    (CHEBI:7896) #hexadecanoate\n  }\n  ?swisslipidHexadeconate owl:equivalentClass ?chebi .\n  ?swisslipid SWISSLIPID:hasPart [\n    SWISSLIPID:derived_from ?swisslipidHexadecanoate ;\n    SWISSLIPID:position SWISSLIPID:sn1 \n  ]\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003742",
            "question": "Lipids affected by human enzymes",
            "SPARQL": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003743",
            "question": "Find the list of SwissLipids for all organisms and their Isomeric subspecies",
            "SPARQL": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  ?organism {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite .\n  }\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism ?organism .\n  }\n  ?swisslipidIsomericSubpecies rdfs:subClassOf ?swisslipid ;\n        SWISSLIPID:rank SWISSLIPID:Isomeric_Subspecies .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003744",
            "question": "Lipids produced in different organisms",
            "SPARQL": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  ?organism {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite .\n  }\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism ?organism .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://beta.sparql.swisslipids.org/sparql/",
            "fetchUrl": "https://beta.sparql.swisslipids.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000104"
            ]
        },
        {
            "id": "Q00003745",
            "question": "Find genes having Uniprot xrefs in the group 6400at314295, along with their names fetched from Uniprot SPARQL endpoint",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX odbgroup: <http://purl.orthodb.org/odbgroup/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?gene a :Gene;\n        :memberOf odbgroup:6400at314295 .\n    ?gene :xref [a :Xref; :xrefResource ?xref] .\n    ?xref a :Uniprot .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?xref a up:Protein ;\n            up:recommendedName [up:fullName ?name] .\n    }\n}\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003746",
            "question": "Find statistics on translated sequence length for genes matching both IPR002117 and GO:0008219",
            "SPARQL": "PREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX interpro: <http://www.ebi.ac.uk/interpro/entry/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT\n    (count(?gene) as ?count_genes)\n    (min(?aa_seq_length) as ?min_aa_length)\n    (avg(?aa_seq_length) as ?avg_aa_length)\n    (max(?aa_seq_length) as ?max_aa_length)\nWHERE {\n    ?gene a :Gene; :geneTranslatedLength ?aa_seq_length.\n    ?gene :xref [a :Xref; :xrefResource interpro:IPR002117].\n    ?gene :xref [a :Xref; :xrefResource GO:0008219].\n}\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003747",
            "question": "Find genes with their properties by a list of their xrefs",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX entrezgene: <http://www.ncbi.nlm.nih.gov/gene/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?gene a :Gene.\n    ?gene :name ?gene_name; :description ?description; up:organism [up:scientificName ?org_name].\n    ?gene :xref [a :Xref; :xrefResource ?xref]\n    FILTER(?xref in (\n    ensembl:ENSPTRG00000022217\n    ,ensembl:ENSPVAG00000015405\n    ,uniprotkb:Q9D4H7\n    ,uniprotkb:H2PWL0\n    ,entrezgene:105598395\n    ,entrezgene:105062977\n    ))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003748",
            "question": "Find orthologous group/s at any level containing protein with Uniprot id P12345",
            "SPARQL": "PREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?og a :OrthoGroup ;\n        :ogBuiltAt ?level;\n        :hasMember/rdfs:seeAlso uniprotkb:P12345 .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003749",
            "question": "Find shortest rapidly evolving Caudovirales genes",
            "SPARQL": "PREFIX : <http://purl.orthodb.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT *\nWHERE {\n?gene a :Gene; :description ?description.\n?gene :geneTranslatedLength ?aa_length.\n?gene :memberOf ?og.\n?og :ogBuiltAt [up:scientificName \"Caudovirales\"].\n?og a :OrthoGroup; :ogEvolRate ?evolrate.\nFILTER(?evolrate > 1)\nbind (?evolrate/?aa_length as ?x)\n}\nORDER BY desc(?x) limit 99\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003750",
            "question": "Find most conservative single copy Danio rerio genes at the Vertebrata level",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT ?og ?gene ?description ?evolrate\nWHERE {\n    ?gene a :Gene; :description ?description; up:organism/a [up:scientificName \"Danio rerio\"].\n    ?gene :memberOf ?og.\n    ?og :ogBuiltAt [up:scientificName \"Vertebrata\"].\n    ?og a :OrthoGroup; :ogPercentSingleCopy 100; :ogEvolRate ?evolrate.\n    FILTER(?evolrate < 1)\n}\nORDER BY ?evolrate\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003751",
            "question": "Find orthologous human and mouse genes in the group(s) annotated with GO MF GO:0005164 (tumor necrosis factor receptor binding) and GO BP GO:0045739 (positive regulation of DNA repair)",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT ?og ?og_description ?gene_m ?gene_m_name ?gene_h ?gene_h_name\nWHERE {\n    ?gene_m a :Gene.\n    ?gene_h a :Gene.\n    ?gene_m up:organism/a [up:scientificName \"Mus musculus\"].\n    ?gene_h up:organism/a taxon:9606.\n    ?gene_m :name ?gene_m_name.\n    ?gene_h :name ?gene_h_name.\n    ?gene_m :memberOf ?og.\n    ?gene_h :memberOf ?og.\n    ?og a :OrthoGroup; :name ?og_description.\n    ?og :xref [a :Xref; :xrefResource GO:0005164],[a :Xref; :xrefResource GO:0045739].\n} ORDER BY ?og\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003752",
            "question": "List all xrefs attached to the groups annotated with at least three Interpro domains (IPR011990, IPR013083 and IPR001841)",
            "SPARQL": "PREFIX : <http://purl.orthodb.org/>\nPREFIX interpro: <http://www.ebi.ac.uk/interpro/entry/>\n\nSELECT ?og ?og_description (group_concat(distinct ?xref; SEPARATOR=\"; \") as ?xrefs)\nWHERE {\n    ?og a :OrthoGroup; :name ?og_description.\n    ?og :xref [a :Xref; :xrefResource ?xref].\n    ?og :xref [a :Xref; :xrefResource interpro:IPR011990].\n    ?og :xref [a :Xref; :xrefResource interpro:IPR013083].\n    ?og :xref [a :Xref; :xrefResource interpro:IPR001841].\n} GROUP BY ?og ?og_description\nORDER BY ?og_description\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003753",
            "question": "Find in any organsim under Gammaproteobacteria all genes containing word \"protease\", case-insensitive, anywhere in description",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?tx rdfs:subClassOf+/up:scientificName \"Gammaproteobacteria\".\n    ?gene a :Gene; up:organism/a ?tx; :description ?description.\n    FILTER(contains (lcase(?description), \"protease\" ))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003754",
            "question": "At the LCA level, find all human orthologs of mouse genes with name containing \"MAPK\", case-insensitive",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?og a :OrthoGroup.\n    ?og :ogBuiltAt taxon:314146.\n    ?gene_m a :Gene.\n    ?gene_h a :Gene.\n    ?gene_m up:organism/a taxon:10090.\n    ?gene_h up:organism/a taxon:9606.\n    ?gene_m :memberOf ?og.\n    ?gene_h :memberOf ?og.\n    ?gene_m :name ?gene_m_name.\n    ?gene_h :name ?gene_h_name.\n    FILTER(contains (UCASE(?gene_m_name), \"MAPK\" ))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003755",
            "question": "Find A.thaliana genes with their properties by a list of their gene symbols/names",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?gene a :Gene;\n        up:organism [up:scientificName ?sciname] .\n    FILTER(strstarts (?sciname, \"Arabidopsis thaliana\" ))\n    ?gene :name ?gene_name; :description ?description; :geneTranslatedLength ?aa_seq_length.\n    OPTIONAL {?gene :geneNbExons ?geneNbExons}.\n    ?gene :aaSequence ?sequence\n    FILTER(?gene_name in(\n        \"CHX10\"\n        ,\"GPX1\"\n        ,\"MAG\"\n        ,\"MSRB6\"\n        ,\"MYH\"\n        ,\"POLH\"\n        ,\"RPA3A\"\n        ,\"UVR3\"\n        ,\"XRCC1\"\n    ))\n} ORDER BY ?aa_seq_length",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003756",
            "question": "Find all genes with their name and description in the orthologous group 6400at314295",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX odbgroup: <http://purl.orthodb.org/odbgroup/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?gene a :Gene.\n    ?gene :name ?gene_name.\n    ?gene :description ?description.\n    ?gene up:organism/a ?taxon.\n    ?taxon up:scientificName ?org_name.\n    ?gene :memberOf odbgroup:6400at314295.\n}\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003757",
            "question": "Find URI and some properties of the orthologous group 6400at314295 by its short text label",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?og a :OrthoGroup;\n        rdfs:label \"6400at314295\";\n        :name ?description;\n        :ogBuiltAt [up:scientificName ?clade] .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003758",
            "question": "Find all properties of the orthologous group 6400at314295 by its URI",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX odbgroup: <http://purl.orthodb.org/odbgroup/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?og a :OrthoGroup;\n        rdfs:label ?label;\n        :name ?description;\n        :ogBuiltAt [up:scientificName ?clade];\n        :ogEvolRate ?evolRate;\n        :ogPercentSingleCopy ?percentSingleCopy;\n        :ogPercentInSpecies ?percentInSpecies;\n        :ogTotalGenesCount ?totalGenesCount;\n        :ogMultiCopyGenesCount ?multiCopyGenesCount;\n        :ogSingleCopyGenesCount ?singleCopyGenesCount;\n        :ogInSpeciesCount ?inSpeciesCount;\n        :cladeTotalSpeciesCount ?cladeTotalSpeciesCount .\n    OPTIONAL { ?og :ogMedianProteinLength ?medianProteinLength}\n    OPTIONAL { ?og :ogStddevProteinLength ?stddevProteinLength}\n    OPTIONAL { ?og :ogMedianExonsCount ?medianExonsCount}\n    OPTIONAL { ?og :ogStddevExonsCount ?stddevExonsCount}\n    FILTER(?og = odbgroup:6400at314295)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003759",
            "question": "Find all OrthoDB species with attached OrthoDB organisms containing \"drosophila\" in the beginning of the taxonomic name",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT *\nWHERE {\n    ?tx a :Species; up:scientificName ?tax_name .\n    ?org a ?tx; up:scientificName ?org_name.\n    FILTER(strstarts (lcase(?tax_name ), \"drosophila\" ))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003760",
            "question": "Find all clades, i.e. taxonomic levels where orthologous groups were built on, with their Latin names and ranks underneath Bacteria, sorted alphabetically by rank, then name",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT * WHERE {\n    ?taxon a :Clade ;\n        rdfs:subClassOf+ taxon:2 ;\n        up:scientificName ?name ;\n        up:rank ?rank .\n} ORDER BY ?rank ?name",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003761",
            "question": "Find LCA in the OrthoDB tree for fruit fly and honey bee taxons",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX : <http://purl.orthodb.org/>\n\nSELECT DISTINCT *\nWHERE {\n    ?lca a :Clade ; up:scientificName ?lcaname .\n    taxon:7227  rdfs:subClassOf* ?lca .\n    taxon:7460 rdfs:subClassOf* ?lca .\n    FILTER(not exists {\n        ?xca a :Clade ; rdfs:subClassOf ?lca .\n        taxon:7227    rdfs:subClassOf* ?xca .\n        taxon:7460   rdfs:subClassOf* ?xca .\n    })\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003762",
            "question": "Find single-copy phyletic profile at all orthologous levels of STRING-anotated well known interacting genes pertinent to mouse gene/s from the OrthoDB orthologous group annotated with GO MF GO:0005164 (tumor necrosis factor receptor binding) and GO BP GO:0045739 (positive regulation of DNA repair)",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX : <http://purl.orthodb.org/>\nPREFIX ip_highest: <http://string-db.org/rdf/interaction/physical-highest-confidence-cutoff>\n\nSELECT ?gene_m ?gene_m_name ?partner_m ?string_partner_genename ?level ?percent_single_copy\nWHERE {\n    ?gene_m a :Gene .\n    ?gene_m up:organism/a [up:scientificName \"Mus musculus\"] .\n    ?gene_m :name ?gene_m_name .\n    ?gene_m :memberOf ?og .\n    ?og a :OrthoGroup ;\n        :name ?og_description ;\n        :ogBuiltAt [up:scientificName \"Mammalia\"] .\n    ?og :xref [a :Xref; :xrefResource GO:0005164], [a :Xref; :xrefResource GO:0045739] .\n    ?gene_m :xref [a :Xref; :xrefResource ?xref_m] .\n    ?xref_m a :Entrezgene.\n\n    SERVICE <https://sparql.string-db.org/> {\n        ?string_gene_m rdfs:seeAlso ?xref_m ;\n            ip_highest: ?partner_m .\n        ?partner_m rdfs:label ?string_partner_genename ;\n            rdfs:comment ?string_partner_description .\n    }\n\n    ?gene_m2 a :Gene ;\n        up:organism/a [up:scientificName \"Mus musculus\"] ;\n        :name ?string_partner_genename ;\n        :memberOf ?og2 .\n    ?og2 a :OrthoGroup ;\n        :ogBuiltAt/up:scientificName ?level ;\n        :ogPercentSingleCopy ?percent_single_copy .\n}\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003763",
            "question": "Find zebrafish orthologs of disease-implicated (according to Nextprot SPARQL endpoint) human genes via Vertebrata-level orthogroup/s annotated with both IPR000719 (protein kinase domain) and GO:0048013 (ephrin receptor signaling pathway)",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX : <http://purl.orthodb.org/>\nPREFIX np: <http://nextprot.org/rdf#>\nPREFIX interpro: <http://www.ebi.ac.uk/interpro/entry/>\n\nSELECT ?gene_zf ?gene_zf_name ?gene ?gene_name ?description ?go ?disease\nWHERE {\n\tSERVICE <https://sparql.nextprot.org/> {\n        select distinct ?entry ?disease WHERE {\n            ?entry np:isoform / np:disease / rdfs:comment ?disease\n        }\n    }\n    ?gene rdfs:seeAlso ?entry;\n        :name ?gene_name ;\n        :description ?description.\n    ?gene :memberOf ?og .\n    ?og :xref/:xrefResource interpro:IPR000719 , GO:0048013.\n    ?og :ogBuiltAt/up:scientificName \"Vertebrata\";\n        :hasMember ?gene_zf.\n    ?gene_zf :name ?gene_zf_name;\n        up:organism/a [up:scientificName \"Danio rerio\"].\n} ORDER BY ?disease\n",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003764",
            "question": "Find distribution of oxidation reactions catalyzed by genes arranged into several Eukaryota-level orthologous groups annotated with IPR002328 across species in Alveolata, Stramenopiles, Liliopsida and Coleoptera via cooperation with both Uniprot SPARQL endpoint and RHEA SPARQL endpoint",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <http://purl.orthodb.org/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX interpro: <http://www.ebi.ac.uk/interpro/entry/>\n\nSELECT ?og ?equation\n    (group_concat (distinct ?clade_name; SEPARATOR=\"; \") as ?clades)\n    (count(distinct ?taxon) as ?cnt_taxons)\n    (count(distinct ?gene) as ?cnt_genes)\n    (group_concat (distinct ?org_name; SEPARATOR=\"; \") as ?taxons)\nWHERE {\n    ?taxon a :Species; up:scientificName ?org_name ;\n        rdfs:subClassOf+/up:scientificName ?clade_name.\n    ?gene a :Gene ;\n        up:organism/a ?taxon.\n    ?gene rdfs:seeAlso ?xref.\n    ?xref a :Uniprot.\n    ?gene :memberOf ?og.\n    ?og :xref/:xrefResource interpro:IPR002328 ;\n        :ogBuiltAt/up:scientificName \"Eukaryota\".\n\n    # join via uniprot ?xref\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?xref a up:Protein ;\n            up:annotation/up:catalyticActivity/up:catalyzedReaction ?rh .\n    }\n\n    # join via reaction ?rh\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?rh rdfs:subClassOf rh:Reaction ;\n            rh:equation ?equation.\n    }\n\n    # restrict taxons to several clades\n    VALUES ?clade_name {\n        \"Stramenopiles\"\n        \"Alveolata\"\n        \"Liliopsida\"\n        \"Coleoptera\"\n    }\n} GROUP BY ?equation ?og ORDER BY ?og ?equation",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.orthodb.org/sparql/",
            "fetchUrl": "https://sparql.orthodb.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000103"
            ]
        },
        {
            "id": "Q00003765",
            "question": "Find the co-occurence count of Topological Domain comment text in UniProtKB entries",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?comment1 \n    ?comment2 \n    (COUNT(?comment1) AS ?count1)\nWHERE\n{\n    ?protein a up:Protein ;\n               up:annotation ?annotation1 , \n                             ?annotation2 . \n    ?annotation1 rdf:type up:Topological_Domain_Annotation ;\n        rdfs:comment ?rawComment1 .\n    ?annotation2 rdf:type up:Topological_Domain_Annotation ;\n        rdfs:comment ?rawComment2 . \n    BIND(IF(contains(?rawComment1, ';'), \n            STRBEFORE(?rawComment1,';'), \n            ?rawComment1) AS ?comment1)\n    BIND(IF(contains(?rawComment2, ';'), \n            STRBEFORE(?rawComment2,';'), \n            ?rawComment2) AS ?comment2)\n    FILTER(?annotation1 != ?annotation2)\n} \nGROUP BY ?comment1 ?comment2 \nORDER BY DESC(COUNT(?comment1))",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003766",
            "question": "Find any uniprot entry which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003767",
            "question": "Where are the human genes encoding enzymes metabolizing N-acyl sphingosines expressed in the human body (federated query, with Rhea and Bgee)",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi \n    ?reaction \n    ?protein ?ensemblGene\n    ?anatomicEntityLabel\n    ?anatomicEntity\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:equation ?reactionEquation .\n    ?reaction rh:side ?reactionSide .\n    ?reactionSide rh:contains ?participant .\n    ?participant rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:52639\n}\n  ?protein up:organism taxon:9606 .\n  ?protein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  ?protein rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n\n  SERVICE  <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatomicEntity .\n    ?gene lscr:xrefEnsemblGene ?ensemblGene .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003768",
            "question": "Find taxon records that are known to have part of their life cycle in other organisms (e.g. parasite, symbiont, infection)",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?virus \n  ?host \nWHERE {\n    ?virus up:host ?host .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003769",
            "question": "Select the preferred gene name and disease annotation of all human UniProt entries that are known to be involved in a disease",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?name ?text\nWHERE\n{\n        ?protein a up:Protein . \n        ?protein up:organism taxon:9606 .\n        ?protein up:encodedBy ?gene . \n        ?gene skos:prefLabel ?name .\n        ?protein up:annotation ?annotation .\n        ?annotation a up:Disease_Annotation .\n        ?annotation rdfs:comment ?text\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003770",
            "question": "Select a mapping of UniProt Enzymes to PDB entries using the UniProt cross-references to the <a href=\"https://www.uniprot.org/database/DB-0070\">PDB</a> database",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?db\nWHERE\n{\n  ?protein a up:Protein .\n  ?protein rdfs:seeAlso ?db .\n  ?db up:database <http://purl.uniprot.org/database/PDB> .\n  {\n    ?protein up:enzyme ?enzyme .\n  } UNION {\n    ?protein up:annotation/rdf:type up:Catalytic_Activity_Annotation .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003771",
            "question": "The recommended protein short names for UniProtKB entries",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein \n  ?fullName\nWHERE {\n  ?protein a up:Protein ;\n           up:recommendedName ?recommendedName .\n  ?recommendedName up:shortName ?fullName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003772",
            "question": "Find UniParc records whose sequence point to the most database entries",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?sequence ?entries\nWHERE\n{\n    SELECT \n        ?sequence \n        (COUNT(?entry) AS ?entries)\n    WHERE\n    {\n        GRAPH <https://sparql.uniprot.org/uniparc> {\n            ?sequence up:sequenceFor ?entry .\n        }\n    } GROUP BY ?sequence\n} ORDER BY DESC(?entries)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003773",
            "question": "Find all proteins linked to arachidonate (CHEBI:32395)",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003774",
            "question": "Find (Human Genetic) diseases, that are related to a natural variant on the active site of an enzyme.",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  DISTINCT\n   ?disease \nWHERE {\n  ?protein a up:Protein ;\n    up:organism taxon:9606 ;\n    up:annotation ?disease_annotation, ?active_site_annotation, ?natural_variant_annotation .\n  {\n    ?protein up:enzyme [] .\n  } UNION {\n  ?protein up:annotation/a up:Catalytic_Activity_Annotation .\n  }\n  ?disease_annotation a up:Disease_Annotation ;\n  up:disease ?disease .\n  ?active_site_annotation a up:Active_Site_Annotation ;\n  up:range ?active_site_range .\n  ?active_site_range faldo:begin ?active_site_begin .\n  ?active_site_begin faldo:position ?active_site_position ;\n                     faldo:reference ?sequence .\n  ?natural_variant_annotation a up:Natural_Variant_Annotation ;\n  up:range ?natural_variant_range ;\n  skos:related ?disease .\n  ?natural_variant_range faldo:begin ?natural_variant_begin ;\n                         faldo:end ?natural_variant_end .\n  ?natural_variant_begin faldo:position ?natural_variant_begin_position .\n  ?natural_variant_end faldo:position ?natural_variant_end_position ;\n                       faldo:reference ?sequence .\n  \n  FILTER(?natural_variant_begin_position >= ?active_site_position && ?active_site_position <= ?natural_variant_end_position) \n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003775",
            "question": "Find taxon records for which one reviewed UniProtKB (Swiss-Prot) entry exists",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT\n    DISTINCT\n         ?taxid\n         ?scientificName\n         ?domain\n         ?domainName\nWHERE {\n  ?uniprot a up:Protein .\n  # reviewed entries\n  ?uniprot up:reviewed true .\n  ?uniprot up:organism ?taxid . \n  ?taxid up:scientificName ?scientificName .\n    \n  VALUES ?domain { taxon:2 # bacteria\n                   taxon:2157 # archaea\n                   taxon:2759 # eukaryota\n                   taxon:10239 #viruses\n                 } .\n  ?taxid rdfs:subClassOf ?domain .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003776",
            "question": "Retrieve images of 'Anas' (Ducks) from the European Environmental Agency databases (federated query).",
            "SPARQL": "PREFIX eunisSpecies: <http://eunis.eea.europa.eu/rdf/species-schema.rdf#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?taxon\n    ?ncbiTaxid\n    ?eunisTaxon\n    ?eunisName \n    ?image\nWHERE\n{\n    GRAPH <https://sparql.uniprot.org/taxonomy>\n    {\n        ?taxon a up:Taxon .\n        # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n        ?taxon rdfs:subClassOf taxon:8835 .\n        BIND(strafter(str(?taxon), 'onomy/') AS ?ncbiTaxid)\n    }\n    SERVICE <https://semantic.eea.europa.eu/sparql>\n    {\n        ?eunisTaxon a eunisSpecies:SpeciesSynonym ;\n           eunisSpecies:binomialName ?eunisName ;\n           eunisSpecies:sameSpeciesNCBI ?ncbiTaxid ;\n           <http://xmlns.com/foaf/0.1/depiction> ?image .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003777",
            "question": "Find human transporter proteins in reviewed UniProtKB, that are expressed in the liver (Uses Bgee and UBERON).",
            "SPARQL": "PREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uberon: <http://purl.obolibrary.org/obo/uo#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?rhea\n  ?protein\n  ?anat\nWHERE\n{\n  GRAPH <https://sparql.rhea-db.org/rhea> {\n    ?rhea rh:isTransport true .\n  }\n  ?protein up:annotation ?ann .\n  ?protein up:organism taxon:9606 .\n  ?ann up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?rhea .\n  BIND(uberon:0002107 AS ?anat)\n  SERVICE <https://www.bgee.org/sparql> {\n    ?seq genex:isExpressedIn ?anat .\n    ?seq lscr:xrefUniprot ?protein .\n    ?seq orth:organism ?organism .\n    ?organism obo:RO_0002162 taxon:9606 .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003778",
            "question": "Construct new triples of the type 'HumanProtein' from all human UniProt entries",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nCONSTRUCT\n{\n\t?protein a up:HumanProtein .\n}\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:organism taxon:9606\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003779",
            "question": "Map UniProt to HGNC identifiers and Symbols",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot\n  ?hgnc\n  ?hgncSymbol\nWHERE\n{\n  # A space separated list of UniProt primary accessions.\n  VALUES (?acc) {('P05067') ('P00750')}\n  BIND(iri(concat(str(uniprotkb:), ?acc)) AS ?uniprot)\n  ?uniprot rdfs:seeAlso ?hgnc .\n  ?hgnc up:database <http://purl.uniprot.org/database/HGNC> ;\n       rdfs:comment ?hgncSymbol .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003780",
            "question": "Find the Rhea and Interpro combinations in UniProtKB entries.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?interpro\n\t?rhea\nFROM <https://sparql.uniprot.org/uniprot>\nWHERE \n{\n  ?protein up:reviewed true .\n  ?protein up:annotation ?annotation .\n  ?annotation up:catalyticActivity ?rhea .\n  ?protein rdfs:seeAlso ?interpro .\n  ?interpro up:database <http://purl.uniprot.org/database/InterPro> .\n} ORDER BY ?rhea",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003781",
            "question": "Select all UniProt entries with annotated transmembrane regions and the regions' begin and end coordinates on the canonical sequence",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?begin ?end\nWHERE \n{\n\t?protein a up:Protein .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:Transmembrane_Annotation .\n\t?annotation up:range ?range .\n\t?range faldo:begin/faldo:position ?begin .\n\t?range faldo:end/faldo:position ?end\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003782",
            "question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT DISTINCT \n  ?protein \n  ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003783",
            "question": "Was any UniProt entry integrated on the 9th of January 2013",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nASK\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:created '2013-01-09'^^xsd:date\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003784",
            "question": "Translate the global unique identifier for a UniProt record into other options using the bioregistry translating endpoint.",
            "SPARQL": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?protein \n    ?otherIdentifier\nWHERE {\n    BIND(uniprotkb:P00750 AS ?protein)\n    ?protein a up:Protein .\n    SERVICE <https://bioregistry.io/sparql> {\n        ?protein owl:sameAs ?otherIdentifier .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003785",
            "question": "List UniProt proteins with their associated named gene",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein\n  ?gene \nWHERE {\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003786",
            "question": "Retrieve entries and Catalytic activities in the reviewed (Swiss-Prot) section that have experimental evidences,",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT  \n  ?protein\n  ?rhea \nWHERE {\n  # ECO 269 is experimental evidence\n  BIND (<http://purl.obolibrary.org/obo/ECO_0000269> as ?evidence)\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n    ?protein up:reviewed true ;\n      up:annotation ?a ;\n      up:attribution ?attribution  .\n\n    ?a a up:Catalytic_Activity_Annotation ;\n      up:catalyticActivity ?ca .\n    ?ca up:catalyzedReaction ?rhea .\n  \n    [] rdf:subject ?a ;\n      rdf:predicate up:catalyticActivity ;\n      rdf:object ?ca ;\n      up:attribution ?attribution .\n\n    ?attribution up:evidence ?evidence .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003787",
            "question": "List all UniProt proteins annotated to be related to a genetic disease.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?disease ?diseaseComment ?mim\nWHERE\n{\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n    ?uniprot a up:Protein ;\n       up:annotation ?diseaseAnnotation .\n    ?diseaseAnnotation up:disease ?disease .\n  }\n  GRAPH <https://sparql.uniprot.org/diseases> {\n    ?disease a up:Disease ;\n             rdfs:comment ?diseaseComment .\n    OPTIONAL {\n      ?disease rdfs:seeAlso ?mim .\n       ?mim up:database <http://purl.uniprot.org/database/MIM> .\n    }\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003788",
            "question": "List the created, last modified, and last sequence update dates for UniProtKB proteins.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein \n  ?created\n  ?modified\n  ?version\nWHERE {\n  ?protein a up:Protein ;\n           up:created ?created ;\n           up:modified ?modified ;\n           up:version ?version .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003789",
            "question": "Find UniProt entries with a transmembrane region, with an Alanine in the 15 Aminoacid region preceding the transmembrane",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT ?protein ?from ?interestingRegion\nWHERE\n{\n  ?protein up:annotation ?annotation .\n  ?annotation a up:Transmembrane_Annotation .\n  # Get the coordinates of the Transmembrane\n  ?annotation up:range ?range .\n  ?range faldo:begin ?beginI .\n  ?beginI faldo:position ?begin .\n  ?beginI faldo:reference ?sequence .\n  # The aas will have the specific IUPAC aminoacids\n  ?sequence rdf:value ?aas .\n  # We calculate the start by substracting 10\n  BIND(?begin - 10 AS ?tenBeforeBegin)\n  # Can't start before the sequence starts or we might miss some results\n  BIND(IF(?tenBeforeBegin < 1, 0, ?tenBeforeBegin) AS ?from)\n  # Substring the IUPAC aminoacids\n  BIND(SUBSTR(?aas, ?from, 15) AS ?interestingRegion)\n  # The interestingRegion needds to contain an Alanine\n  FILTER(CONTAINS(?interestingRegion, 'A'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003790",
            "question": "Retrieve the UniProt proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003791",
            "question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving Sterols (CHEBI:15889). Federating with Rhea-DB and OMABrowser.",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql/> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003792",
            "question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT  \n            ?protein \n            ?proteinFullName \n            ?activityType \n            ?standardActivityValue \n            ?standardActivityUnit \n            ?chemblMolecule \n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    { \n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions \n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> { \n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003793",
            "question": "Find Drosophila proteins, that depend on more than one transcript (Requires cross-references to Ensembl family of resources).",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\nWHERE {\n  ?protein up:organism taxon:7227 ;\n    a up:Protein ;\n    up:reviewed true ;\n    rdfs:seeAlso ?transcript .\n  ?transcript  a up:Transcript_Resource .\n} GROUP BY ?protein HAVING(COUNT(?transcript) >= 2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003794",
            "question": "Find all names associated with uniprot entry P05067, and if the name is associated with the entry it's domains or its components",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?anyKindOfName \n  ?names \n  ?partType\nWHERE\n{\n  BIND(<http://purl.uniprot.org/uniprot/P05067> AS ?protein)\n  ?protein a up:Protein .\n  {\n    ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n    UNION\n  {\n    VALUES(?partType){(up:domain) (up:component)}\n    ?protein ?partType ?part .\n    ?part (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n  ?structuredName ?anyKindOfName  ?names .\n  ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003795",
            "question": "Find Hydrolases (enzymes that catalyse the hydrolysis of various bonds) that have at least two transmembrane domains",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein\nWHERE {\n ?protein up:enzyme|up:annotation/up:catalyticActivity/up:enzymeClass ?enzymeClass ;\n                   up:annotation ?transMembraneAnnotation .\n ?enzymeClass rdfs:subClassOf <http://purl.uniprot.org/enzyme/3.-.-.-> .\n ?transMembraneAnnotation a up:Transmembrane_Annotation .\n} GROUP BY ?protein HAVING (COUNT(DISTINCT ?transMembraneAnnotation) >= 2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003796",
            "question": "Find Drosophila enzymes, that depend on more than one transcript (Requires cross-references to Ensembl family of resources).",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\nWHERE {\n  ?protein up:organism taxon:7227 ;\n    a up:Protein ;\n    up:reviewed true ;\n    rdfs:seeAlso ?transcript .\n  { \n    ?protein up:annotation/a up:Catalytic_Activity_Annotation ;\n  } UNION {\n    ?protein up:enzyme ?enzyme .\n  }\n  ?transcript  a up:Transcript_Resource .\n} GROUP BY ?protein HAVING(COUNT(?transcript) >= 2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003797",
            "question": "Generate a draft human metabolome",
            "SPARQL": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003798",
            "question": "Proteins with annotated binding sites for ligands similar to heme",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003799",
            "question": "Select all cross-references to external databases of the category <a href=\"https://www.uniprot.org/database?query=category_exact%3A%223D%20structure%20databases%22\">'3D structure databases'</a> of UniProt entries that are classified with the keyword <a href=\"https://www.uniprot.org/keywords/5\">'Acetoin biosynthesis (KW-0005)'</a>",
            "SPARQL": "PREFIX keywords: <http://purl.uniprot.org/keywords/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?link\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:classifiedWith keywords:5 .\n    ?protein rdfs:seeAlso ?link .\n    ?link up:database ?db .\n    ?db up:category '3D structure databases'\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003800",
            "question": "Number of proteins with annotated binding sites for metals or metal sulfur clusters (and experimental evidence for the binding)",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?ligand\n  ?ligandName \n  (COUNT(DISTINCT ?protein) as ?entries)\nWHERE {\n   ?protein up:annotation ?annotation .\n   \n   VALUES ?evs { obo:ECO_0000269 obo:ECO_0007744 } .\n   VALUES ?chebids { CHEBI:25213 CHEBI:25214 } .\n   ?st rdf:subject ?protein ; \n       rdf:predicate up:annotation ; \n       rdf:object ?annotation ;\n       up:attribution/up:evidence ?evs .\n\n   ?annotation up:ligand/rdfs:subClassOf ?ligand .\n   ?ligand rdfs:subClassOf+ ?chebids ;\n     rdfs:label ?ligandName .\n}\nGROUP BY ?ligand ?ligandName\nORDER BY DESC(?entries)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003801",
            "question": "Select all bacterial taxa and their scientific name from the <a href=\"https://www.uniprot.org/taxonomy/\">UniProt taxonomy</a>",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?taxon ?name\nWHERE\n{\n    ?taxon a up:Taxon .\n    ?taxon up:scientificName ?name .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?taxon rdfs:subClassOf taxon:2 .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003802",
            "question": "Find where disease related proteins are known to be located in the cell",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    ?protein \n    ?disease \n    ?location_inside_cell \n    ?cellcmpt\nWHERE\n{\n    ?protein up:annotation ?diseaseAnnotation , ?subcellAnnotation .\n    ?diseaseAnnotation up:disease/skos:prefLabel ?disease .\n    ?subcellAnnotation up:locatedIn/up:cellularComponent ?cellcmpt .\n    ?cellcmpt skos:prefLabel ?location_inside_cell .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003803",
            "question": "List UniProt proteins with their associated gene and the gene's preffered name",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein\n  ?gene \nWHERE {\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n  ?gene skos:prefLabel ?recommendedGeneName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003804",
            "question": "List UniProt proteins with genetic replicon that they are encoded on using the Proteome data.",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?proteomeData\n    ?replicon\n    ?proteome  \nWHERE {\n  # reviewed entries (UniProtKB/Swiss-Prot)\n  ?protein up:reviewed true . \n  # restricted to Human taxid\n  ?uniprot up:organism taxon:9606 . \n  ?uniprot up:proteome ?proteomeData .\n  BIND( strbefore( str(?proteomeData), \"#\" ) as ?proteome )\n  BIND( strafter( str(?proteomeData), \"#\" ) as ?replicon )\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003805",
            "question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
            "SPARQL": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003806",
            "question": "Find UniProtKB entries with more than 1 <a href=\"https://www.uniprot.org/help/topo_dom\">Topological domain annotation</a>",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?protein \n    (GROUP_CONCAT(?comment; separator=\", \") AS ?comments)\nWHERE\n{\n    ?protein a up:Protein ;\n            up:annotation ?annotation . \n    ?annotation rdf:type up:Topological_Domain_Annotation ;\n            rdfs:comment ?comment .\n} \nGROUP BY ?protein \nHAVING (COUNT(?annotation) > 1)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003807",
            "question": "Find the human protein which contains an Epitope VSTQ, where T is a phosporylated threonine",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein \n  ?comment\n  ?begin\n  ?end \nWHERE\n{\n  ?protein a up:Protein ;\n    up:organism taxon:9606 ; \n    up:sequence ?sequence ;\n    up:annotation ?annotation .\n  ?annotation a up:Modified_Residue_Annotation ;\n    rdfs:comment ?comment ;\n    up:range ?range .\n  ?range \n    faldo:begin [ faldo:position ?begin ; faldo:reference ?sequence ] ;\n    faldo:end [ faldo:position ?end ; faldo:reference ?sequence ] .\n  ?sequence rdf:value ?aaSequence .\n  FILTER (SUBSTR(?aaSequence, ?begin -2 , 4) = \"VSTQ\")     \n  FILTER (CONTAINS(?comment, \"Phosphothreonine\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003808",
            "question": "Show for a given UniParc accessions which active UniProt entries have the same amino acid sequence",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?uniparc\n  ?uniprot\nWHERE {\n  GRAPH <https://sparql.uniprot.org/uniparc>{\n    BIND(<http://purl.uniprot.org/uniparc/UPI000002DB1C> AS ?uniparc) \n    ?uniparc up:sequenceFor ?uniprot .\n  }\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n    ?uniprot a up:Protein .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003809",
            "question": "Find Diseases that are thought to be related to Enzymes",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?disease ?diseaseLabel\nWHERE { \n ?protein up:enzyme|up:annotation/up:catalyticActivity/up:enzymeClass ?enzyme ;\n                   up:annotation ?diseaseAnnotation .\n ?diseaseAnnotation a up:Disease_Annotation ;\n                    up:disease ?disease .\n ?disease skos:prefLabel ?diseaseLabel .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003810",
            "question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea \n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003811",
            "question": "Retrieve entries with sequences that are composed of fragments",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT DISTINCT \n  ?protein\nWHERE {\n  ?protein a up:Protein ;\n    up:sequence ?sequence .\n  MINUS { ?sequence up:fragment [] }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003812",
            "question": "Find enzymes with a Tyrosine (Y) as an active site",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein\nWHERE {\n  ?protein up:annotation ?activeSiteAnnotation .\n  ?activeSiteAnnotation a up:Active_Site_Annotation ;\n    up:range ?range .\n  ?range faldo:begin ?begin .\n  ?begin faldo:position ?beginPosition ;\n    faldo:reference ?sequence .\n  ?sequence rdf:value ?sequenceVal . \n  FILTER(SUBSTR(?sequenceVal, ?beginPosition, 1) = 'Y')\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003813",
            "question": "Alternative protein full names for UniProtKB entries",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein \n  ?fullName\nWHERE {\n  ?protein a up:Protein ;\n           up:alternativeName ?recommendedName .\n  ?recommendedName up:fullName ?fullName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003814",
            "question": "Select the average number of cross-references to the <a href=\"${uniprot}database/DB-0070\">PDB</a> database of UniProt entries that have at least one cross-reference to the PDB database",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT (AVG(?linksToPdbPerEntry) AS ?avgLinksToPdbPerEntry)\nWHERE\n{\n\tSELECT ?protein (COUNT(DISTINCT ?db) AS ?linksToPdbPerEntry)\n\tWHERE\n\t{\n\t\t?protein a up:Protein .\n\t\t?protein rdfs:seeAlso ?db .\n\t\t?db up:database <http://purl.uniprot.org/database/PDB> .\n\t}\n\tGROUP BY ?protein ORDER BY DESC(?linksToPdbPerEntry)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003815",
            "question": "Look for enzymes catalyzing reactions with molecules similar to dopamine, with natural variants related to a disease.",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea \n  ?chebi\n  ?disease\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa, ?natural_variant_annotation, ?disease_annotation .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?natural_variant_annotation a up:Natural_Variant_Annotation ;\n    skos:related ?disease .\n  ?disease_annotation a up:Disease_Annotation ;\n     up:disease ?disease .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003816",
            "question": "Sometimes it is known that a gene encoding a protein UniProtKB is located on a plasmid, but the name of the plasmid is unknown.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?protein \n    ?plasmidOrOrganelle\n    ?label\nWHERE {\n    ?protein a up:Protein ;\n      up:encodedIn ?plasmidOrOrganelle .\n    OPTIONAL {\n        ?plasmidOrOrganelle rdfs:label ?label .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003817",
            "question": "Select all UniProt entries that were integrated on the 30th of November 2010",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT ?protein\nWHERE\n{\n\t?protein a up:Protein . \n\t?protein up:created '2010-11-30'^^xsd:date\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003818",
            "question": "Select all human UniProt entries with a sequence variant that leads to a tyrosine to phenylalanine substitution",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?annotation ?begin ?text\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ; \n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation ;\n            rdfs:comment ?text ;\n            up:substitution ?substitution ;\n            up:range/faldo:begin\n                [ faldo:position ?begin ;\n                  faldo:reference ?sequence ] .\n        ?sequence rdf:value ?value .\n        BIND (substr(?value, ?begin, 1) as ?original) .\n        FILTER(?original = 'Y' && ?substitution = 'F') .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003819",
            "question": "Select all triples that relate to the EMBL CDS entry AA089367.1: ",
            "SPARQL": "DESCRIBE <http://purl.uniprot.org/embl-cds/AAO89367.1>",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003820",
            "question": "Find (Human genetic) diseases that are thought to be related to Enzymes, known to be located in the Mitochondrion",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?disease\nWHERE {\n  ?protein a up:Protein ;\n  up:organism taxon:9606 ;\n  up:annotation ?disease_annotation , \n                ?subcellularLocation .\n  {\n    ?protein up:enzyme [] .\n  } UNION {\n    ?protein up:annotation/a up:Catalytic_Activity_Annotation .\n  }\n  ?disease_annotation a up:Disease_Annotation ;\n    up:disease ?disease .\n  ?subcellularLocation a up:Subcellular_Location_Annotation ;\n    up:locatedIn ?location .\n  ?location up:cellularComponent ?component .\n  ?component up:partOf* <http://purl.uniprot.org/locations/173> .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003821",
            "question": "Translate the global unique identifier for a UniProt record into other options using the identifiers.org translating endpoint.",
            "SPARQL": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?protein \n    ?otherIdentifier\nWHERE {\n    VALUES (?protein) {(uniprotkb:P00750) (uniprotkb:P05067)}\n    ?protein a up:Protein .\n    SERVICE <https://sparql.api.identifiers.org.sparql> {\n        ?protein owl:sameAs ?otherIdentifier .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003822",
            "question": "Find longest comment text associated with a UniProtKB Natural Variant Annotation",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?annotation ?comment\nWHERE {\n    ?annotation a up:Natural_Variant_Annotation ;\n        rdfs:comment ?comment . \n} \nORDER BY DESC(STRLEN(?comment))",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003823",
            "question": "List all Human UniProt entries and their computationaly potential isoforms..",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?entry ?sequence ?isCanonical\nWHERE {\n  # We don't want to look into the UniParc graph which will \n  # confuse matters\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n      # we need the UniProt entries that are human\n      ?entry a up:Protein ;\n        up:organism taxon:9606 ;\n      # and we select the computationally mapped sequences\n        up:potentialSequence ?sequence .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003824",
            "question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003825",
            "question": "Select all triples that relate to the taxon that describes <i>Homo sapiens</i> in the named graph for <a href=\"https://sparql.uniprot.org/taxonomy\">taxonomy</a>",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nDESCRIBE taxon:9606 \nFROM <https://sparql.uniprot.org/taxonomy>",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003826",
            "question": "Number of reviewed entries (Swiss-Prot) that are related to <a href=\"http://amigo.geneontology.org/amigo/term/GO:0016301\">kinase activity</a>",
            "SPARQL": "PREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n    (COUNT(DISTINCT(?protein)) AS ?pc)\nWHERE\n{   \n    ?protein rdf:type up:Protein ;\n        up:reviewed true  ;\n        up:organism taxon:9606 ;\n        up:classifiedWith|(up:classifiedWith/rdfs:subClassOf) GO:0016301 .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003827",
            "question": "Find the release number of the uniprot data that is currently being queried",
            "SPARQL": "SELECT ?version\nFROM <https://sparql.uniprot.org/.well-known/void>\nWHERE\n{\n    [] <http://purl.org/pav/version> ?version\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003828",
            "question": "Select all UniProt entries, and their organism and amino acid sequences (including isoforms), for <a href=\"http://purl.uniprot.org/taxonomy/83333\"><i>E. coli K12</i> and all its strains</a>",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?organism ?isoform ?sequence\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:organism ?organism .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?organism rdfs:subClassOf taxon:83333 .\n    ?protein up:sequence ?isoform .\n    ?isoform rdf:value ?sequence .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003829",
            "question": "Select the Gene Protein Reaction sets for Human (Ensembl Gene, Human UniProtKB, Catalyzed Rhea reactions)",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?ensemblGene ?protein ?rhea\nWHERE {\n  ?protein up:reviewed true ;\n           up:organism taxon:9606 .\n  ?protein up:annotation ?caa ;\n           rdfs:seeAlso ?ensemblTranscript .\n  ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n\t?caa up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?rhea .\n  ?ensemblTranscript up:transcribedFrom ?ensemblGene \n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003830",
            "question": "Retrieve glycosylation sites and glycans on human enzymes (federated with glyconnect)",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein ?glycosite ?glycostructure ?glycoimage\nWHERE{\n  ?protein up:annotation ?annotation .\n  ?protein up:organism taxon:9606 .\n  ?annotation a up:Catalytic_Activity_Annotation .\n  ?protein up:sequence ?isoform .\n   \n  SERVICE <https://glyconnect.expasy.org/sparql> {\n    ?glycosite faldo:reference ?isoform .\n    ?glycosite faldo:position ?position .\n    ?specificglycosite faldo:location ?glycosite .\n    ?glycoprotein glycan:glycosylated_at ?specificglycosite .\n    ?glycostructure glycan:glycosylates_at ?specificglycosite .\n    ?glycostructure foaf:depiction ?glycoimage .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003831",
            "question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
            "SPARQL": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003832",
            "question": "Select Enzymes that have Ligands that have a known allosteric effect",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?ligandName \n  ?ligandNote\n  ?chebi\nWHERE {\n   ?protein up:annotation ?annotation .\n   ?annotation a up:Binding_Site_Annotation . \n   ?annotation up:ligand ?ligand .\n   ?ligand rdfs:comment ?ligandNote ;\n     rdfs:subClassOf ?chebi ;\n     rdfs:label ?ligandName .\n   FILTER(REGEX(?ligandNote, \"allosteric\", \"i\"))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003833",
            "question": "Count number of unique Rhea transport reactions annotated in reviewed UniProtKB entries.",
            "SPARQL": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n(COUNT(DISTINCT ?rhea) AS ?distinctRheaTransportInUniProt)\nWHERE\n{\n  GRAPH <https://sparql.rhea-db.org/rhea> {\n    ?rhea rh:isTransport true .\n  }\n  ?protein up:annotation ?ann .\n  ?ann up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?rhea .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003834",
            "question": "For two accessions find the GO term labels and group them into GO process,function and component",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX GO:<http://purl.obolibrary.org/obo/GO_>\n\nSELECT \n    (CONCAT(SUBSTR(STR(?protein), 33)) AS ?uniprot)\n    (GROUP_CONCAT(?celtype; separator=\";\") AS ?celtypes)\n    (GROUP_CONCAT(?biotype; separator=\";\") AS ?biotypes)\n    (GROUP_CONCAT(?moltype; separator=\";\") AS ?moltypes)\nWHERE\n{\n    VALUES (?ac) {(\"Q6GZX4\") (\"Q96375\")}\n    BIND (IRI(CONCAT(\"http://purl.uniprot.org/uniprot/\",?ac)) AS ?protein)\n    ?protein a up:Protein .\n    ?protein up:classifiedWith ?goTerm .\n    #Determine if the type is biological_process\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0008150 .\n        ?goTerm rdfs:label ?biotype .\n    }\n    #Determine if the type is cellular_component\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0005575 .\n        ?goTerm rdfs:label ?celtype .\n    }\n    #Determine if the type is molecular_function\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0003674 .\n        ?goTerm rdfs:label ?moltype .\n    }\n    #Filter out the uniprot keywords\n    FILTER(bound(?biotype) || bound(?celtype) || bound(?moltype))\n} GROUP BY ?protein",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003835",
            "question": "If a gene is located in an organelle other than the nucleus, or/and on a plasmid rather than a chromosome, the gene location is stored in encodedIn properties. Note that if a plasmid has several names, they are listed as multiple <em>rdfs:label</em> properties.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?protein \n    ?plasmidOrOrganelle\n    ?label\nWHERE {\n    ?protein a up:Protein ;\n      up:encodedIn ?plasmidOrOrganelle .\n    OPTIONAL {\n        ?plasmidOrOrganelle rdfs:label ?label .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003836",
            "question": "Select all taxa from the <a href=\"https://www.uniprot.org/taxonomy/\">UniProt taxonomy</a>",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?taxon\nFROM <https://sparql.uniprot.org/taxonomy>\nWHERE\n{\n    ?taxon a up:Taxon .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003837",
            "question": "Count all isoforms for a given proteome",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nPREFIX proteome:<http://purl.uniprot.org/proteomes/>\nSELECT\n  (COUNT(DISTINCT ?sequence) AS ?allIsoforms)\nWHERE\n{\n  ?protein up:reviewed true .\n  ?protein up:organism taxon:9606 .\n  ?protein up:sequence ?sequence .\n  ?protein up:proteome/^skos:narrower proteome:UP000005640 .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003838",
            "question": "Proteins annotated in UniProtKB to be affected by metabolic diseases. Using the MeSH concept as a root to find metabolic diseases in UniProt.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n ?disease ?protein\nWHERE {\n  SERVICE<https://id.nlm.nih.gov/mesh/sparql> {\n    GRAPH <http://id.nlm.nih.gov/mesh> {\n      # Mesh M0013493 is a meaningless gathering about the concept 'Metabolic Diseases'\n\t  ?mesh <http://id.nlm.nih.gov/mesh/vocab#broaderDescriptor>* ?broader .\n      ?broader <http://id.nlm.nih.gov/mesh/vocab#preferredConcept> <http://id.nlm.nih.gov/mesh/M0013493> .\n    }\n  }\n  GRAPH <https://sparql.uniprot.org/diseases>{\n    ?disease a up:Disease ;\n    \trdfs:seeAlso ?mesh .\n    ?mesh up:database <http://purl.uniprot.org/database/MeSH> .\n  }\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n     ?protein up:annotation/up:disease ?disease . \n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003839",
            "question": "Find UniProt entries with merged loci in <a href=\"https://www.uniprot.org/taxonomy/360910\">Bordetella avium</a>",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein \n  (GROUP_CONCAT(?locusName; separator=',') AS ?locusNames)\nWHERE \n{ \n  ?protein a up:Protein ;\n    up:organism taxon:360910 ;\n    up:encodedBy ?gene .\n  ?gene up:locusName ?locusName .\n} \nGROUP BY ?protein \nHAVING (COUNT(?locusName) > 1)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003840",
            "question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
            "SPARQL": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003841",
            "question": "Find Human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003842",
            "question": "Select the UniProt entry with the <a href=\"https://www.uniprot.org/manual/entry_name\">mnemonic</a> 'A4_HUMAN'",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:mnemonic 'A4_HUMAN'\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003843",
            "question": "List all UniProt protein ID (mnemonic) for current UniProt entries.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic \nWHERE\n{\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n        ?uniprot a up:Protein ;\n            up:mnemonic ?mnemonic .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003844",
            "question": "Find enzymes that have at least two transmembrane domains, whose structure is elucidated through X-Ray analysis",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein\nWHERE {\n  ?protein a up:Protein ;\n    up:annotation ?transmembrane_annotation ;\n    rdfs:seeAlso ?wwPDB .\n  {\n    ?protein up:enzyme ?enzyme .\n  } UNION {\n    ?protein up:annotation/a up:Catalytic_Activity_Annotation .\n  }\n  ?wwPDB up:database <http://purl.uniprot.org/database/PDB> ;\n    up:method up:X-Ray_Crystallography .\n  ?transmembrane_annotation a up:Transmembrane_Annotation .\n} GROUP BY ?protein HAVING(COUNT(DISTINCT ?transmembrane_annotation ) >= 2)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003845",
            "question": "List all Human UniProt entries and their sequences, marking if the sequence listed is the cannonical sequence of the matching entry.",
            "SPARQL": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?entry ?sequence ?isCanonical\nWHERE {\n  # We don't want to look into the UniParc graph which will \n  # confuse matters\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n      # we need the UniProt entries that are human\n      ?entry a up:Protein ;\n\tup:organism taxon:9606 ;\n      \tup:sequence ?sequence .\n      # If the sequence is a \"Simple_Sequence\" it is likely to be the \n      # cannonical sequence\n      OPTIONAL {\n       \t?sequence a up:Simple_Sequence .\n        BIND(true AS ?likelyIsCanonical)\n      }\n      # unless we are dealing with an external isoform\n      # see https://www.uniprot.org/help/canonical_and_isoforms\n      OPTIONAL {\n       \tFILTER(?likelyIsCanonical)\n        ?sequence a up:External_Sequence .\n        BIND(true AS ?isComplicated)\n      }\n      # If it is an external isoform it's id would not match the \n      # entry primary accession\n      BIND(IF(?isComplicated, STRENDS(STR(?entry), STRBEFORE(SUBSTR(STR(?sequence), 34),'-')),?likelyIsCanonical) AS ?isCanonical)\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003846",
            "question": "List all UniProt protein ID (mnemonic) that where used in the past for current UniProt entries.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?obsoleteMnemonic \nWHERE\n{\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n        ?uniprot a up:Protein ;\n            up:oldMnemonic ?obsoleteMnemonic .\n    }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003847",
            "question": "Find all Natural Variant Annotations if associated via an evidence tag to an article with a pubmed identifier",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?accession\n    ?annotation_acc \n    ?pubmed\nWHERE\n{\n        ?protein a up:Protein ;\n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n  BIND(SUBSTR(STR(?protein),33) AS ?accession)\n  BIND(IF(CONTAINS(STR(?annotation), \"#SIP\"), SUBSTR(STR(?annotation),33), SUBSTR(STR(?annotation),36))AS?annotation_acc)\n  BIND(SUBSTR(STR(?source),35) AS ?pubmed)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003848",
            "question": "List UniProt proteins with their associated gene and the gene's names that are used in the field, but not recommeded for use by UniProt",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein\n  ?gene ?altGeneName\nWHERE {\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n  ?gene skos:altLabel ?altGeneName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003849",
            "question": "List <a href=\"https://www.rhea-db.org/\">Rhea</a> reactions associated with an <a href=\"https://iubmb.qmul.ac.uk/enzyme/index.html\">EC (enzyme classification)</a>.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?rhea \n  ?EC \nWHERE {\n  ?CatalyticActivity  up:catalyzedReaction   ?rhea ;\n    up:enzymeClass         ?EC .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003850",
            "question": "Find enzymes, where the active site is a region affected by mutagenesis and show the comment regarding mutagenesis effect.",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein ?mutagenesisBeginPosition ?activeSiteBeginPosition ?mutagenesisRangeEndPosition ?mutagenesisComment\nWHERE {\n  ?protein up:annotation ?activeSiteAnnotation , \n      ?mutagenesisAnnotation .\n  ?mutagenesisAnnotation a up:Mutagenesis_Annotation ;\n     up:range ?mutagenesisRange ;\n\t rdfs:comment ?mutagenesisComment .\n  ?activeSiteAnnotation a up:Active_Site_Annotation ;\n    up:range ?activeSiteRange .\n  ?activeSiteRange faldo:begin ?activeSiteBegin .\n  ?activeSiteBegin faldo:position ?activeSiteBeginPosition ;\n    faldo:reference ?sequence .\n  ?mutagenesisRange faldo:begin ?mutagenesisRangeBegin ; \n    faldo:end ?mutagenesisRangeEnd . \n  ?mutagenesisRangeBegin faldo:position ?mutagenesisBeginPosition ;\n    faldo:reference ?sequence .\n  ?mutagenesisRangeEnd faldo:position ?mutagenesisRangeEndPosition .\n  FILTER(?mutagenesisBeginPosition <= ?activeSiteBeginPosition && ?activeSiteBeginPosition <= ?mutagenesisRangeEndPosition)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003851",
            "question": "The recommended protein full names for UniProtKB entries",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein\n  ?fullName\nWHERE {\n  ?protein a up:Protein ;\n           up:recommendedName ?recommendedName .\n  ?recommendedName up:fullName ?fullName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003852",
            "question": "Get the list of uniprot entries for the chromosome of proteome <a href=\"https://www.uniprot.org/proteomes/UP000000625\">UP000000625</a>",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein\n  ?proteome \nWHERE\n{\n  ?protein a up:Protein ;\n           up:reviewed true ;\n           up:proteome ?proteome .\n  VALUES (?proteome) {(<http://purl.uniprot.org/proteomes/UP000000625#Chromosome>)}\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003853",
            "question": "Select the number of UniProt entries for each of the EC (Enzyme Commission) top level categories",
            "SPARQL": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?ecClass (COUNT(?protein) as ?size)\nWHERE\n{\n    VALUES (?ecClass) {(ec:1.-.-.-) (ec:2.-.-.-) (ec:3.-.-.-) (ec:4.-.-.-) (ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)} .\n    ?protein ( up:enzyme | up:domain/up:enzyme | up:component/up:enzyme ) ?enzyme .\n    # Enzyme subclasses are materialized, do not use rdfs:subClassOf+\n    ?enzyme rdfs:subClassOf ?ecClass .\n}\nGROUP BY ?ecClass ORDER BY ?ecClass",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003854",
            "question": "List all InterPro member database signature match start and end for a specific UniProt protein.",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?protein ?interproMemberDatabaseXref ?matchStart ?matchEnd\nWHERE{\n  GRAPH <https://sparql.uniprot.org/uniprot> {\n    VALUES ?protein {<http://purl.uniprot.org/uniprot/P05067>} .\n    ?protein rdfs:seeAlso ?sa .\n  }\n  GRAPH <https://sparql.uniprot.org/uniparc> {\n    ?uniparc up:sequenceFor ?protein ;\n      rdfs:seeAlso ?interproMemberDatabaseXref .\n    ?interproDatabaseXref up:signatureSequenceMatch ?sam .\n    ?sam faldo:begin ?sab ;\n      faldo:end ?sae .\n    ?sab faldo:position ?matchStart ;\n      faldo:reference ?uniparc .\n    ?sae  faldo:position ?matchEnd ;\n      faldo:reference ?uniparc .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003855",
            "question": "Find all taxonomic records that describe species of the genus <a href=\"http://purl.uniprot.org/taxonomy/9605\">Homo<a>.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?species \n  ?genus \nWHERE {\n  BIND(taxon:9605 AS ?genus)\n  ?species a up:Taxon ;\n           up:rank up:Species ;\n           rdfs:subClassOf ?genus .\n  ?genus a up:Taxon ;\n         up:rank up:Genus .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003856",
            "question": "Extracting an UniProtKB primary accession from our IRIs. Is done with a bit of string manipulation. While UniProt primary accession are unique within UniProtKB they may be reused by accident or itentionally by other data sources. If we provided them as strings (not IRI) and if you used them in a query that way, you might accidentaly retrieve completly wrong records.",
            "SPARQL": "PREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?primaryAccession\n  ?protein\nWHERE {\n  ?protein a up:Protein .\n  BIND(substr(str(?protein), strlen(str(uniprotkb:))+1) AS ?primaryAccession)\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003857",
            "question": "Select a mapping of UniProt to PDB entries using the UniProt cross-references to the <a href=\"https://www.uniprot.org/database/DB-0070\">PDB</a> database",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?db\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein rdfs:seeAlso ?db .\n    ?db up:database <http://purl.uniprot.org/database/PDB>\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003858",
            "question": "Predicates and objects, for a given UniParc accession as a subject",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?predicate \n  ?object \nWHERE { \n  <http://purl.uniprot.org/uniparc/UPI000012A0AD> ?predicate ?object\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003859",
            "question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
            "SPARQL": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003860",
            "question": "Map PDB identifiers plus chains to UniProt",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?pdbId ?chain ?pdbChain ?uniprot\nWHERE\n{\n  # A space separated list of pairs of PDB identifiers and the chain code.\n  VALUES(?pdbId ?pdbChain) { ('6VXC' 'A') ('1BG3' 'B') }\n\n  # Make an IRI out of the pdbId\n  BIND(iri(concat('http://rdf.wwpdb.org/pdb/', ?pdbId)) AS ?pdb)\n\n  # Map to UniProt entries\n  ?uniprot rdfs:seeAlso ?pdb .\n  ?pdb up:database <http://purl.uniprot.org/database/PDB> ;\n       up:chainSequenceMapping ?chainSm .\n  ?chainSm up:chain ?chainsPlusRange .\n\n  # Extract the list of chains from the text representation.\n  BIND(STRBEFORE(?chainsPlusRange, '=') AS ?chain)\n\n  # Filter those that match.\n  FILTER(CONTAINS(?chain, ?pdbChain))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003861",
            "question": "Find how often an article in pubmed was used in an evidence tag in a human protein (ordered by most used to least)",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?source \n    (COUNT(?attribution) AS ?attribitions)\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ;\n            up:annotation ?annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n} GROUP BY ?source ORDER BY DESC(COUNT(?attribution))",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003862",
            "question": "List <a href=\"https://www.rhea-db.org/\">Rhea</a> reactions thar are <em>not</em> associated with an <a href=\"https://iubmb.qmul.ac.uk/enzyme/index.html\">EC (enzyme classification)</a>.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?rhea \n  ?EC \nWHERE {\n  ?CatalyticActivity up:catalyzedReaction ?rhea .\n  MINUS {\n    ?CatalyticActivity up:enzymeClass ?EC .\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003863",
            "question": "Find any uniprot entry, or an uniprot entries domain or component which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName)|((up:domain|up:component)/(up:recommendedName|up:alternativeName)) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003864",
            "question": "List all UniProt protein and if they are reviewed (Swiss-Prot) or unreviewed (TrEMBL)",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?reviewed\nWHERE {\n  ?protein a up:Protein . \n  ?protein up:reviewed ?reviewed . \n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003865",
            "question": "Find the similar proteins for UniProtKB entry P05067 sorted by UniRef cluster identity",
            "SPARQL": "PREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n    ?similar ?identity\nFROM <https://sparql.uniprot.org/uniref>\nFROM <https://sparql.uniprot.org/uniprot>\nWHERE\n{\n    BIND (uniprotkb:P05607 AS ?protein)\n    ?cluster up:member ?member ;\n             up:member/up:sequenceFor ?protein;\n             up:identity ?identity .\n    ?member up:sequenceFor ?similar .\n    FILTER(!sameTerm(?similar, ?protein))\n} \nORDER BY DESC(?identity)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003866",
            "question": "Retrieve the rank and the scientific name of an taxonomic record. Not all taxonomic records have a <a href=\"http://purl.uniprot.org/core/rank\">rank</a> associated with them.",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?taxon \n  ?scientificName\n  ?rank\nWHERE {\n  ?taxon a up:Taxon ;\n         up:scientificName ?scientificName .\n  OPTIONAL {\n    ?taxon up:rank ?rank\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003867",
            "question": "Select reviewed UniProt entries (Swiss-Prot), and their recommended protein name, that have a preferred gene name that contains the text 'DNA'",
            "SPARQL": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?name\nWHERE\n{\n        ?protein a up:Protein .\n        ?protein up:reviewed true .\n        ?protein up:recommendedName ?recommended .\n        ?recommended up:fullName ?name .\n        ?protein up:encodedBy ?gene .\n        ?gene skos:prefLabel ?text .\n        FILTER CONTAINS(?text, 'DNA')\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003868",
            "question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <http://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"?????????????\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003869",
            "question": "How many distinct extinct organisms are represented in UniProtKB",
            "SPARQL": "PREFIX keywords: <http://purl.uniprot.org/keywords/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT \n  ?taxon\n  (SAMPLE(?name) AS ?anName)\n  (COUNT(DISTINCT ?protein) AS ?entriesPerExtinctTaxon)\nWHERE\n{\n  GRAPH<https://sparql.uniprot.org/taxonomy>{\n    ?taxon a up:Taxon ;\n           up:scientificName ?name .\n  }\n  ?protein up:organism ?taxon ;\n           up:classifiedWith keywords:952 .\n} GROUP BY ?taxon ORDER BY ?taxon",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003870",
            "question": "Find all rhea (only small molecule) that are used in UniProt where the annotation has a paper and is tagged having experimental evidence.",
            "SPARQL": "PREFIX ECO: <http://purl.obolibrary.org/obo/ECO_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?rhea \n  ?catalyzedReaction \n  ?source\nWHERE {\n  {  \n    SELECT \n      DISTINCT \n        ?rhea\n      WHERE {\n        GRAPh<https://sparql.rhea-db.org/rhea> {\n          ?rhea rdfs:subClassOf rh:Reaction .\n          ?rhea rh:side/rh:contains/rh:compound ?compound2 . \n          ?uc rdfs:subClassOf rh:Compound .\n        }\n        ?compound2 rdfs:subClassOf ?uc . \n    \tBIND(IF(?uc = rh:SmallMolecule, 0, 1) AS ?c)  \n     } GROUP BY ?rhea  HAVING (SUM(?c) = 0)\n  }\n  ?catalyzedReaction up:catalyzedReaction ?rhea .\n  ?reif rdf:object ?catalyzedReaction ;\n        up:attribution ?attr .\n  ?attr up:evidence ECO:0000269 ;\n        up:source ?source .\n  ?source a up:Citation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003871",
            "question": "List UniProt proteins with their associated gene and the gene's ORF label",
            "SPARQL": "PREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?gene \n  ?orfName\nWHERE {\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n  ?gene up:orfName ?orfName .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003872",
            "question": "Select all human UniProt entries with a sequence variant that leads to a 'loss of function'",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?text\nWHERE\n{ \n        ?protein a up:Protein .\n        ?protein up:organism taxon:9606 . \n        ?protein up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation . \n        ?annotation rdfs:comment ?text .\n        FILTER (CONTAINS(?text, 'loss of function'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.uniprot.org/sparql/",
            "fetchUrl": "https://sparql.uniprot.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000100"
            ]
        },
        {
            "id": "Q00003873",
            "question": "Select all glycosylations (glycan, protein, position) with their associated disease where the name start with 'cancer'",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sio: <http://semanticscience.org/resource/>\n\nSELECT distinct ?glycoprotein ?isoform ?position ?structure ?disease ?diseasename\nwhere {\n?glycosite faldo:reference ?isoform .\n?glycosite faldo:position ?position .\n?specificglycosite faldo:location ?glycosite .\n?glycoprotein glycan:glycosylated_at ?specificglycosite .\n?structure glycan:glycosylates_at ?specificglycosite .\n?refconjugate glycan:has_protein_part ?glycoprotein .\n?refconjugate glycan:has_association ?refconjugatedisease .\n?refconjugatedisease sio:SIO_000628 ?disease .\n?disease rdfs:label ?diseasename .\nFILTER regex(?diseasename, \"^cancer\", \"i\") .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://glyconnect.expasy.org/sparql",
            "fetchUrl": "https://glyconnect.expasy.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000108"
            ]
        },
        {
            "id": "Q00003874",
            "question": "Get all Glyconnect reference papers",
            "SPARQL": "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\n\nSELECT distinct ?citation ?pmid\nwhere {\n?refconjugate glycan:published_in ?citation. \n?citation foaf:primaryTopicOf ?pmid .  \n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://glyconnect.expasy.org/sparql",
            "fetchUrl": "https://glyconnect.expasy.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000108"
            ]
        },
        {
            "id": "Q00003875",
            "question": "Get all Glyconnect proteins their Uniprot reference isoform",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\n\nSELECT distinct ?glycoprotein ?isoform\nwhere {\n?glycosite faldo:reference ?isoform .\n?specificglycosite faldo:location ?glycosite .\n?glycoprotein glycan:glycosylated_at ?specificglycosite .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://glyconnect.expasy.org/sparql",
            "fetchUrl": "https://glyconnect.expasy.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000108"
            ]
        },
        {
            "id": "Q00003876",
            "question": "Get all Glyconnect glycan with their graphical SNFG representation",
            "SPARQL": "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\n\nSELECT distinct ?structure ?image \nwhere {\n?structure glycan:glycosylates_at ?specificglycosite .\n?structure foaf:depiction ?image  \n  }",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://glyconnect.expasy.org/sparql",
            "fetchUrl": "https://glyconnect.expasy.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000108"
            ]
        },
        {
            "id": "Q00003877",
            "question": "Select all glycosylations (glycan, protein, position) with their reference articles",
            "SPARQL": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX glycan: <http://purl.jp/bio/12/glyco/glycan#>\n\nSELECT distinct ?glycoprotein ?isoform ?position ?structure ?image  ?citation ?pmid\nwhere {\n?glycosite faldo:reference ?isoform .\n?glycosite faldo:position ?position .\n?specificglycosite faldo:location ?glycosite .\n?glycoprotein glycan:glycosylated_at ?specificglycosite .\n?structure glycan:glycosylates_at ?specificglycosite .\n?structure foaf:depiction ?image .\n?refconjugate glycan:has_protein_part ?glycoprotein .\n?refconjugate glycan:published_in ?citation . \n?citation foaf:primaryTopicOf ?pmid .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://glyconnect.expasy.org/sparql",
            "fetchUrl": "https://glyconnect.expasy.org/sparql?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000108"
            ]
        },
        {
            "id": "Q00003878",
            "question": "Select all Rhea reactions that involve a lipid, i.e. children of CHEBI:18059 in the ChEBI hierarchy.",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 17\n# Select all Rhea reactions that involve a lipid, i.e. children of CHEBI:18059 in the ChEBI hierarchy.\n# \n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=chebi:18059\n#\nSELECT distinct ?chebi ?name ?rhea ?equation\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:equation ?equation .\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  #\n  # the ChEBI can be used either as a small molecule, the reactive part of a macromolecule or as a polymer.\n  #\n  { \n    ?chebi rdfs:subClassOf* CHEBI:18059 . # lipid\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  UNION \n  { # add non-pH 7.3 species\n    ?not7_3 rdfs:subClassOf* CHEBI:18059 . # lipid\n    ?not7_3 rdfs:subClassOf ?chebiRestriction .\n    ?chebiRestriction a owl:Restriction .\n    ?chebiRestriction owl:onProperty chebihash:has_major_microspecies_at_pH_7_3 .\n    ?chebiRestriction owl:someValuesFrom ?chebi .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?chebi up:name ?name .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003879",
            "question": "Select all Rhea reactions that have a pair of ChEBI IDs as reaction participant and in opposite side",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 16\n# Select all Rhea reactions that have a pair of ChEBI IDs as reaction participant and in opposite side\n# Return Rhea reactions that have CHEBI:29985 (L-glutamate) as reaction participant in one side\n# and CHEBI:58359 (L-glutamine) in the other side\n#\n# This query cannot be expressed in the Rhea website\nSELECT ?chebi1 ?name1 ?chebi2 ?name2 ?rhea ?equation\nWHERE {\n  VALUES (?chebi1) { (CHEBI:29985) }\n  ?chebi1 up:name ?name1 .\n  ?rhea rh:side ?reactionSide1 .\n  ?reactionSide1  rh:contains / rh:compound / rh:chebi ?chebi1 .\n\n  VALUES (?chebi2) { (CHEBI:58359) }\n  ?chebi2 up:name ?name2 .\n\n  ?rhea rh:side ?reactionSide2 .\n  ?reactionSide2  rh:contains / rh:compound / rh:chebi ?chebi2 .\n  \n  ?reactionSide1 rh:transformableTo ?reactionSide2 .\n  \n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003880",
            "question": "Select all Rhea reactions that have a given ChEBI ID as reaction participant",
            "SPARQL": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 14\n# Select all Rhea reactions that have CHEBI:29985 (L-glutamate) as reaction participant\n# \n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=chebi:29985\nSELECT distinct ?chebi ?rhea ?equation\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:equation ?equation .\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  #\n  # the ChEBI can be used either as a small molecule, the reactive part of a macromolecule or as a polymer.\n  #\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  VALUES (?chebi) { (CHEBI:29985) }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003881",
            "question": "Select all ChEBI compounds used in Rhea as reaction participant",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 15\n# Select all ChEBI compounds used in Rhea as reaction participant\n# \n# This query can not be expressed in the Rhea website\nSELECT ?chebi ?name (count(?rhea) as ?countRhea)\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  #\n  # the ChEBI can be used either as a small molecule, the reactive part of a macromolecule or as a polymer.\n  #\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi up:name ?name .\n}\nGROUP BY ?chebi ?name\nORDER BY DESC(?countRhea)",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003882",
            "question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
            "SPARQL": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003883",
            "question": "Select all Rhea reactions linked to an enzyme classification (sub)-class",
            "SPARQL": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 10\n# Select all Rhea reactions mapped to \n# \n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=ec:1.*\n# https://www.rhea-db.org/rhea?query=ec:1.1.*\n# https://www.rhea-db.org/rhea?query=ec:1.1.1.*\n#\nSELECT ?ec ?ecNumber ?rhea ?accession ?equation\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:accession ?accession .\n  ?rhea rh:ec ?ec .\n  BIND(strafter(str(?ec),str(ec:)) as ?ecNumber)\n  # class (e.g EC 1.-.-.-)\n  FILTER (regex(?ecNumber,'^1\\\\.')) \n  # sub-class  (e.g EC 1.1.-.-)\n  #FILTER (regex(?ecNumber,'^1\\\\.1\\\\.')) \n  # sub-sub-class (e.g EC 1.1.1.-)\n  #FILTER (regex(?ecNumber,'^1\\\\.1\\\\.1\\\\.')) \n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003884",
            "question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
            "SPARQL": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003885",
            "question": "Select all Rhea reactions used in UniProtKB/Swiss-Prot for a given organism (NCBI taxonomy ID).",
            "SPARQL": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 13\n# Select all Rhea reactions used to annotate Escherichia coli (taxid=83333) in UniProtKB/Swiss-Prot\n# return the number of UniProtKB entries\n# \n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query cannot be performed using the Rhea search website\nSELECT ?uniprot ?mnemo ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n    VALUES (?taxid) { (taxon:83333) }\n    GRAPH <https://sparql.uniprot.org/uniprot> {\n      ?uniprot up:reviewed true . \n      ?uniprot up:mnemonic ?mnemo . \n      ?uniprot up:organism ?taxid .\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n    }\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003886",
            "question": "Select all Rhea reactions mapped to GO molecular functions",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 8\n# Select all Rhea reactions mapped to GO molecular function\n# \n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=go:*\n#\nSELECT ?go ?rhea ?equation \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rdfs:seeAlso ?go .\n  FILTER CONTAINS(str(?go), \"GO_\")   \n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003887",
            "question": "Select all Rhea reactions mapped to enzyme classification (EC numbers)",
            "SPARQL": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 9\n# Select all Rhea reactions mapped to EC numbers (enzyme classification)\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=ec:*\n#\nSELECT ?ec ?ecNumber ?rhea ?accession ?equation\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:accession ?accession .\n  ?rhea rh:ec ?ec .\n  BIND(strafter(str(?ec),str(ec:)) as ?ecNumber)\n  ?rhea rh:isTransport ?isTransport .\n  ?rhea rh:equation ?equation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003888",
            "question": "Select all Rhea reactions mapped to Reactome reactions</a>",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 7 \n# Select all Rhea reactions mapped to Reactome reactions\n# MetaCyc reactions are mapped to either undirected, left-to-right or right-to-left reactions\n# Rhea web query: https://www.rhea-db.org/rhea?query=reactome:*\n#    \nSELECT distinct ?rhea ?rheaDir ?reactome  \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  {\n    ?rhea rdfs:seeAlso ?reactome .\n    FILTER CONTAINS(str(?reactome), \"reactome\") \n    BIND(?rhea as ?rheaDir)\n  }\n  UNION\n  {\n    ?rhea rh:directionalReaction ?directionalReaction .\n    ?directionalReaction rdfs:seeAlso ?reactome . \n    FILTER CONTAINS(str(?reactome), \"reactome\") \n    BIND(?directionalReaction as ?rheaDir  )\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003889",
            "question": "Select all Rhea reactions mapped to MetaCyc reactions",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 6 \n# Select all Rhea reactions mapped to MetaCyc reactions\n# MetaCyc reactions are mapped to either undirected, left-to-right, right-to-left or bidirectional reactions\n# Rhea web query: https://www.rhea-db.org/rhea?query=metacyc:*\n#\nSELECT distinct ?rhea ?rheaDir ?metacyc\nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  {\n    ?rhea rdfs:seeAlso ?metacyc .\n    FILTER CONTAINS(str(?metacyc), \"METACYC\") \n    BIND(?rhea as ?rheaDir)\n  }\n  UNION\n  {\n    ?rhea rh:directionalReaction ?directionalReaction .\n    ?directionalReaction rdfs:seeAlso ?metacyc . \n    FILTER CONTAINS(str(?metacyc), \"METACYC\") \n    BIND(?directionalReaction as ?rheaDir  )\n  }\n  UNION\n  {\n    ?rhea rh:bidirectionalReaction ?bidirectionalReaction .\n    ?bidirectionalReaction rdfs:seeAlso ?metacyc . \n    FILTER CONTAINS(str(?metacyc), \"METACYC\") \n    BIND(?bidirectionalReaction as ?rheaDir  )\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003890",
            "question": "Select all cross-references for a given reaction",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 4\n# Select all cross-references mapped to RHEA:21016\n# \n# This query mimics the Cross-references section of \n# https://www.rhea-db.org/rhea/21016\n#\nSELECT distinct ?rhea ?rheaDir ?xref \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  VALUES (?rhea) {(rh:21016)}\n  {\n    ?rhea rdfs:seeAlso ?xref .\n    BIND(?rhea as ?rheaDir)\n  }\n  UNION\n  {\n    ?rhea rh:directionalReaction ?directionalReaction .\n    ?directionalReaction rdfs:seeAlso ?xref . \n    BIND(?directionalReaction as ?rheaDir  )\n  }\n  UNION\n  {\n    ?rhea rh:bidirectionalReaction ?bidirectionalReaction .\n    ?bidirectionalReaction rdfs:seeAlso ?xref . \n    BIND(?bidirectionalReaction as ?rheaDir  )\n  }\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003891",
            "question": "Select all Rhea reactions mapped to KEGG reactions",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 5 \n# Select all Rhea reactions mapped to KEGG reactions\n# KEGG reactions are mapped to Rhea bidirectional reactions\n# Rhea web query: https://www.rhea-db.org/rhea?query=kegg:*\n#\nSELECT ?rhea ?kegg ?rheaDir \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:bidirectionalReaction ?rheaDir .\n  ?rheaDir rdfs:seeAlso ?kegg .\n  FILTER (regex(str(?kegg),'kegg'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003892",
            "question": "Select all Rhea reactions",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 1\n# Select all Rhea reactions (unspecified direction) \n# and return identifier (id), accession, boolean attributes (isChemicallyBalanced, isTransport) and chemical equation.\n#\nSELECT ?rhea ?id ?accession ?isChemicallyBalanced ?isTransport  ?equation \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:id ?id .\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n  ?rhea rh:isTransport ?isTransport .\n  ?rhea rh:isChemicallyBalanced ?isChemicallyBalanced .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003893",
            "question": "Select all Rhea reactions annotated with a given Pubmed ID",
            "SPARQL": "PREFIX pubmed: <http://rdf.ncbi.nlm.nih.gov/pubmed/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 2 \n# Select all Rhea reactions annotated with a given Pubmed identifier (PMID = 29867142)\n#\nSELECT ?pubmed ?rhea ?accession ?isTransport  ?equation \nWHERE {\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:accession ?accession .\n  ?rhea rh:citation ?pubmed .\n  VALUES (?pubmed) { (pubmed:29867142) }\n  ?rhea rh:isTransport ?isTransport .\n  ?rhea rh:equation ?equation .\n} ORDER BY ?rhea",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003894",
            "question": "Select the specific form of <a href=\"https://www.rhea-db.org/rhea/11628\">RHEA:11628</a>, a reaction that deals with general chemical classes (i.e. select the equivalent reactions involving instances of the chemical classes in <a href=\"https://www.rhea-db.org/rhea/11628\">RHEA:11628</a>",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Query 3\n# Select the specific form of RHEA:11628.\n# This query mimics the Related reactions sections of\n# https://www.rhea-db.org/rhea/11628\n#\nSELECT ?rhea  ?equation ?childrenRhea ?childrenEquation \nWHERE {\n  VALUES (?rhea) {(rh:11628)}\n  ?rhea rh:equation ?equation .\n  ?childrenRhea rdfs:subClassOf+ ?rhea .\n  ?childrenRhea rh:equation ?childrenEquation .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003895",
            "question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
            "SPARQL": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://sparql.rhea-db.org/sparql/",
            "fetchUrl": "https://sparql.rhea-db.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000107"
            ]
        },
        {
            "id": "Q00003896",
            "question": "Select all hamap rules that annotate a Rhea reaction with an EC enzyme class",
            "SPARQL": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sp: <http://spinrdf.org/sp#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT ?rule ?enzymeClass\nWHERE\n{\n ?rule a sp:Construct ;\n     sp:templates/rdf:rest*/rdf:first ?annotationsToAdd .\n ?annotationsToAdd sp:predicate up:enzymeClass ;\n                   sp:object ?enzymeClass .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://hamap.expasy.org/sparql/",
            "fetchUrl": "https://hamap.expasy.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000109"
            ]
        },
        {
            "id": "Q00003897",
            "question": "Select all hamap rules",
            "SPARQL": "PREFIX sh: <http://www.w3.org/ns/shacl#>\n\nSELECT ?rule\nWHERE\n{\n    ?rule sh:construct ?query  .\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://hamap.expasy.org/sparql/",
            "fetchUrl": "https://hamap.expasy.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000109"
            ]
        },
        {
            "id": "Q00003898",
            "question": "Show the triples about <a href=\"https://hamap.expasy.org/rule/\">MF_00001</a>",
            "SPARQL": "DESCRIBE <http://purl.uniprot.org/hamap/MF_00001>",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://hamap.expasy.org/sparql/",
            "fetchUrl": "https://hamap.expasy.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000109"
            ]
        },
        {
            "id": "Q00003899",
            "question": "Select all hamap rules that deal with Catalytic Activity",
            "SPARQL": "PREFIX sh: <http://www.w3.org/ns/shacl#>\n\n\nSELECT ?rule ?query\nWHERE\n{\n    ?rule sh:construct ?query  .\n    FILTER (CONTAINS(?query, 'Catalytic_Activity_Annotation'))\n}",
            "queryHeaders": {"Accept": "application/sparql-results+json"},
            "fetchUrlShort": "https://hamap.expasy.org/sparql/",
            "fetchUrl": "https://hamap.expasy.org/sparql/?query=$$query$$&format=srj",
            "vars": [],
            "parentIds": [
                "C00000109"
            ]
        }
    ],
    "datasources": {
        "species": {
            "id": "D00000001",
            "fetchUrl": "https://sparql.omabrowser.org/lode/servlet/query?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?value WHERE {\n?s a up:Taxon .\n?s up:scientificName ?value .\n?s up:rank up:Species .\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n}LIMIT 100"
        },
        "uniprotmnemonics": {
            "id": "D00000002",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?value\nWHERE\n{\n ?protein a up:Protein .\n ?protein up:mnemonic ?value\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "uniprottaxons": {
            "id": "D00000003",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?name ?value\nWHERE\n{\n?value a up:Taxon ;\nup:scientificName ?name\nFILTER(CONTAINS(lcase(str(?name)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "uniprotnaturalannotations": {
            "id": "D00000004",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?value\nWHERE\n{\n?protein a up:Protein .\n?protein up:organism taxon:9606 .\n?protein up:annotation ?annotation .\n?annotation a up:Natural_Variant_Annotation .\n?annotation rdfs:comment ?value .\nFILTER (CONTAINS(?value, '$$searchString$$'))\n} LIMIT 100"
        },
        "ensemblgenes": {
            "id": "D00000005",
            "fetchUrl": "https://sparql.omabrowser.org/lode/servlet/query?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX dct: <http://purl.org/dc/terms/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT ?value\nWHERE {\n?protein1 sio:SIO_010079/lscr:xrefEnsemblGene ?ens .\n\n?ens dct:identifier ?value . FILTER(CONTAINS(lcase(str(?ens)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "omaproteins": {
            "id": "D00000006",
            "fetchUrl": "https://sparql.omabrowser.org/lode/servlet/query?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX lscr: <http://purl.org/lscr#>\nSELECT ?value\nWHERE {\n?protein1 a orth:Protein .\n?protein1 dct:identifier ?value . FILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "taxlevels": {
            "id": "D00000007",
            "fetchUrl": "https://sparql.omabrowser.org/lode/servlet/query?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX orth: <http://purl.org/net/orth#>\nSELECT DISTINCT ?value\nWHERE {\n?taxRange orth:taxRange ?value .\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n}LIMIT 100"
        },
        "speciescommon": {
            "id": "D00000008",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/> SELECT DISTINCT ?value WHERE {  ?s a up:Taxon .  ?s up:commonName ?value . ?s up:rank up:Species . FILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))}"
        },
        "speciescommonIRI": {
            "id": "D00000009",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/> SELECT DISTINCT ?name ?value WHERE {  ?value a up:Taxon .  ?value up:commonName ?name . ?value up:rank up:Species . FILTER(CONTAINS(lcase(str(?name)), \"$$searchString$$\"))}"
        },
        "anatomicentities": {
            "id": "D00000010",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX genex: <http://purl.org/genex#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?value {\n?anatEntity a genex:AnatomicalEntity .\n?anatEntity rdfs:label ?value .\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n}"
        },
        "anatomicentities_extraspecies": {
            "id": "D00000011",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX genex: <http://purl.org/genex#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nSELECT DISTINCT ?value {\n?gene genex:isExpressedIn ?anat .\n?anat rdfs:label ?value .\n?gene orth:organism ?o .\n?o obo:RO_0002162 ?taxon .\n?taxon up:commonName \"$$extra_0$$\" .\n?anat a genex:AnatomicalEntity .\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n}"
        },
        "stages": {
            "id": "D00000012",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX genex: <http://purl.org/genex#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?value { ?stage a <http://www.ebi.ac.uk/efo/EFO_0000399> .\n?stage rdfs:label ?value .\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "genesbgee": {
            "id": "D00000013",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX orth: <http://purl.org/net/orth#>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?value { ?gene a orth:Gene .\n?gene rdfs:label ?value .\nFILTER(STRSTARTS(lcase(str(?value)), \"$$searchString$$\"))\n} LIMIT 100"
        },
        "speciesbgee": {
            "id": "D00000014",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?value {\n?species a up:Taxon .\n?species up:scientificName ?value .\n?species up:rank up:Species .\n\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n} ORDER BY ?value"
        },
        "speciesbgeecommon": {
            "id": "D00000015",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?value {\n?species a up:Taxon .\n?species up:commonName ?value .\n?species up:rank up:Species .\n\nFILTER(CONTAINS(lcase(str(?value)), \"$$searchString$$\"))\n} ORDER BY ?value"
        },
        "speciesbgeecommonIRI": {
            "id": "D00000016",
            "fetchUrl": "https://www.bgee.org/sparql/?query=$$query$$&format=application%2Fsparql-results%2Bjson$$",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?name ?value {\n?value a up:Taxon .\n?value up:commonName ?name .\n?value up:rank up:Species .\n\nFILTER(CONTAINS(lcase(str(?name)), \"$$searchString$$\"))\n} ORDER BY ?value"
        },
        "proteinsatoma": {
            "id": "D00000017",
            "fetchUrl": "https://sparql.omabrowser.org/lode/servlet/query?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth: <http://purl.org/net/orth#>\nSELECT DISTINCT ?value WHERE {\n?proteinOMA a orth:Protein;\nrdfs:label ?value .\nFILTER(STRSTARTS(lcase(str(?value)), \"$$searchString$$\"))}"
        },
        "proteins": {
            "id": "D00000018",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nSELECT DISTINCT ?value\nWHERE\n{\n?protein a up:Protein .\n?protein up:recommendedName ?recommended .\n?recommended up:fullName ?value .\n?protein up:encodedBy ?gene .\n?gene skos:prefLabel ?text .\nFILTER CONTAINS(?text, '$$searchString$$')\n} LIMIT 100"
        },
        "genesuniprot": {
            "id": "D00000019",
            "fetchUrl": "https://sparql.uniprot.org/sparql?query=$$query$$&format=srj&limit=limit$$&offset=$$offset$$&inference=false",
            "fetchQuery": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\nSELECT DISTINCT ?name ?value WHERE {\n\t?value a up:Protein . \n\t?value up:organism taxon:9606 . \n\t?value up:encodedBy ?gene . \n\t?gene skos:prefLabel ?name . \n\tFILTER CONTAINS(lcase(str(?name)), lcase('$$searchString$$'))\n} ORDER BY ?value LIMIT 100"
        }
    }
}